1. Create a Department model in your ASP.NET Core project:
csharp
public class Department
{
    public int Id { get; set; }
    public string Name { get; set; }
}
2. Create a DepartmentController in your ASP.NET Core project:
csharp
[ApiController]
[Route("api/[controller]")]
public class DepartmentController : ControllerBase
{
    private readonly YourDbContext _dbContext;

    public DepartmentController(YourDbContext dbContext)
    {
        _dbContext = dbContext;
    }

    [HttpGet]
    public IActionResult GetDepartments()
    {
        var departments = _dbContext.Departments.ToList();
        return Ok(departments);
    }
}
3. In your Angular component, make an HTTP GET request to the API endpoint and populate the dropdown with the received department data:
typescript
import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-department-dropdown',
  templateUrl: './department-dropdown.component.html',
  styleUrls: ['./department-dropdown.component.css']
})
export class DepartmentDropdownComponent implements OnInit {
  departments: any[];

  constructor(private http: HttpClient) { }

  ngOnInit() {
    this.getDepartments();
  }

  getDepartments() {
    this.http.get<any[]>('https://your-api-url/api/department').subscribe(
      departments => {
        this.departments = departments;
      },
      error => {
        console.log(error);
      }
    );
  }
}
4. In your Angular component's HTML template, use the received department data to populate the dropdown:
html
<select>
  <option *ngFor="let department of departments" [value]="department.id">{{ department.name }}</option>
</select>


To fulfill your requirements, you can follow these steps:

1. Fill department using dropdown:
   - Create a Department model with properties like Id and Name.
   - Create a DepartmentController in your ASP.NET Core project to handle API requests related to departments.
   - Implement a GET action in the DepartmentController to fetch all departments from the database.
   - In your Angular component, make an HTTP GET request to the API endpoint and populate the dropdown with the received department data.

2. Project name using dropdown:
   - Follow a similar approach as above for the Project model and controller.
   - Implement a GET action to fetch all project names from the database.
   - Populate the project name dropdown in your Angular component using the received data.

3. Create employee details:
   - Create an Employee model with properties like Id, Name, DepartmentId, ProjectId, etc.
   - Implement a POST action in the EmployeeController to receive and save the employee details in the database.
   - In your Angular component, create a form to collect employee details and make an HTTP POST request to the API endpoint to save the data.

4. Project manager (read-only):
   - Assuming you have a ProjectManager model, create a read-only endpoint in the ProjectManagerController to fetch the project manager details.
   - In your Angular component, make an HTTP GET request to the endpoint and display the project manager details.

5. Create mapping table and create table using migrator:
   - Create a mapping table model (e.g., EmployeeProjectMapping) with properties like EmployeeId and ProjectId.
   - Use Entity Framework Core's migrations to create the mapping table and other required tables.
   - Run the migration commands to apply the changes to the database.

6. Add menu:
   - In your Angular app, create a navigation menu component that displays the required menu items.
   - Use Angular Router to navigate between different screens.

7. CRUD API:
   - Implement additional actions in the EmployeeController to handle CRUD operations like update and delete.
   - Create corresponding Angular components and services to interact with these API endpoints.

8. Get all, add, update, delete details screen:
   - Create an Angular component to display all employee details.
   - Implement an HTTP GET request to fetch all employee details and display them in the component.
   - Create separate components for adding, updating, and deleting employee details.
   - Implement appropriate HTTP requests to perform these operations.

Remember to configure your ASP.NET Core project to enable CORS if your Angular app is hosted on a different domain. Also, make sure to handle authentication and authorization if required.
Main Avatar
12/12/2023, 12:04:39 AM
1. Fill department using dropdown: - Create a Department model with properties like Id and Name. - Create a DepartmentController in your ASP.NET Core project to handle API requests related to departments. - Implement a GET action in the DepartmentController to fetch all departments from the database. - In your Angular component, make an HTTP GET request to the API endpoint and populate the dropdown with the received department data. creTE first this example with code
Main Avatar
12/12/2023, 12:28:31 AM
Sure! Here's an example of how you can implement the department dropdown functionality using ASP.NET Core and Angular:

1. Create a Department model in your ASP.NET Core project:
csharp
public class Department
{
    public int Id { get; set; }
    public string Name { get; set; }
}
2. Create a DepartmentController in your ASP.NET Core project:
csharp
[ApiController]
[Route("api/[controller]")]
public class DepartmentController : ControllerBase
{
    private readonly YourDbContext _dbContext;

    public DepartmentController(YourDbContext dbContext)
    {
        _dbContext = dbContext;
    }

    [HttpGet]
    public IActionResult GetDepartments()
    {
        var departments = _dbContext.Departments.ToList();
        return Ok(departments);
    }
}
3. In your Angular component, make an HTTP GET request to the API endpoint and populate the dropdown with the received department data:
typescript
import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-department-dropdown',
  templateUrl: './department-dropdown.component.html',
  styleUrls: ['./department-dropdown.component.css']
})
export class DepartmentDropdownComponent implements OnInit {
  departments: any[];

  constructor(private http: HttpClient) { }

  ngOnInit() {
    this.getDepartments();
  }

  getDepartments() {
    this.http.get<any[]>('https://your-api-url/api/department').subscribe(
      departments => {
        this.departments = departments;
      },
      error => {
        console.log(error);
      }
    );
  }
}
4. In your Angular component's HTML template, use the received department data to populate the dropdown:
html
<select>
  <option *ngFor="let department of departments" [value]="department.id">{{ department.name }}</option>
</select>
Make sure to replace `'https://your-api-url/api/department'` with the actual API endpoint URL in your application.

This example assumes you have a database context named `YourDbContext` in your ASP.NET Core project, and a table named `Departments` with columns `Id` and `Name`. Adjust the code according to your specific project structure and database schema.
Main Avatar
12/12/2023, 12:13:36 AM
2. Project name using dropdown: - Follow a similar approach as above for the Project model and controller. - Implement a GET action to fetch all project names from the database. - Populate the project name dropdown in your Angular component using the received data.
Main Avatar
12/12/2023, 12:28:31 AM
Sure! Here's an example of how you can implement the project name dropdown functionality using ASP.NET Core and Angular:

1. Create a Project model in your ASP.NET Core project:
csharp
public class Project
{
    public int Id { get; set; }
    public string Name { get; set; }
}
2. Create a ProjectController in your ASP.NET Core project:
csharp
[ApiController]
[Route("api/[controller]")]
public class ProjectController : ControllerBase
{
    private readonly YourDbContext _dbContext;

    public ProjectController(YourDbContext dbContext)
    {
        _dbContext = dbContext;
    }

    [HttpGet]
    public IActionResult GetProjects()
    {
        var projects = _dbContext.Projects.ToList();
        return Ok(projects);
    }
}
3. In your Angular component, make an HTTP GET request to the API endpoint and populate the dropdown with the received project data:
typescript
import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-project-dropdown',
  templateUrl: './project-dropdown.component.html',
  styleUrls: ['./project-dropdown.component.css']
})
export class ProjectDropdownComponent implements OnInit {
  projects: any[];

  constructor(private http: HttpClient) { }

  ngOnInit() {
    this.getProjects();
  }

  getProjects() {
    this.http.get<any[]>('https://your-api-url/api/project').subscribe(
      projects => {
        this.projects = projects;
      },
      error => {
        console.log(error);
      }
    );
  }
}
4. In your Angular component's HTML template, use the received project data to populate the dropdown:
html
<select>
  <option *ngFor="let project of projects" [value]="project.id">{{ project.name }}</option>
</select>
Make sure to replace `'https://your-api-url/api/project'` with the actual API endpoint URL in your application.

This example assumes you have a database context named `YourDbContext` in your ASP.NET Core project, and a table named `Projects` with columns `Id` and `Name`. Adjust the code according to your specific project structure and database schema.
Main Avatar
12/12/2023, 12:18:28 AM
3. Create employee details: - Create an Employee model with properties like Id, Name, DepartmentId, ProjectId, etc. - Implement a POST action in the EmployeeController to receive and save the employee details in the database. - In your Angular component, create a form to collect employee details and make an HTTP POST request to the API endpoint to save the data.
Main Avatar
12/12/2023, 12:28:31 AM
Sure! Here's an example of how you can create employee details using ASP.NET Core and Angular:

1. Create an Employee model in your ASP.NET Core project:
csharp
public class Employee
{
    public int Id { get; set; }
    public string Name { get; set; }
    public int DepartmentId { get; set; }
    public int ProjectId { get; set; }
    // Other properties...
}
2. Create an EmployeeController in your ASP.NET Core project:
csharp
[ApiController]
[Route("api/[controller]")]
public class EmployeeController : ControllerBase
{
    private readonly YourDbContext _dbContext;

    public EmployeeController(YourDbContext dbContext)
    {
        _dbContext = dbContext;
    }

    [HttpPost]
    public IActionResult CreateEmployee(Employee employee)
    {
        _dbContext.Employees.Add(employee);
        _dbContext.SaveChanges();
        return Ok(employee);
    }
}
3. In your Angular component, create a form to collect employee details and make an HTTP POST request to the API endpoint to save the data:
typescript
import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-employee-form',
  templateUrl: './employee-form.component.html',
  styleUrls: ['./employee-form.component.css']
})
export class EmployeeFormComponent {
  employee: any = {};

  constructor(private http: HttpClient) { }

  createEmployee() {
    this.http.post('https://your-api-url/api/employee', this.employee).subscribe(
      response => {
        console.log('Employee created successfully');
      },
      error => {
        console.log('Error creating employee:', error);
      }
    );
  }
}
4. In your Angular component's HTML template, create a form to collect employee details and call the `createEmployee()` method:
html
<form (submit)="createEmployee()">
  <div>
    <label for="name">Name:</label>
    <input type="text" id="name" [(ngModel)]="employee.name" name="name" required>
  </div>
  <div>
    <label for="department">Department:</label>
    <select id="department" [(ngModel)]="employee.departmentId" name="departmentId" required>
      <!-- Populate department dropdown options here -->
    </select>
  </div>
  <div>
    <label for="project">Project:</label>
    <select id="project" [(ngModel)]="employee.projectId" name="projectId" required>
      <!-- Populate project dropdown options here -->
    </select>
  </div>
  <!-- Add other employee details inputs here -->
  <button type="submit">Create Employee</button>
</form>
Make sure to replace `'https://your-api-url/api/employee'` with the actual API endpoint URL in your application.

Adjust the code according to your specific project structure and database schema.
Main Avatar
12/12/2023, 12:24:13 AM
4. Project manager (read-only): - Assuming you have a ProjectManager model, create a read-only endpoint in the ProjectManagerController to fetch the project manager details. - In your Angular component, make an HTTP GET request to the endpoint and display the project manager details.
Main Avatar
12/12/2023, 12:28:31 AM
Main Avatar
12/12/2023, 12:24:19 AM
4. Project manager (read-only): - Assuming you have a ProjectManager model, create a read-only endpoint in the ProjectManagerController to fetch the project manager details. - In your Angular component, make an HTTP GET request to the endpoint and display the project manager details.
Main Avatar
12/12/2023, 12:28:31 AM
Main Avatar
12/12/2023, 12:24:22 AM
4. Project manager (read-only): - Assuming you have a ProjectManager model, create a read-only endpoint in the ProjectManagerController to fetch the project manager details. - In your Angular component, make an HTTP GET request to the endpoint and display the project manager details.
Main Avatar
12/12/2023, 12:28:31 AM
Sure! Here's an example of how you can create a read-only endpoint for fetching project manager details using ASP.NET Core and Angular:

1. Create a ProjectManager model in your ASP.NET Core project:
public class ProjectManager
{
    public int Id { get; set; }
    public string Name { get; set; }
    // Other properties...
}

2. Create a ProjectManagerController in your ASP.NET Core project:
[ApiController]
[Route("api/[controller]")]
public class ProjectManagerController : ControllerBase
{
    private readonly YourDbContext _dbContext;

    public ProjectManagerController(YourDbContext dbContext)
    {
        _dbContext = dbContext;
    }

    [HttpGet]
    public IActionResult GetProjectManager()
    {
        var projectManager = _dbContext.ProjectManagers.FirstOrDefault();
        return Ok(projectManager);
    }
}

3. In your Angular component, make an HTTP GET request to the endpoint and display the project manager details:
import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-project-manager',
  templateUrl: './project-manager.component.html',
  styleUrls: ['./project-manager.component.css']
})
export class ProjectManagerComponent implements OnInit {
  projectManager: any;

  constructor(private http: HttpClient) { }

  ngOnInit() {
    this.getProjectManager();
  }

  getProjectManager() {
    this.http.get<any>('https://your-api-url/api/projectmanager').subscribe(
      projectManager => {
        this.projectManager = projectManager;
      },
      error => {
        console.log('Error fetching project manager:', error);
      }
    );
  }
}

4. In your Angular component's HTML template, display the project manager details:
<div *ngIf="projectManager">
  <h2>Project Manager Details</h2>
  <p>Name: {{ projectManager.name }}</p>
  <!-- Display other project manager details here -->
</div>

Make sure to replace `'https://your-api-url/api/projectmanager'` with the actual API endpoint URL in your application.

Adjust the code according to your specific project structure and database schema.
Main Avatar
12/12/2023, 12:25:21 AM
5. Create mapping table and create table using migrator: - Create a mapping table model (e.g., EmployeeProjectMapping) with properties like EmployeeId and ProjectId. - Use Entity Framework Core's migrations to create the mapping table and other required tables. - Run the migration commands to apply the changes to the database.
Main Avatar
12/12/2023, 12:28:31 AM
Sure! Here's an example of how you can create a mapping table and use migrations to create the table and other required tables using Entity Framework Core:

1. Create a mapping table model (e.g., `EmployeeProjectMapping`) with properties like `EmployeeId` and `ProjectId`:
csharp
public class EmployeeProjectMapping
{
    public int EmployeeId { get; set; }
    public int ProjectId { get; set; }

    public Employee Employee { get; set; }
    public Project Project { get; set; }
}
2. Open a command prompt or terminal and navigate to your ASP.NET Core project directory.

3. Run the following command to create a new migration:
dotnet ef migrations add CreateMappingTable


This will generate a new migration file with the necessary code to create the mapping table and other required tables.

4. Open the generated migration file (located in the `Migrations` folder) and modify the `Up` method to create the mapping table:
csharp
protected override void Up(MigrationBuilder migrationBuilder)
{
    migrationBuilder.CreateTable(
        name: "EmployeeProjectMappings",
        columns: table => new
        {
            EmployeeId = table.Column<int>(nullable: false),
            ProjectId = table.Column<int>(nullable: false)
        },
        constraints: table =>
        {
            table.PrimaryKey("PK_EmployeeProjectMappings", x => new { x.EmployeeId, x.ProjectId });
            table.ForeignKey("FK_EmployeeProjectMappings_Employees_EmployeeId", x => x.EmployeeId, "Employees", "Id", onDelete: ReferentialAction.Cascade);
            table.ForeignKey("FK_EmployeeProjectMappings_Projects_ProjectId", x => x.ProjectId, "Projects", "Id", onDelete: ReferentialAction.Cascade);
        });
}
5. Run the following command to apply the migration and create the mapping table and other required tables in the database:
dotnet ef database update


This will execute the migration and update the database schema accordingly.

Make sure you have Entity Framework Core installed in your project (`Microsoft.EntityFrameworkCore` and `Microsoft.EntityFrameworkCore.Design` packages).

Adjust the code according to your specific project structure and database schema.
Main Avatar
12/12/2023, 12:26:48 AM
6. Add menu: - In your Angular app, create a navigation menu component that displays the required menu items. - Use Angular Router to navigate between different screens.
Main Avatar
12/12/2023, 12:28:31 AM
Sure! Here's an example of how you can add a menu with navigation using Angular Router:

1. Create a new Angular component for the navigation menu:
typescript
import { Component } from '@angular/core';

@Component({
  selector: 'app-navigation-menu',
  templateUrl: './navigation-menu.component.html',
  styleUrls: ['./navigation-menu.component.css']
})
export class NavigationMenuComponent {
  constructor() { }
}
2. In the `navigation-menu.component.html` template, add the menu items as links using Angular Router:
html
<nav>
  <ul>
    <li><a routerLink="/home">Home</a></li>
    <li><a routerLink="/projects">Projects</a></li>
    <li><a routerLink="/employees">Employees</a></li>
    <li><a routerLink="/project-manager">Project Manager</a></li>
  </ul>
</nav>
3. Import and add the `NavigationMenuComponent` to the necessary app component's template (e.g., `app.component.html`):
html
<app-navigation-menu></app-navigation-menu>

<!-- Add the router outlet to display the components based on the current route -->
<router-outlet></router-outlet>
4. Define the routes and configure the Angular Router in the `app-routing.module.ts` file:
typescript
import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { HomeComponent } from './home.component';
import { ProjectsComponent } from './projects.component';
import { EmployeesComponent } from './employees.component';
import { ProjectManagerComponent } from './project-manager.component';

const routes: Routes = [
  { path: 'home', component: HomeComponent },
  { path: 'projects', component: ProjectsComponent },
  { path: 'employees', component: EmployeesComponent },
  { path: 'project-manager', component: ProjectManagerComponent },
  { path: '', redirectTo: '/home', pathMatch: 'full' },
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
5. Import and add the `AppRoutingModule` to the `imports` array in the `app.module.ts` file:
typescript
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { NavigationMenuComponent } from './navigation-menu.component';

@NgModule({
  declarations: [
    AppComponent,
    NavigationMenuComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
Make sure to adjust the code according to your specific project structure and the components you have in your application.

Now, when you run your Angular app, you should see the navigation menu with the specified menu items, and clicking on each menu item will navigate to the corresponding component.
Main Avatar
12/12/2023, 12:27:39 AM
7. CRUD API: - Implement additional actions in the EmployeeController to handle CRUD operations like update and delete. - Create corresponding Angular components and services to interact with these API endpoints.
Main Avatar
12/12/2023, 12:28:31 AM
Main Avatar
12/12/2023, 12:27:46 AM
7. CRUD API: - Implement additional actions in the EmployeeController to handle CRUD operations like update and delete. - Create corresponding Angular components and services to interact with these API endpoints.
Main Avatar
12/12/2023, 12:28:31 AM
Main Avatar
12/12/2023, 12:27:50 AM
7. CRUD API: - Implement additional actions in the EmployeeController to handle CRUD operations like update and delete. - Create corresponding Angular components and services to interact with these API endpoints.
Main Avatar
12/12/2023, 12:28:31 AM
Sure! Here's an example of how you can implement CRUD operations in the EmployeeController and create corresponding Angular components and services to interact with these API endpoints:

1. Implement additional actions in the EmployeeController to handle CRUD operations like update and delete:
csharp
[Route("api/[controller]")]
[ApiController]
public class EmployeeController : ControllerBase
{
    private readonly IEmployeeRepository _repository;

    public EmployeeController(IEmployeeRepository repository)
    {
        _repository = repository;
    }

    // GET: api/Employee
    [HttpGet]
    public async Task<ActionResult<IEnumerable<Employee>>> GetEmployees()
    {
        var employees = await _repository.GetEmployeesAsync();
        return Ok(employees);
    }

    // GET: api/Employee/{id}
    [HttpGet("{id}")]
    public async Task<ActionResult<Employee>> GetEmployee(int id)
    {
        var employee = await _repository.GetEmployeeByIdAsync(id);

        if (employee == null)
        {
            return NotFound();
        }

        return Ok(employee);
    }

    // POST: api/Employee
    [HttpPost]
    public async Task<ActionResult<Employee>> CreateEmployee(Employee employee)
    {
        await _repository.CreateEmployeeAsync(employee);
        return CreatedAtAction(nameof(GetEmployee), new { id = employee.Id }, employee);
    }

    // PUT: api/Employee/{id}
    [HttpPut("{id}")]
    public async Task<IActionResult> UpdateEmployee(int id, Employee employee)
    {
        if (id != employee.Id)
        {
            return BadRequest();
        }

        await _repository.UpdateEmployeeAsync(employee);

        return NoContent();
    }

    // DELETE: api/Employee/{id}
    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteEmployee(int id)
    {
        var employee = await _repository.GetEmployeeByIdAsync(id);

        if (employee == null)
        {
            return NotFound();
        }

        await _repository.DeleteEmployeeAsync(employee);

        return NoContent();
    }
}
2. Create an Angular service to interact with the Employee API endpoints:
typescript
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {
  private apiUrl = 'api/employee';

  constructor(private http: HttpClient) { }

  getEmployees(): Observable<Employee[]> {
    return this.http.get<Employee[]>(this.apiUrl);
  }

  getEmployee(id: number): Observable<Employee> {
    return this.http.get<Employee>(`${this.apiUrl}/${id}`);
  }

  createEmployee(employee: Employee): Observable<Employee> {
    return this.http.post<Employee>(this.apiUrl, employee);
  }

  updateEmployee(id: number, employee: Employee): Observable<any> {
    return this.http.put<any>(`${this.apiUrl}/${id}`, employee);
  }

  deleteEmployee(id: number): Observable<any> {
    return this.http.delete<any>(`${this.apiUrl}/${id}`);
  }
}
3. Create an Angular component to display and manage employees:
typescript
import { Component, OnInit } from '@angular/core';
import { Employee } from '../employee';
import { EmployeeService } from '../employee.service';

@Component({
  selector: 'app-employee-list',
  templateUrl: './employee-list.component.html',
  styleUrls: ['./employee-list.component.css']
})
export class EmployeeListComponent implements OnInit {
  employees: Employee[];

  constructor(private employeeService: EmployeeService) { }

  ngOnInit(): void {
    this.getEmployees();
  }

  getEmployees(): void {
    this.employeeService.getEmployees()
      .subscribe(employees => this.employees = employees);
  }

  deleteEmployee(id: number): void {
    this.employeeService.deleteEmployee(id)
      .subscribe(() => {
        this.employees = this.employees.filter(employee => employee.id !== id);
      });
  }
}
4. Create an Angular component to create a new employee:
typescript
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { Employee } from '../employee';
import { EmployeeService } from '../employee.service';

@Component({
  selector: 'app-employee-create',
  templateUrl: './employee-create.component.html',
  styleUrls: ['./employee-create.component.css']
})
export class EmployeeCreateComponent implements OnInit {
  employee: Employee = {
    name: '',
    age: 0,
    role: ''
  };

  constructor(
    private employeeService: EmployeeService,
    private router: Router
  ) { }

  ngOnInit(): void {
  }

  createEmployee(): void {
    this.employeeService.createEmployee(this.employee)
      .subscribe(() => {
        this.router.navigate(['/employees']);
      });
  }
}
5. Update the Angular routing configuration to include the new components:
typescript
import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { EmployeeListComponent } from './employee-list/employee-list.component';
import { EmployeeCreateComponent } from './employee-create/employee-create.component';

const routes: Routes = [
  { path: 'employees', component: EmployeeListComponent },
  { path: 'employees/create', component: EmployeeCreateComponent }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }



1. Create an Angular component to display all employee details:
typescript
import { Component, OnInit } from '@angular/core';
import { Employee } from '../employee';
import { EmployeeService } from '../employee.service';

@Component({
  selector: 'app-employee-list',
  templateUrl: './employee-list.component.html',
  styleUrls: ['./employee-list.component.css']
})
export class EmployeeListComponent implements OnInit {
  employees: Employee[];

  constructor(private employeeService: EmployeeService) { }

  ngOnInit(): void {
    this.getEmployees();
  }

  getEmployees(): void {
    this.employeeService.getEmployees()
      .subscribe(employees => this.employees = employees);
  }
}

2. Implement an HTTP GET request in the EmployeeService to fetch all employee details:
typescript
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Employee } from './employee';

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {
  private apiUrl = 'api/employee';

  constructor(private http: HttpClient) { }

  getEmployees(): Observable<Employee[]> {
    return this.http.get<Employee[]>(this.apiUrl);
  }
}

3. Create a separate component for adding employee details:
typescript
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { Employee } from '../employee';
import { EmployeeService } from '../employee.service';

@Component({
  selector: 'app-employee-add',
  templateUrl: './employee-add.component.html',
  styleUrls: ['./employee-add.component.css']
})
export class EmployeeAddComponent implements OnInit {
  employee: Employee = {
    id: null,
    name: '',
    age: null,
    role: ''
  };

  constructor(
    private employeeService: EmployeeService,
    private router: Router
  ) { }

  ngOnInit(): void {
  }

  addEmployee(): void {
    this.employeeService.addEmployee(this.employee)
      .subscribe(() => {
        this.router.navigate(['/employees']);
      });
  }
}

4. Implement an HTTP POST request in the EmployeeService to add employee details:
typescript
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Employee } from './employee';

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {
  private apiUrl = 'api/employee';

  constructor(private http: HttpClient) { }

  getEmployees(): Observable<Employee[]> {
    return this.http.get<Employee[]>(this.apiUrl);
  }

  addEmployee(employee: Employee): Observable<Employee> {
    return this.http.post<Employee>(this.apiUrl, employee);
  }
}

5. Create a separate component for updating employee details:
typescript
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Employee } from '../employee';
import { EmployeeService } from '../employee.service';

@Component({
  selector: 'app-employee-update',
  templateUrl: './employee-update.component.html',
  styleUrls: ['./employee-update.component.css']
})
export class EmployeeUpdateComponent implements OnInit {
  employee: Employee;

  constructor(
    private route: ActivatedRoute,
    private employeeService: EmployeeService,
    private router: Router
  ) { }

  ngOnInit(): void {
    this.getEmployee();
  }

  getEmployee(): void {
    const id = +this.route.snapshot.paramMap.get('id');
    this.employeeService.getEmployee(id)
      .subscribe(employee => this.employee = employee);
  }

  updateEmployee(): void {
    this.employeeService.updateEmployee(this.employee)
      .subscribe(() => {
        this.router.navigate(['/employees']);
      });
  }
}

6. Implement an HTTP PUT request in the EmployeeService to update employee details:
typescript
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Employee } from './employee';

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {
  private apiUrl = 'api/employee';

  constructor(private http: HttpClient) { }

  getEmployees(): Observable<Employee[]> {
    return this.http.get<Employee[]>(this.apiUrl);
  }

  addEmployee(employee: Employee): Observable<Employee> {
    return this.http.post<Employee>(this.apiUrl, employee);
  }

  getEmployee(id: number): Observable<Employee> {
    return this.http.get<Employee>(`${this.apiUrl}/${id}`);
  }

  updateEmployee(employee: Employee): Observable<any> {
    return this.http.put<any>(`${this.apiUrl}/${employee.id}`, employee);
  }
}

7. Create a separate component for deleting employee details:
typescript
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Employee } from '../employee';
import { EmployeeService } from '../employee.service';

@Component({
  selector: 'app-employee-delete',
  templateUrl: './employee-delete.component.html',
  styleUrls: ['./employee-delete.component.css']
})
export class EmployeeDeleteComponent implements OnInit {
  employee: Employee;

  constructor(
    private route: ActivatedRoute,
    private employeeService: EmployeeService,
    private router: Router
  ) { }

  ngOnInit(): void {
    this.getEmployee();
  }

  getEmployee(): void {
    const id = +this.route.snapshot.paramMap.get('id');
    this.employeeService.getEmployee(id)
      .subscribe(employee => this.employee = employee);
  }

  deleteEmployee(): void {
    this.employeeService.deleteEmployee(this.employee.id)
      .subscribe(() => {
        this.router.navigate(['/employees']);
      });
  }
}

8. Implement an HTTP DELETE request in the EmployeeService to delete employee details:
typescript
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Employee } from './employee';

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {
  private apiUrl = 'api/employee';

  constructor(private http: HttpClient) { }

  getEmployees(): Observable<Employee[]> {
    return this.http.get<Employee[]>(this.apiUrl);
  }

  addEmployee(employee: Employee): Observable<Employee> {
    return this.http.post<Employee>(this.apiUrl, employee);
  }

  getEmployee(id: number): Observable<Employee> {
    return this.http.get<Employee>(`${this.apiUrl}/${id}`);
  }

  updateEmployee(employee: Employee): Observable<any> {
    return this.http.put<any>(`${this.apiUrl}/${employee.id}`, employee);
  }

  deleteEmployee(id: number): Observable<any> {
    return this.http.delete<any>(`${this.apiUrl}/${id}`);
  }
}
