using AI.Models;
using AI.Services.User;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Prompt.Infrastructure;
using System;
using System.Collections.Generic;
using System.Text;
using Vega;
using static AI.Models.Enums;

namespace AI.Services.CompanyMastertbl
{

    public class CompanyMastertbl : CommonService, ICompanyMastertbl
    {
        ApiResponse apiResponse;
        public Repository<CompanyMastertblModel> _repocompanymastertbl { get; set; }
        public Repository<CompanyUserModel> _repocompanyuser {  get; set; }
        public CompanyMastertbl(IHttpContextAccessor httpContext, ICurrentUser currentUser) : base(httpContext, currentUser)
        {
        }
        public ApiResponse Add(CompanyMastertblModel companyMastertblModel)
        {
            ApiResponse response = default(ApiResponse);
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repocompanymastertbl = new Repository<CompanyMastertblModel>(connection);
                CompanyMastertblModel companyMastertbl1 = _repocompanymastertbl.ReadOne(companyMastertblModel.CompanyId);
                if (_repocompanymastertbl.Exists(criteria: "CompanyId=@CompanyId", parameters: new { CompanyId = companyMastertblModel.CompanyId }))
                {
                    response = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status409Conflict,
                        Message = "already exist",
                        Data = false
                    };
                }
                else
                {
                   _repocompanymastertbl.BeginTransaction();
                _repocompanyuser = new Repository<CompanyUserModel>(_repocompanymastertbl.Transaction);
                CompanyUserModel data = companyMastertblModel.GetMapped<CompanyUserModel,CompanyMastertblModel>();
              
                    try
                    {
                        _repocompanymastertbl.Add(companyMastertblModel);

                       
                        data.CompanyId = companyMastertblModel.CompanyId;

                        data.userName = $"admin_{companyMastertblModel.CompanyName.Replace(" ", "")}";
                        data.Password = "123456";
                        data.Role = 1;
                        data.CreatedBy = companyMastertblModel.CreatedBy;
                        data.UpdatedBy = companyMastertblModel.UpdatedBy;
                        data.CreatedOn = DateTime.Now;
                        data.UpdatedOn = DateTime.Now;
                        data.IsActive = true;

                        _repocompanyuser.Add(data);
                        _repocompanymastertbl.Commit();
                        apiResponse = new ApiResponse
                        {
                            StatusCode = StatusCodes.Status200OK,
                            Message = "data saved",
                            Data = true
                        };
                        

                    }
                    catch (Exception ex) {

                        _repocompanymastertbl.Rollback();
                        response = new ApiResponse
                        {
                            StatusCode = StatusCodes.Status400BadRequest,
                            Message ="error"
                        };
                    }
}
                
            }
            return apiResponse;
        }
        public ApiResponse Delete(long CompanyId)
        {
            ApiResponse response = default(ApiResponse);
            //CompanyMastertblModel result = new CompanyMastertblModel();
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repocompanymastertbl = new Repository<CompanyMastertblModel>(connection);
                List<CompanyUserModel> result = _repocompanymastertbl.Query<CompanyUserModel, CompanyMastertblModel>("select * from CompanyUser where CompanyId=@id", new Parameter("id", System.Data.DbType.Int64, CompanyId));

                if (result.Count == 0)
                {
                    _repocompanymastertbl.Delete(CompanyId, _currentUser?.Info?.Id);
                    apiResponse = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status200OK,
                        Message = "Company deleted successfully",
                        Data = true
                    };
                }
                else
                {
                    apiResponse = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status204NoContent,
                        Message = "Company Not deleted",
                        Data = false
                    };
                }
            }   
            return response;
            
        }

        public ApiResponse GetAll()
        {
            throw new NotImplementedException();
        }

        public ApiResponse GetById(long id)
        {
            ApiResponse response = default(ApiResponse);
            //CompanyMastertblModel result = new CompanyMastertblModel();
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                List<CompanyUserModel> result = _repocompanymastertbl.Query<CompanyUserModel, CompanyMastertblModel>($@"select * from CompanyMastertbl", new Parameter("id", System.Data.DbType.Int64, id));
            }
            if (result != null)
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = "No Record Found",
                    Data = result
                };
            else
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status200OK,
                    Data = result
                };
            return response;
           
        }
            public ApiResponse Update(long id)
        {
            throw new NotImplementedException();
        }
    }
}
------------------------calvis---------------------
using AI.Models;
using AI.Models.CustomModel;
using AI.Services.PepIntegrationService;
using AI.Services.ReTagging;
using AI.Services.Tracing;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using OfficeOpenXml;
using OfficeOpenXml.FormulaParsing.Excel.Functions.DateTime;
using OfficeOpenXml.Style;
using Prompt.Infrastructure;
using Serilog;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Vega;
using System.Drawing;

namespace AI.Services
{
    public class Calving : CommonService, ICalving
    {
        public Repository<AICallModel> _repoAiCall { get; set; }
        public Repository<CalvingModel> _repoCalving { get; set; }
        public Repository<CattleMasterModel> _repoCattle { get; set; }
        public Repository<BullMasterModel> _repoBull { get; set; }
        public Repository<CalvingDueReportModelSP> _repoCalvingDueReportModel { get; set; }
        private Repository<DurationWiseComparisonReportModel> _repoComparisonReportModel { get; set; }

        public Repository<NaturalAiEntryModel> _repoNaturalAiEntry { get; set; }
        private readonly IGeneralMaster _generalMaster;
        private readonly string _columnsAdd;
        private readonly string _columnsUpdate;
        private readonly ICulture _culture;
        private readonly IHeaderAccessor _header;
        private readonly IPepIntegrationService _pep;
        private readonly IMongoService _mongoService;
        private readonly IReTagging _retagging;
        private readonly IHeaderAccessor HeaderAccessor;


        public Calving(IHttpContextAccessor httpContext, ICurrentUser currentUser,
            IHostingEnvironment env, ISmsService notifier, IGeneralMaster generalMaster,
            ICulture culture, IHeaderAccessor header, IPepIntegrationService pep, IMongoService mongoService, IReTagging retagging)
            : base(httpContext, currentUser, env, notifier)
        {
            _generalMaster = generalMaster;
            _culture = culture;
            _header = header;
            _pep = pep;
            _columnsAdd = "CalvingId,SocietyMasterId,FarmerMasterId,IsRegisteredFarmer,CattleTypeId,BreedMasterId," +
                "StageTypeId,LactationNos,AgeGroupTypeId,Gender,Status,DateOfBirth,Weight,TagNo,EntryMode,MilkingStatus,NDDBTypeId,IsSexedSemenCalf";
            _columnsUpdate = "Gender,Status,DateOfBirth,Weight,TagNo,NDDBTypeId,IsSexedSemenCalf";
            _mongoService = mongoService;
            _retagging = retagging;
            HeaderAccessor = header;
        }

        #region Constants
        private const string CalvingDueWorkerQuery = @"select ac.AICallId,ac.CallNumber,sm.SocietyCode,sm.SocietyName,isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,
		    case when isnull(isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj),'')<>'' and isnull(fm.FarmerCode,nfm.FarmerCode)=isnull(fm.FarmerNameEng,nfm.FarmerNameEng)
		    	then isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) else isnull(fm.FarmerNameEng,nfm.FarmerNameEng) end FarmerName,
            ac.TagCode,dateadd(day,(case ac.CattleTypeId when @cow then @cdays else @bdays end),cast(ac.CloseDate as date)) as DueDate,
            ac.CloseDate,ac.TotalAI,ac.ContactNo,bm.IsSexedSemen,isnull(x.IsSexedSemenCalf,'')IsSexedSemenCalf
            from (select iac.TagCode,max(iac.CloseDate)CloseDate,ict.IsSexedSemenCalf from PDEntry ipd with(nolock)
        	inner join AICall iac with(nolock) on iac.AICallId=ipd.AICallId and ipd.StatusTypeId=@pstatus and iac.IsActive=@act and iac.CallStatus=@cstatus 
			inner join CattleMaster ict with(nolock) on ict.TagNo=iac.TagCode and isnull(ict.[Status],@live)=@live
        	inner join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=iac.AIWorkerMasterId
        	inner join SystemUser su with(nolock) on su.RefId=aw.AIWorkerMasterId and su.UserType={0} and su.SystemUserId=@suid
        	group by iac.TagCode,iac.CattleTypeId,ict.IsSexedSemenCalf
        	having (case iac.CattleTypeId when @cow then @cdays else @bdays end){1}datediff(day,cast(max(iac.CloseDate) as date),cast(getdate() as date)))x
        inner join AICall ac with(nolock) on x.TagCode=ac.TagCode and x.CloseDate=ac.CloseDate and ac.IsActive=@act
        inner join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
        inner join PDEntry p with(nolock) on p.AICallId=ac.AICallId and p.StatusTypeId=@pstatus and p.IsActive=@act
        inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId
        left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
        left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
        left outer join Calving c with(nolock) on c.PDEntryId=p.PDEntryId
        --left outer join CattleMaster cm with(nolock) on cm.CattleMasterId = ac.CattleMasterId
         where c.CalvingId is null";

        private const string CalvingDueWorkerCountQuery = @"select count(1) from (select iac.TagCode,max(iac.CloseDate)CloseDate from PDEntry ipd with(nolock)
        	inner join AICall iac with(nolock) on iac.AICallId=ipd.AICallId and ipd.StatusTypeId=@pstatus and iac.IsActive=@act and iac.CallStatus=@cstatus 
			inner join CattleMaster ict with(nolock) on ict.TagNo=iac.TagCode and isnull(ict.[Status],@live)=@live
        	inner join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=iac.AIWorkerMasterId
        	inner join SystemUser su with(nolock) on su.RefId=aw.AIWorkerMasterId and su.UserType={0} and su.SystemUserId=@suid
 inner join BullMaster bm with(nolock) on bm.BullMasterId=iac.BullMasterId
        	group by iac.TagCode,iac.CattleTypeId 
        	having (case iac.CattleTypeId when @cow then @cdays else @bdays end){1}datediff(day,cast(max(iac.CloseDate) as date),cast(getdate() as date)))x
        inner join AICall ac with(nolock) on x.TagCode=ac.TagCode and x.CloseDate=ac.CloseDate and ac.IsActive=@act
  inner join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
        inner join PDEntry p with(nolock) on p.AICallId=ac.AICallId and p.StatusTypeId=@pstatus and p.IsActive=@act
		inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId
        left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
        left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
        left outer join Calving c with(nolock) on c.PDEntryId=p.PDEntryId
        where c.CalvingId is null";

        private const string CalvingDueEmployeeQuery = @"select ac.AICallId,ac.CallNumber,sm.SocietyCode,sm.SocietyName,isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,
		    case when isnull(isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj),'')<>'' and isnull(fm.FarmerCode,nfm.FarmerCode)=isnull(fm.FarmerNameEng,nfm.FarmerNameEng)
		    	then isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) else isnull(fm.FarmerNameEng,nfm.FarmerNameEng) end FarmerName,
            ac.TagCode,dateadd(day,(case ac.CattleTypeId when @cow then @cdays else @bdays end),cast(ac.CloseDate as date)) as DueDate,
            ac.CloseDate,ac.TotalAI,ac.ContactNo,bm.IsSexedSemen,isnull(x.IsSexedSemenCalf,'')IsSexedSemenCalf
        from (select iac.TagCode,max(iac.CloseDate)CloseDate,ict.IsSexedSemenCalf from PDEntry ipd with(nolock)
			inner join AICall iac with(nolock) on iac.AICallId=ipd.AICallId and iac.IsActive=@act and ipd.IsActive=@act and iac.CallStatus=@cstatus
            inner join CattleMaster ict with(nolock) on ict.TagNo=iac.TagCode and isnull(ict.[Status],@live)=@live
        	group by iac.TagCode,iac.CattleTypeId,ict.IsSexedSemenCalf
        	having (case iac.CattleTypeId when @cow then @cdays else @bdays end){0}datediff(day,cast(max(iac.CloseDate) as date),cast(getdate() as date)))x 
		inner join AICall ac with(nolock) on x.TagCode=ac.TagCode and x.CloseDate=ac.CloseDate and ac.IsActive=@act
        inner join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
        inner join PDEntry p with(nolock) on p.AICallId=ac.AICallId and p.StatusTypeId=@pstatus and p.IsActive=@act
        inner join SystemUser su with(nolock) on su.RefId=p.AIWorkerMasterId and su.UserType=@utyp
        inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId
        left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
        left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
        left outer join Calving c with(nolock) on c.PDEntryId=p.PDEntryId
        --left outer join CattleMaster cm with(nolock) on cm.CattleMasterId = ac.CattleMasterId
        where c.CalvingId is null";
        private const string CalvingDueEmployeeCountQuery = @"select count(1) from (select iac.TagCode,max(iac.CloseDate)CloseDate from PDEntry ipd with(nolock)
			inner join AICall iac with(nolock) on iac.AICallId=ipd.AICallId and iac.IsActive=@act and ipd.IsActive=@act and iac.CallStatus=@cstatus            
			inner join CattleMaster ict with(nolock) on ict.TagNo=iac.TagCode and isnull(ict.[Status],@live)=@live
        	group by iac.TagCode,iac.CattleTypeId
        	having (case iac.CattleTypeId when @cow then @cdays else @bdays end){0}datediff(day,cast(max(iac.CloseDate) as date),cast(getdate() as date)))x 
		inner join AICall ac with(nolock) on x.TagCode=ac.TagCode and x.CloseDate=ac.CloseDate and ac.IsActive=@act        
        inner join PDEntry p with(nolock) on p.AICallId=ac.AICallId and p.StatusTypeId=@pstatus and p.IsActive=@act
        inner join SystemUser su with(nolock) on su.RefId=p.AIWorkerMasterId and su.UserType=@utyp
		inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId
        left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
        left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
        left outer join Calving c with(nolock) on c.PDEntryId=p.PDEntryId        
        where c.CalvingId is null";

        private const string CalvingDueRestQuery = @"select ac.AICallId,ac.CallNumber,sm.SocietyCode,sm.SocietyName,isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,
		    case when isnull(isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj),'')<>'' and isnull(fm.FarmerCode,nfm.FarmerCode)=isnull(fm.FarmerNameEng,nfm.FarmerNameEng)
		    	then isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) else isnull(fm.FarmerNameEng,nfm.FarmerNameEng) end FarmerName,
            ac.TagCode,dateadd(day,(case ac.CattleTypeId when @cow then @cdays else @bdays end),cast(ac.CloseDate as date)) as DueDate,
            ac.CloseDate,ac.TotalAI,ac.ContactNo,bm.IsSexedSemen,isnull(x.IsSexedSemenCalf,'')IsSexedSemenCalf
        from AICall ac with(nolock)
        inner join (select iac.TagCode,max(iac.CloseDate)CloseDate,ict.IsSexedSemenCalf from EmployeeSocietyMapping esm with(nolock)
        	inner join EmployeeMaster em with(nolock) on em.EmployeeMasterId=esm.EmployeeMasterId
        	inner join SystemUser su with(nolock) on su.RefId=em.EmployeeMasterId and su.UserType={0} and su.SystemUserId=@suid
        	inner join AICall iac with(nolock) on iac.SocietyMasterId=esm.SocietyMasterId and iac.CallStatus=@cstatus and iac.IsActive=@act             
			inner join CattleMaster ict with(nolock) on ict.TagNo=iac.TagCode and isnull(ict.[Status],@live)=@live
        	inner join PDEntry ipd with(nolock) on ipd.AICallId=iac.AICallId and ipd.StatusTypeId=@pstatus
        	group by iac.TagCode,iac.CattleTypeId,ict.IsSexedSemenCalf
        	having (case iac.CattleTypeId when @cow then @cdays else @bdays end){1}datediff(day,cast(max(iac.CloseDate) as date),cast(getdate() as date)))x
        		on x.TagCode=ac.TagCode and x.CloseDate=ac.CloseDate and ac.IsActive=@act
        inner join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId        
        inner join PDEntry p with(nolock) on p.AICallId=ac.AICallId and p.StatusTypeId=@pstatus and p.IsActive=@act
        inner join SystemUser su with(nolock) on su.RefId=p.AIWorkerMasterId and su.UserType=@utyp and su.SystemUserId = case when @uid1 <> 0 then @uid1 else su.SystemUserId end
        left outer join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId
        left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
        left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
        left outer join Calving c with(nolock) on c.PDEntryId=p.PDEntryId
        --left outer join CattleMaster cm with(nolock) on cm.CattleMasterId = ac.CattleMasterId
        where c.CalvingId is null";
        private const string CalvingDueRestCountQuery = @"select count(1) from AICall ac with(nolock)
        inner join (select iac.TagCode,max(iac.CloseDate)CloseDate from EmployeeSocietyMapping esm with(nolock)
            inner join EmployeeMaster em with(nolock) on em.EmployeeMasterId=esm.EmployeeMasterId
            inner join SystemUser su with(nolock) on su.RefId=em.EmployeeMasterId and su.UserType={0} and su.SystemUserId=@suid
            inner join AICall iac with(nolock) on iac.SocietyMasterId=esm.SocietyMasterId and iac.CallStatus=@cstatus and iac.IsActive=@act            
            inner join CattleMaster ict with(nolock) on ict.TagNo=iac.TagCode and isnull(ict.[Status],@live)=@live
            inner join PDEntry ipd with(nolock) on ipd.AICallId=iac.AICallId and ipd.StatusTypeId=@pstatus
            group by iac.TagCode,iac.CattleTypeId
            having (case iac.CattleTypeId when @cow then @cdays else @bdays end){1}datediff(day,cast(max(iac.CloseDate) as date),cast(getdate() as date)))x
            	on x.TagCode=ac.TagCode and x.CloseDate=ac.CloseDate and ac.IsActive=@act
        inner join PDEntry p with(nolock) on p.AICallId=ac.AICallId and p.StatusTypeId=@pstatus and p.IsActive=@act
        inner join SystemUser su with(nolock) on su.RefId=p.AIWorkerMasterId and su.UserType=@utyp and su.SystemUserId = case when @uid1 <> 0 then @uid1 else su.SystemUserId end
		left outer join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId
        left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
        left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
        left outer join Calving c with(nolock) on c.PDEntryId=p.PDEntryId
        inner join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId 
        where c.CalvingId is null";

        private const string CalvingWorkerQuery = @"select c.CalvingId,ac.AICallId,ac.CallNumber,ac.TagCode,c.DueDate,sm.SocietyCode,sm.SocietyName,
            isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,
		    case when isnull(isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj),'')<>'' and isnull(fm.FarmerCode,nfm.FarmerCode)=isnull(fm.FarmerNameEng,nfm.FarmerNameEng)
		    	then isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) else isnull(fm.FarmerNameEng,nfm.FarmerNameEng) end FarmerName,
            ac.CloseDate,isnull(ac.TotalAI,0)TotalAI,ac.ContactNo,bm.IsSexedSemen,isnull(cm.IsSexedSemenCalf,'')IsSexedSemenCalf,
            isnull(c.Remarks,'')Remarks,isnull(lvcg.LookupValuesId,94)IsNaturalAI,isnull(lvc.LookupValuesId,94)IsOtherServiceProvider,isnull(nae.SPAIWorker,'')SPAIWorker
        from Calving c with(nolock)
        inner join PDEntry pd with(nolock) on pd.PDEntryId=c.PDEntryId and pd.IsActive=@act and c.IsActive=@act {1}
        inner join AICall ac with(nolock) on ac.AICallId=pd.AICallId and ac.IsActive=@act
        inner join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
        inner join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=c.AIWorkerMasterId
        inner join SystemUser su with(nolock) on su.RefId=aw.AIWorkerMasterId and UserType={0} and su.SystemUserId=@uid
        inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId
        left outer Join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
        left outer Join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
        left outer Join NaturalAiEntry nae with(nolock) on  nae.BreedingEntryID = c.CalvingId
		left outer join LookupValues lvcg with(nolock) on lvcg.LookupValuesId=nae.IsNaturalAI
		left outer join LookupValues lvc with(nolock) on lvc.LookupValuesId = nae.IsOtherServiceProvider
        left outer join CattleMaster cm with(nolock) on cm.CattleMasterId = ac.CattleMasterId
";
        private const string CalvingEmployeeQuery = @"select c.CalvingId,ac.AICallId,ac.CallNumber,ac.TagCode,c.DueDate,sm.SocietyCode,sm.SocietyName,
		    isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,
		    case when isnull(isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj),'')<>'' and isnull(fm.FarmerCode,nfm.FarmerCode)=isnull(fm.FarmerNameEng,nfm.FarmerNameEng)
		    	then isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) else isnull(fm.FarmerNameEng,nfm.FarmerNameEng) end FarmerName,
            ac.CloseDate,isnull(ac.TotalAI,0)TotalAI,ac.ContactNo,bm.IsSexedSemen,isnull(cm.IsSexedSemenCalf,'')IsSexedSemenCalf,
            isnull(c.Remarks,'')Remarks,isnull(lvcg.LookupValuesId,94)IsNaturalAI,isnull(lvc.LookupValuesId,94)IsOtherServiceProvider,isnull(nae.SPAIWorker,'')SPAIWorker
		from Calving c with(nolock)
        inner join SystemUser su with(nolock) on su.RefId=c.AIWorkerMasterId and su.UserType=@utyp and c.IsActive=@act
		inner join PDEntry pd with(nolock) on pd.PDEntryId=c.PDEntryId and pd.IsActive=@act {0}
		inner join AICall ac with(nolock) on ac.AICallId=pd.AICallId and ac.IsActive=@act
        inner join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
		left outer join SocietyMaster sm with(nolock) on sm.SocietyMasterId = ac.SocietyMasterId
		left outer Join FarmerMaster fm with(nolock) on fm.FarmerMasterId = ac.FarmerMasterId and ac.IsRegisteredFarmer = 1
		left outer Join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId = ac.FarmerMasterId and ac.IsRegisteredFarmer = 0
        left outer Join NaturalAiEntry nae with(nolock) on  nae.BreedingEntryID = c.CalvingId
		left outer join LookupValues lvcg with(nolock) on lvcg.LookupValuesId=nae.IsNaturalAI
		left outer join LookupValues lvc with(nolock) on lvc.LookupValuesId = nae.IsOtherServiceProvider
        left outer join CattleMaster cm with(nolock) on cm.CattleMasterId = ac.CattleMasterId
";
        private const string CalvingRestQuery = @"select c.CalvingId,ac.AICallId,ac.CallNumber,ac.TagCode,c.DueDate,sm.SocietyCode,sm.SocietyName,
		    isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,
		    case when isnull(isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj),'')<>'' and isnull(fm.FarmerCode,nfm.FarmerCode)=isnull(fm.FarmerNameEng,nfm.FarmerNameEng)
		    	then isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) else isnull(fm.FarmerNameEng,nfm.FarmerNameEng) end FarmerName,
            ac.CloseDate,isnull(ac.TotalAI,0)TotalAI,ac.ContactNo,bm.IsSexedSemen,isnull(cm.IsSexedSemenCalf,'')IsSexedSemenCalf,
        isnull(c.Remarks,'')Remarks,isnull(lvcg.LookupValuesId,94)IsNaturalAI,isnull(lvc.LookupValuesId,94)IsOtherServiceProvider,isnull(nae.SPAIWorker,'')SPAIWorker
        from EmployeeMaster em with(nolock)
        inner join SystemUser su with(nolock) on su.RefId=em.EmployeeMasterId and UserType={0} and su.SystemUserId=@uid
        inner join EmployeeSocietyMapping esm with(nolock) on esm.EmployeeMasterId=em.EmployeeMasterId
        inner join AICall ac with(nolock) on ac.SocietyMasterId=esm.SocietyMasterId and ac.IsActive=@act
        inner join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
        inner join PDEntry pd with(nolock) on pd.AICallId=ac.AICallId and pd.IsActive=@act
        inner join Calving c with(nolock) on c.PDEntryId=pd.PDEntryId and c.IsActive=@act {1}
        inner join SystemUser suaw with(nolock) on suaw.RefId=c.AIWorkerMasterId and suaw.UserType=@utyp and suaw.SystemUserId = case when @uid1 <> 0 then @uid1 else suaw.SystemUserId end
        left outer join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId
        left outer Join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
        left outer Join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
        left outer Join NaturalAiEntry nae with(nolock) on  nae.BreedingEntryID = c.CalvingId
		left outer join LookupValues lvcg with(nolock) on lvcg.LookupValuesId=nae.IsNaturalAI
		left outer join LookupValues lvc with(nolock) on lvc.LookupValuesId = nae.IsOtherServiceProvider
       left outer join CattleMaster cm with(nolock) on cm.CattleMasterId = ac.CattleMasterId
";

        private const string CalvingDoneByWorkerQuery = @"select distinct su.SystemUserId Code,case when isnull(aw.AIWorkerCode,em.SAPCode) is null then su.NameEng else concat(su.NameEng,' [',isnull(aw.AIWorkerCode,em.SAPCode),']') end [Name],'Active' [Group] 
		from SystemUser sua with(nolock)
        inner join Calving cl with(nolock) on cl.AIWorkerMasterId=sua.RefId and sua.SystemUserId=@uid and cl.IsActive=@act
        inner join SystemUser su with(nolock) on su.SystemUserId=cl.CreatedBy
		left outer join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=su.RefId and su.UserType=@aiworker
		left outer join EmployeeMaster em with(nolock) on em.EmployeeMasterId=su.RefId and su.UserType=@employee
        order by [Name]";
        private const string CalvingReportWorkerQuery = @"select sm.SocietyCode,sm.SocietyName as Society,concat(isnull(fm.FarmerCode,nfm.FarmerCode),' - ',isnull(fm.FarmerNameEng,nfm.FarmerNameEng))Farmer,
            ac.TagCode,isnull(lnn.LookupValue,'')NDDBType,lvct.LookupValue CattleType,lvag.LookupValue AgeGroup,bdm.[Name] BreedName,bm.BullNo,ac.Cycle,
           format(ac.CloseDate,'dd/MM/yyyy')CallDate,
           format(ac.CloseDate,'hh:mm tt')CallTime, 
            lvNoa.LookupValue NoOfAI,ac.ContactName,ac.ContactNo,
           format(p.DueDate,'dd/MM/yyyy')PdDueDate,
           format(p.DueDate,'hh:mm tt')PdDueTime,
           format(p.CheckedDate,'dd/MM/yyyy')PdCheckedDate,
           format(p.CheckedDate,'hh:mm tt')PdCheckedTime,
            p.PregnancyDays,lvStatus.LookupValue PdStatus,
           format(c.DueDate,'dd/MM/yyyy')DueDate,
           format(c.DueDate,'hh:mm tt')DueTime,
           format(c.DoneDate,'dd/MM/yyyy')DoneDate,
           format(c.DoneDate,'hh:mm tt')DoneTime,
            c.[Days],
STUFF(
             (SELECT '/' + case when isnull(ct.TagNo,'') = '' or ct.TagNo is null then 'NA' else ct.TagNo end
              FROM CattleMaster ct
		     where ct.CalvingId=c.CalvingId 
              FOR XML PATH (''))
             , 1, 1, '') as CalfTag,
			 STUFF(
             (SELECT '/' + lvcfg.LookupValue 
              FROM CattleMaster as ct
			left outer join  LookupValues lvcfg with(nolock) on lvcfg.LookupValuesId=ct.Gender
              where  ct.CalvingId=c.CalvingId 
              FOR XML PATH (''))
             , 1, 1, '') as CalfGender,
lvcs.LookupValue [Status],sud.NameEng,
			case when sud.IsActive=@act and isnull(sud.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end [DoneByStatus],

			bm.IsSexedSemen,isnull(ccc.IsSexedSemenCalf,'')IsSexedSemenCalf,
            isnull(lvreq.LookupValue,'Not Checked') CalvingRequestStatus,case when bm.IsSexedSemen=1 and ct.Gender = 2 then 1 else 0 end SexedSemenCalfcolor
        ,isnull(c.validateImage,'')validateImage,CAST('https://www.google.com/maps?q=' + c.Latitude + ',' + c.Longitude as xml)as ImageLatLong, CAST('https://www.google.com/maps?q=' + c.ValidateLatitude + ',' + c.ValidateLongitude as xml)as ValidateLatLong,isnull(sup.NameEng,'') as ValidatedBy,format(c.ValidatedOn,'dd/MM/yyyy') as ValidatedOn from Calving c with(nolock)
        inner join SystemUser su with(nolock) on su.RefId=c.AIWorkerMasterId and su.SystemUserId=@uid and c.IsActive=@act {6}
        inner join SystemUser sud with(nolock) on sud.SystemUserId=c.CreatedBy
        inner join PDEntry p with(nolock) on c.PDEntryId=p.PDEntryId and p.IsActive=@act
        inner join AICall ac with(nolock) on ac.AICallId=p.AICallId inner join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId and ac.IsActive=@act {0}         
        --left outer join CattleMaster cm with(nolock) on cm.CattleMasterId = ac.CattleMasterId
        inner join (
		   select tagcode,sum(AI) aicount from (
			   select tagcode, (case when LAG(ac2.CallDate,1,NULL) 
			   over(partition by ac2.TagCode order by ac2.TagCode,ac2.CallDate) is null then 1 
            				when datediff(day,LAG(ac2.CallDate,1,ac2.CallDate) over(partition by ac2.TagCode order by ac2.TagCode,ac2.CallDate),ac2.CallDate)<10 then 0 
            				else 1 end)AI from AICall ac2 
		   ) T group by tagcode) T1 on ac.TagCode = T1.TagCode {3}
            
        inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId {1}
        left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
        left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
        left outer join BreedMaster bdm with(nolock) on bdm.BreedMasterId=ac.BreedMasterId
        left outer join LookupValues lvNoa on lvNoa.LookupValuesId=ac.NoOfAI
        left outer join LookupValues lvStatus on lvStatus.LookupValuesId=p.StatusTypeId
        left outer join LookupValues lvct on lvct.LookupValuesId=ac.CattleTypeId
        left outer join LookupValues lvag on lvag.LookupValuesId=ac.AgeGroupTypeId
        left outer join LookupValues lvcs on lvcs.LookupValuesId=c.[Status]
        left outer join LookupValues lvsexsemen on lvsexsemen.LookupValuesId=bm.issexedsemen
		
        left outer join LookupValues lvreq with(nolock) on lvreq.LookupValuesId=c.CalvingRequestStatus
        left outer join CattleMaster ct with(nolock) on ct.CalvingId=c.CalvingId
        left outer join LookupValues lvcfg with(nolock) on lvcfg.LookupValuesId=ct.Gender
            left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
 left outer join CattleMaster ccc with(nolock) on ac.TagCode=ccc.TagNo
		  left outer join LookupValues lnn with(nolock) on lnn.LookupValuesId=ccc.NDDBTypeId
left outer join SystemUser sup with(nolock) on sup.SystemUserId=c.ValidatedBy and c.CalvingRequestStatus!=0  {2} {4} {5}
group by c.CalvingId,case WHEN c.CalvingImageId IS NOT NULL and c.CalvingImageId<>'' THEN c.CalvingImageId 
			else (case when c.CalvingTagImageId IS NOT NULL and c.CalvingTagImageId<>'' then c.CalvingTagImageId
			else (case when p.PDEntryImageId IS NOT NULL and p.PDEntryImageId<>'' THEN p.PDEntryImageId
			else (case when p.PDTagEntryImageId IS NOT NULL and p.PDTagEntryImageId<>'' THEN p.PDTagEntryImageId 
			else(case when ac.BullImageId IS NOT NULL and ac.BullImageId<>'' then ac.BullImageId
			else (case when ac.FarmerImageId IS NOT NULL and ac.FarmerImageId<>'' then ac.FarmerImageId 
			else (case when ac.TagImageId IS NOT NULL and ac.TagImageId<>'' then ac.TagImageId 
			else ('') end) end) end) end) end) end) end ,
			sm.SocietyCode,sm.SocietyName,concat(isnull(fm.FarmerCode,nfm.FarmerCode),' - ',isnull(fm.FarmerNameEng,nfm.FarmerNameEng)),
            ac.TagCode,isnull(lnn.LookupValue,''),
lvct.LookupValue,lvag.LookupValue,bdm.[Name],bm.BullNo,ac.Cycle,
         format(ac.CloseDate,'dd/MM/yyyy'),
         format(ac.CloseDate,'hh:mm tt'),
            lvNoa.LookupValue,ac.ContactName,ac.ContactNo,
         format(p.DueDate,'dd/MM/yyyy'),
         format(p.DueDate,'hh:mm tt'),
         format(p.CheckedDate,'dd/MM/yyyy'),
         format(p.CheckedDate,'hh:mm tt'),
            p.PregnancyDays,lvStatus.LookupValue,
         format(c.DueDate,'dd/MM/yyyy'),
         format(c.DueDate,'hh:mm tt'),
         format(c.DoneDate,'dd/MM/yyyy'),
         format(c.DoneDate,'hh:mm tt'),
            c.[Days],
			lvcs.LookupValue,sud.NameEng,
			case when sud.IsActive=@act and isnull(sud.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end,
  bm.IsSexedSemen,ccc.IsSexedSemenCalf,
isnull(lvreq.LookupValue,'Not Checked'),case when bm.IsSexedSemen=1 and ct.Gender = 2 then 1 else 0 end
        ,isnull(c.validateImage,''),c.Latitude, c.Longitude, c.ValidateLatitude, c.ValidateLongitude,isnull(sup.NameEng,'') ,format(c.ValidatedOn,'dd/MM/yyyy') ";
        private const string CalvingReportExportWorkerQuery = @"select sm.SocietyName Society,sm.SocietyCode SocietyCode,isnull(fm.FarmerNameEng,nfm.FarmerNameEng) Farmer,isnull(fm.FarmerCode,nfm.FarmerCode) FarmerCode,
            ac.TagCode,isnull(lnn.LookupValue,'')NDDBType,lvct.LookupValue CattleType,lvag.LookupValue AgeGroup,bdm.[Name] BreedName,bm.BullNo,ac.Cycle,
           format(ac.CloseDate,'dd/MM/yyyy')CallDate,
           format(ac.CloseDate,'hh:mm tt')CallTime,
            lvNoa.LookupValue NoOfAI,ac.ContactName,ac.ContactNo,
           format(p.DueDate,'dd/MM/yyyy')PdDueDate,
           format(p.DueDate,'hh:mm tt')PdDueTime,
           format(p.CheckedDate,'dd/MM/yyyy')PdCheckedDate,
           format(p.CheckedDate,'hh:mm tt')PdCheckedTime,
            p.PregnancyDays,lvStatus.LookupValue PdStatus,
           format(c.DueDate,'dd/MM/yyyy')DueDate,
           format(c.DueDate,'hh:mm tt')DueTime,
           format(c.DoneDate,'dd/MM/yyyy')DoneDate,
           format(c.DoneDate,'hh:mm tt')DoneTime,
            c.[Days],lvcs.LookupValue [Status],sud.NameEng,
			case when sud.IsActive=@act and isnull(sud.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end [DoneByStatus],
			STUFF((SELECT '/' + case when isnull(ct.TagNo,'') = '' or ct.TagNo is null then 'NA' else ct.TagNo end
              FROM CattleMaster ct where ct.CalvingId=c.CalvingId 
              FOR XML PATH ('')), 1, 1, '') as CalfTag,
			 STUFF((SELECT '/' + lvcfg.LookupValue 
              FROM CattleMaster as ct
			left outer join  LookupValues lvcfg with(nolock) on lvcfg.LookupValuesId=ct.Gender
              where  ct.CalvingId=c.CalvingId 
             FOR XML PATH ('')), 1, 1, '') as CalfGender,
			  STUFF((SELECT '' + isnull(ln.LookupValue,'')
              FROM CattleMaster as ct
			  left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
              where  ct.CalvingId=c.CalvingId 
              FOR XML PATH ('')), 1, 1, '') as CalfNDDBType,
                 STUFF((SELECT '/' + lvcfst.LookupValue
              FROM CattleMaster as ct
			left outer join LookupValues lvcfst with(nolock) on lvcfst.LookupValuesId=ct.[Status]
              where  ct.CalvingId=c.CalvingId 
              FOR XML PATH ('')), 1, 1, '') as CalfStatus,
			STRING_AGG(ct.[Weight],'/') Weight,
case bm.IsSexedSemen when 1 then 'Yes' else 'No' end SexedSemen,
            isnull(lvreq.LookupValue,'Not Checked') CalvingRequestStatus,T1.aicount AICount,
            aw.AIWorkerCode AIWorkerCodes,
		    su.NameEng AIWorkerNames
        ,isnull(c.validateImage,'')validateImage,CAST('https://www.google.com/maps?q=' + c.Latitude + ',' + c.Longitude as xml)as ImageLatLong, CAST('https://www.google.com/maps?q=' + c.ValidateLatitude + ',' + c.ValidateLongitude as xml)as ValidateLatLong, isnull(sup.NameEng,'')as ValidatedBy,format(c.ValidatedOn,'dd/MM/yyyy') as ValidatedOn
        ,isnull(lvcg.LookupValue,'No')IsNaturalAI,isnull(lvc.LookupValue,'No')IsOtherServiceProvider,isnull(nae.SPAIWorker,'')SPAIWorker,isnull(c.Remarks,'')Remarks
        from Calving c with(nolock)
        inner join SystemUser su with(nolock) on su.RefId=c.AIWorkerMasterId and su.SystemUserId=@uid and c.IsActive=@act {6}
        inner join SystemUser sud with(nolock) on sud.SystemUserId=c.CreatedBy
        inner join PDEntry p with(nolock) on c.PDEntryId=p.PDEntryId and p.IsActive=@act
        inner join AICall ac with(nolock) on ac.AICallId=p.AICallId and ac.IsActive=@act {0}
        inner join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=c.AIWorkerMasterId 
        inner join (
		   select tagcode,sum(AI) aicount from (
			   select tagcode, (case when LAG(ac2.CallDate,1,NULL) 
			   over(partition by ac2.TagCode order by ac2.TagCode,ac2.CallDate) is null then 1 
            				when datediff(day,LAG(ac2.CallDate,1,ac2.CallDate) over(partition by ac2.TagCode order by ac2.TagCode,ac2.CallDate),ac2.CallDate)<10 then 0 
            				else 1 end)AI from AICall ac2 
		   ) T group by tagcode) T1 on ac.TagCode = T1.TagCode {3}
        inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId {1}
        left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
        left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
        left outer join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
        left outer join BreedMaster bdm with(nolock) on bdm.BreedMasterId=ac.BreedMasterId
        left outer join LookupValues lvNoa on lvNoa.LookupValuesId=ac.NoOfAI
        left outer join LookupValues lvStatus on lvStatus.LookupValuesId=p.StatusTypeId
        left outer join LookupValues lvct on lvct.LookupValuesId=ac.CattleTypeId
        left outer join LookupValues lvag on lvag.LookupValuesId=ac.AgeGroupTypeId
        left outer join LookupValues lvcs on lvcs.LookupValuesId=c.[Status]
		left outer join CattleMaster ct with(nolock) on ct.CalvingId=c.CalvingId 
		left outer join LookupValues lvcfg with(nolock) on lvcfg.LookupValuesId=ct.Gender
		left outer join LookupValues lvcfst with(nolock) on lvcfst.LookupValuesId=ct.[Status]
			left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
        left outer join LookupValues lvreq with(nolock) on lvreq.LookupValuesId=c.CalvingRequestStatus
        left outer join CattleMaster ccc with(nolock) on ac.TagCode=ccc.TagNo
		 left outer join LookupValues lnn with(nolock) on lnn.LookupValuesId=ccc.NDDBTypeId
       
        left outer join NaturalAiEntry nae with(nolock) on nae.BreedingEntryID = c.CalvingId
		left outer join LookupValues lvcg with(nolock) on lvcg.LookupValuesId = nae.IsNaturalAI
		left outer join LookupValues lvc with(nolock) on lvc.LookupValuesId = nae.IsOtherServiceProvider
 left outer join SystemUser sup with(nolock) on sup.SystemUserId=c.ValidatedBy and c.CalvingRequestStatus!=0 {2} {4} {5}
group by  c.CalvingId,sm.SocietyName,sm.SocietyCode,isnull(fm.FarmerNameEng,nfm.FarmerNameEng),isnull(fm.FarmerCode,nfm.FarmerCode),
            ac.TagCode,isnull(lnn.LookupValue,''),lvct.LookupValue,lvag.LookupValue,bdm.[Name],bm.BullNo,ac.Cycle,
           format(ac.CloseDate,'dd/MM/yyyy'),
           format(ac.CloseDate,'hh:mm tt'),
            lvNoa.LookupValue,ac.ContactName,ac.ContactNo,
           format(p.DueDate,'dd/MM/yyyy'),
           format(p.DueDate,'hh:mm tt'),
           format(p.CheckedDate,'dd/MM/yyyy'),
           format(p.CheckedDate,'hh:mm tt'),
            p.PregnancyDays,lvStatus.LookupValue,
           format(c.DueDate,'dd/MM/yyyy'),
           format(c.DueDate,'hh:mm tt'),
           format(c.DoneDate,'dd/MM/yyyy'),
           format(c.DoneDate,'hh:mm tt'),
            c.[Days],lvcs.LookupValue,sud.NameEng,isnull(sup.NameEng,''),su.NameEng,
			case when sud.IsActive=@act and isnull(sud.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end,
			case bm.IsSexedSemen when 1 then 'Yes' else 'No' end,
            isnull(lvreq.LookupValue,'Not Checked'),T1.aicount,
            aw.AIWorkerCode,t1.aicount,
        isnull(c.validateImage,''),c.Latitude,c.Longitude,c.ValidateLatitude,c.ValidateLongitude,format(c.ValidatedOn,'dd/MM/yyyy'),
        isnull(lvcg.LookupValue,'No'),isnull(lvc.LookupValue,'No'),isnull(nae.SPAIWorker,''),isnull(c.Remarks,'')";

        private const string CalvingDoneByEmployeeQuery = @"select distinct su.SystemUserId Code,case when isnull(aw.AIWorkerCode,em.SAPCode) is null then su.NameEng else concat(su.NameEng,' [',isnull(aw.AIWorkerCode,em.SAPCode),']') end [Name],
			case when (isnull(aw.AIWorkerMasterId,em.EmployeeMasterId) is null or isnull(aw.IsActive,em.IsActive)=@act)
				and su.IsActive=@act and isnull(su.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end [Group]
		from Calving cl with(nolock)
        inner join SystemUser su with(nolock) on su.SystemUserId=cl.CreatedBy and cl.IsActive=@act 
        left join AIWorkerSocietyMapping aws with(nolock) on cl.AIWorkerMasterId = aws.AIWorkerMasterId
		inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId = aws.SocietyMasterId
            {0}
		left outer join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=su.RefId and su.UserType=@aiworker
		left outer join EmployeeMaster em with(nolock) on em.EmployeeMasterId=su.RefId and su.UserType=@employee
        order by [Name]";
        private const string CalvingReportEmployeeQuery = @"select c.CalvingId,case WHEN c.CalvingImageId IS NOT NULL and c.CalvingImageId<>'' THEN c.CalvingImageId 
			else (case when c.CalvingTagImageId IS NOT NULL and c.CalvingTagImageId<>'' then c.CalvingTagImageId
			else (case when p.PDEntryImageId IS NOT NULL and p.PDEntryImageId<>'' THEN p.PDEntryImageId
			else (case when p.PDTagEntryImageId IS NOT NULL and p.PDTagEntryImageId<>'' THEN p.PDTagEntryImageId 
			else(case when ac.BullImageId IS NOT NULL and ac.BullImageId<>'' then ac.BullImageId
			else (case when ac.FarmerImageId IS NOT NULL and ac.FarmerImageId<>'' then ac.FarmerImageId 
			else (case when ac.TagImageId IS NOT NULL and ac.TagImageId<>'' then ac.TagImageId 
			else ('') end) end) end) end) end) end) end as ImageId,
			sm.SocietyCode,sm.SocietyName as Society,concat(isnull(fm.FarmerCode,nfm.FarmerCode),' - ',isnull(fm.FarmerNameEng,nfm.FarmerNameEng))Farmer,
            ac.TagCode,isnull(lnn.LookupValue,'')NDDBType,lvct.LookupValue CattleType,lvag.LookupValue AgeGroup,bdm.[Name] BreedName,bm.BullNo,ac.Cycle,
         format(ac.CloseDate,'dd/MM/yyyy')CallDate,
         format(ac.CloseDate,'hh:mm tt')CallTime,
            lvNoa.LookupValue NoOfAI,ac.ContactName,ac.ContactNo,
         format(p.DueDate,'dd/MM/yyyy')PdDueDate,
         format(p.DueDate,'hh:mm tt')PdDueTime,
         format(p.CheckedDate,'dd/MM/yyyy')PdCheckedDate,
         format(p.CheckedDate,'hh:mm tt')PdCheckedTime,
            p.PregnancyDays,lvStatus.LookupValue PdStatus,
         format(c.DueDate,'dd/MM/yyyy')DueDate,
         format(c.DueDate,'hh:mm tt')DueTime,
         format(c.DoneDate,'dd/MM/yyyy')DoneDate,
         format(c.DoneDate,'hh:mm tt')DoneTime,
            c.[Days],
	 STUFF(
             (SELECT '/' + case when isnull(ct.TagNo,'') = '' or ct.TagNo is null then 'NA' else ct.TagNo end
              FROM CattleMaster ct
		     where ct.CalvingId=c.CalvingId 
              FOR XML PATH (''))
             , 1, 1, '') as CalfTag,
			 STUFF(
             (SELECT '/' + lvcfg.LookupValue 
              FROM CattleMaster as ct
			left outer join  LookupValues lvcfg with(nolock) on lvcfg.LookupValuesId=ct.Gender
              where  ct.CalvingId=c.CalvingId 
              FOR XML PATH (''))
             , 1, 1, '') as CalfGender,
            lvcs.LookupValue [Status],sud.NameEng,
			case when sud.IsActive=@act and isnull(sud.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end [DoneByStatus],

			bm.IsSexedSemen,isnull(ccc.IsSexedSemenCalf,'')IsSexedSemenCalf,
            isnull(lvreq.LookupValue,'Not Checked') CalvingRequestStatus,case when bm.IsSexedSemen=1 and ct.Gender = 2 then 1 else 0 end SexedSemenCalfcolor
        ,isnull(c.validateImage,'')validateImage,CAST('https://www.google.com/maps?q=' + c.Latitude + ',' + c.Longitude as xml)as ImageLatLong, CAST('https://www.google.com/maps?q=' + c.ValidateLatitude + ',' + c.ValidateLongitude as xml)as ValidateLatLong,isnull(sup.NameEng,'') as ValidatedBy,format(c.ValidatedOn,'dd/MM/yyyy') as ValidatedOn from Calving c with(nolock)
        inner join SystemUser suaw with(nolock) on suaw.RefId=c.AIWorkerMasterId and suaw.UserType=@utyp and c.IsActive=@act {6}
        inner join SystemUser sud with(nolock) on sud.SystemUserId=c.CreatedBy
        inner join PDEntry p with(nolock) on c.PDEntryId=p.PDEntryId and p.IsActive=@act
        inner join AICall ac with(nolock) on ac.AICallId=p.AICallId inner join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId and ac.IsActive=@act {0}
        --left outer join CattleMaster cm with(nolock) on cm.CattleMasterId = ac.CattleMasterId
        inner join (select tagcode,sum(AI) aicount 
			from (select tagcode, (case when LAG(ac2.CallDate,1,NULL) over(partition by ac2.TagCode order by ac2.TagCode,ac2.CallDate) is null then 1 
					when datediff(day,LAG(ac2.CallDate,1,ac2.CallDate) over(partition by ac2.TagCode order by ac2.TagCode,ac2.CallDate),ac2.CallDate)<10 then 0 else 1 end)AI 
				from AICall ac2 )T
			group by tagcode)T1 on ac.TagCode = T1.TagCode {3}
        inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId {1}
        inner join SystemUser su with(nolock) on su.SystemUserId=c.CreatedBy
        left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
        left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0        
        left outer join BreedMaster bdm with(nolock) on bdm.BreedMasterId=ac.BreedMasterId
        left outer join LookupValues lvNoa on lvNoa.LookupValuesId=ac.NoOfAI
        left outer join LookupValues lvStatus on lvStatus.LookupValuesId=p.StatusTypeId
        left outer join LookupValues lvct on lvct.LookupValuesId=ac.CattleTypeId
        left outer join LookupValues lvag on lvag.LookupValuesId=ac.AgeGroupTypeId
        left outer join LookupValues lvcs on lvcs.LookupValuesId=c.[Status]
        left outer join LookupValues lvsexsemen on lvsexsemen.LookupValuesId=bm.issexedsemen
        left outer join LookupValues lvreq with(nolock) on lvreq.LookupValuesId=c.CalvingRequestStatus
        left outer join CattleMaster ct with(nolock) on ct.CalvingId=c.CalvingId 
 left outer join LookupValues lvcfg with(nolock) on lvcfg.LookupValuesId=ct.Gender
        left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
 left outer join CattleMaster ccc with(nolock) on ac.TagCode=ccc.TagNo
		  left outer join LookupValues lnn with(nolock) on lnn.LookupValuesId=ccc.NDDBTypeId
        left outer join SystemUser sup with(nolock) on sup.SystemUserId=c.ValidatedBy and c.CalvingRequestStatus!=0 {2} {4} {5}
group by c.CalvingId,case WHEN c.CalvingImageId IS NOT NULL and c.CalvingImageId<>'' THEN c.CalvingImageId 
			else (case when c.CalvingTagImageId IS NOT NULL and c.CalvingTagImageId<>'' then c.CalvingTagImageId
			else (case when p.PDEntryImageId IS NOT NULL and p.PDEntryImageId<>'' THEN p.PDEntryImageId
			else (case when p.PDTagEntryImageId IS NOT NULL and p.PDTagEntryImageId<>'' THEN p.PDTagEntryImageId 
			else(case when ac.BullImageId IS NOT NULL and ac.BullImageId<>'' then ac.BullImageId
			else (case when ac.FarmerImageId IS NOT NULL and ac.FarmerImageId<>'' then ac.FarmerImageId 
			else (case when ac.TagImageId IS NOT NULL and ac.TagImageId<>'' then ac.TagImageId 
			else ('') end) end) end) end) end) end) end ,
			sm.SocietyCode,sm.SocietyName,concat(isnull(fm.FarmerCode,nfm.FarmerCode),' - ',isnull(fm.FarmerNameEng,nfm.FarmerNameEng)),
            ac.TagCode,isnull(lnn.LookupValue,''),lvct.LookupValue,lvag.LookupValue,bdm.[Name],bm.BullNo,ac.Cycle,
         format(ac.CloseDate,'dd/MM/yyyy'),
         format(ac.CloseDate,'hh:mm tt'),
            lvNoa.LookupValue,ac.ContactName,ac.ContactNo,
         format(p.DueDate,'dd/MM/yyyy'),
         format(p.DueDate,'hh:mm tt'),
         format(p.CheckedDate,'dd/MM/yyyy'),
         format(p.CheckedDate,'hh:mm tt'),
            p.PregnancyDays,lvStatus.LookupValue,
         format(c.DueDate,'dd/MM/yyyy'),
         format(c.DueDate,'hh:mm tt'),
         format(c.DoneDate,'dd/MM/yyyy'),
         format(c.DoneDate,'hh:mm tt'),
            c.[Days],
			lvcs.LookupValue,sud.NameEng,
			case when sud.IsActive=@act and isnull(sud.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end,
  bm.IsSexedSemen,ccc.IsSexedSemenCalf,
isnull(lvreq.LookupValue,'Not Checked'),case when bm.IsSexedSemen=1 and ct.Gender = 2 then 1 else 0 end
        ,isnull(c.validateImage,''),c.Latitude, c.Longitude, c.ValidateLatitude, c.ValidateLongitude,isnull(sup.NameEng,'') ,format(c.ValidatedOn,'dd/MM/yyyy') ";

        private const string CalvingReportExportEmployeeQuery = @"select c.CalvingId, sm.SocietyName Society,sm.SocietyCode SocietyCode,isnull(fm.FarmerNameEng,nfm.FarmerNameEng) Farmer,isnull(fm.FarmerCode,nfm.FarmerCode) FarmerCode,
            ac.TagCode,isnull(lnn.LookupValue,'')NDDBType,lvct.LookupValue CattleType,lvag.LookupValue AgeGroup,bdm.[Name] BreedName,bm.BullNo,ac.Cycle,
             format(ac.CloseDate,'dd/MM/yyyy')CallDate,
             format(ac.CloseDate,'hh:mm tt')CallTime,
             lvNoa.LookupValue NoOfAI,ac.ContactName,ac.ContactNo,
             format(p.DueDate,'dd/MM/yyyy')PdDueDate,
             format(p.DueDate,'hh:mm tt')PdDueTime,
             format(p.CheckedDate,'dd/MM/yyyy')PdCheckedDate,
             format(p.CheckedDate,'hh:mm tt')PdCheckedTime,
             p.PregnancyDays,lvStatus.LookupValue PdStatus,
             format(c.DueDate,'dd/MM/yyyy')DueDate,
             format(c.DueDate,'hh:mm tt')DueTime,
             format(c.DoneDate,'dd/MM/yyyy')DoneDate,
             format(c.DoneDate,'hh:mm tt')DoneTime,
            c.[Days],lvcs.LookupValue [Status],sud.NameEng,
			case when sud.IsActive=@act and isnull(sud.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end [DoneByStatus],
		STUFF((SELECT '/' + case when isnull(ct.TagNo,'') = '' or ct.TagNo is null then 'NA' else ct.TagNo end
              FROM CattleMaster ct where ct.CalvingId=c.CalvingId 
              FOR XML PATH ('')), 1, 1, '') as CalfTag,
			 STUFF((SELECT '/' + lvcfg.LookupValue 
              FROM CattleMaster as ct
			left outer join  LookupValues lvcfg with(nolock) on lvcfg.LookupValuesId=ct.Gender
              where  ct.CalvingId=c.CalvingId 
             FOR XML PATH ('')), 1, 1, '') as CalfGender,
			  STUFF((SELECT '' + isnull(ln.LookupValue,'')
              FROM CattleMaster as ct
			  left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
              where  ct.CalvingId=c.CalvingId 
              FOR XML PATH ('')), 1, 1, '') as CalfNDDBType,
                 STUFF((SELECT '/' + lvcfst.LookupValue
              FROM CattleMaster as ct
			left outer join LookupValues lvcfst with(nolock) on lvcfst.LookupValuesId=ct.[Status]
              where  ct.CalvingId=c.CalvingId 
              FOR XML PATH ('')), 1, 1, '') as CalfStatus,
			STRING_AGG(ct.[Weight],'/') [Weight],
case bm.IsSexedSemen when 1 then 'Yes' else 'No' end SexedSemen,
            isnull(lvreq.LookupValue,'Not Checked') CalvingRequestStatus,T1.aicount AICount,
            aw.AIWorkerCode AIWorkerCodes,
		    suaw.NameEng AIWorkerNames
        ,isnull(c.validateImage,'')validateImage,CAST('https://www.google.com/maps?q=' + c.Latitude + ',' + c.Longitude as xml)as ImageLatLong, CAST('https://www.google.com/maps?q=' + c.ValidateLatitude + ',' + c.ValidateLongitude as xml)as ValidateLatLong, isnull(sup.NameEng,'') as ValidatedBy,format(c.ValidatedOn,'dd/MM/yyyy') as ValidatedOn
        ,isnull(lvcg.LookupValue,'No')IsNaturalAI,isnull(lvc.LookupValue,'No')IsOtherServiceProvider,isnull(nae.SPAIWorker,'')SPAIWorker,isnull(c.Remarks,'')Remarks
        from Calving c with(nolock)
        inner join SystemUser suaw with(nolock) on suaw.RefId=c.AIWorkerMasterId and suaw.UserType=@utyp and c.IsActive=@act {6}
        inner join SystemUser sud with(nolock) on sud.SystemUserId=c.CreatedBy
        inner join PDEntry p with(nolock) on c.PDEntryId=p.PDEntryId and p.IsActive=@act
        inner join AICall ac with(nolock) on ac.AICallId=p.AICallId and ac.IsActive=@act {0}
        inner join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=c.AIWorkerMasterId
        inner join (select tagcode,sum(AI) aicount 
			from (select tagcode, (case when LAG(ac2.CallDate,1,NULL) over(partition by ac2.TagCode order by ac2.TagCode,ac2.CallDate) is null then 1 
					when datediff(day,LAG(ac2.CallDate,1,ac2.CallDate) over(partition by ac2.TagCode order by ac2.TagCode,ac2.CallDate),ac2.CallDate)<10 then 0 else 1 end)AI 
				from AICall ac2)T
			group by tagcode)T1 on ac.TagCode = T1.TagCode {3}
        inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId {1}
        inner join SystemUser su with(nolock) on su.SystemUserId=c.CreatedBy
        left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
        left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
        left outer join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
        left outer join BreedMaster bdm with(nolock) on bdm.BreedMasterId=ac.BreedMasterId
        left outer join LookupValues lvNoa on lvNoa.LookupValuesId=ac.NoOfAI
        left outer join LookupValues lvStatus on lvStatus.LookupValuesId=p.StatusTypeId
        left outer join LookupValues lvct on lvct.LookupValuesId=ac.CattleTypeId
        left outer join LookupValues lvag on lvag.LookupValuesId=ac.AgeGroupTypeId
        left outer join LookupValues lvcs on lvcs.LookupValuesId=c.[Status]
		left outer join CattleMaster ct with(nolock) on ct.CalvingId=c.CalvingId 
		left outer join LookupValues lvcfg with(nolock) on lvcfg.LookupValuesId=ct.Gender
		left outer join LookupValues lvcfst with(nolock) on lvcfst.LookupValuesId=ct.[Status]
	    left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
        left outer join LookupValues lvreq with(nolock) on lvreq.LookupValuesId=c.CalvingRequestStatus
        left outer join CattleMaster ccc with(nolock) on ac.TagCode=ccc.TagNo
		left outer join LookupValues lnn with(nolock) on lnn.LookupValuesId=ccc.NDDBTypeId
       left outer join NaturalAiEntry nae with(nolock) on nae.BreedingEntryID = c.CalvingId
		left outer join LookupValues lvcg with(nolock) on lvcg.LookupValuesId = nae.IsNaturalAI
		left outer join LookupValues lvc with(nolock) on lvc.LookupValuesId = nae.IsOtherServiceProvider 
    left outer join SystemUser sup with(nolock) on sup.SystemUserId=c.ValidatedBy and c.CalvingRequestStatus!=0 {2} {4} {5}
group by  c.CalvingId,sm.SocietyName,sm.SocietyCode,isnull(fm.FarmerNameEng,nfm.FarmerNameEng),isnull(fm.FarmerCode,nfm.FarmerCode),
            ac.TagCode,isnull(lnn.LookupValue,''),lvct.LookupValue,lvag.LookupValue,bdm.[Name],bm.BullNo,ac.Cycle,
           format(ac.CloseDate,'dd/MM/yyyy'),
           format(ac.CloseDate,'hh:mm tt'),
            lvNoa.LookupValue,ac.ContactName,ac.ContactNo,
           format(p.DueDate,'dd/MM/yyyy'),
           format(p.DueDate,'hh:mm tt'),
           format(p.CheckedDate,'dd/MM/yyyy'),
           format(p.CheckedDate,'hh:mm tt'),
            p.PregnancyDays,lvStatus.LookupValue,
           format(c.DueDate,'dd/MM/yyyy'),
           format(c.DueDate,'hh:mm tt'),
           format(c.DoneDate,'dd/MM/yyyy'),
           format(c.DoneDate,'hh:mm tt'),
            c.[Days],lvcs.LookupValue,sud.NameEng,isnull(sup.NameEng,''),su.NameEng,suaw.NameEng,
			case when sud.IsActive=@act and isnull(sud.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end,
			case bm.IsSexedSemen when 1 then 'Yes' else 'No' end,
            isnull(lvreq.LookupValue,'Not Checked'),T1.aicount,
            aw.AIWorkerCode,t1.aicount,
        isnull(c.validateImage,''),c.Latitude,c.Longitude,c.ValidateLatitude,c.ValidateLongitude,format(c.ValidatedOn,'dd/MM/yyyy'),
        isnull(lvcg.LookupValue,'No'),isnull(lvc.LookupValue,'No'),isnull(nae.SPAIWorker,''),isnull(c.Remarks,'')";

        private const string CalvingDoneByRestQuery = @"select distinct su.SystemUserId Code,case when isnull(aw.AIWorkerCode,em.SAPCode) is null then su.NameEng else concat(su.NameEng,' [',isnull(aw.AIWorkerCode,em.SAPCode),']') end [Name],
			case when (isnull(aw.AIWorkerMasterId,em.EmployeeMasterId) is null or isnull(aw.IsActive,em.IsActive)=@act)
				and su.IsActive=@act and isnull(su.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end [Group]
		from EmployeeSocietyMapping esm with(nolock)
        inner join SystemUser sue with(nolock) on sue.RefId=esm.EmployeeMasterId and sue.SystemUserId=@uid
        inner join SocietyMaster sm on esm.SocietyMasterId = sm.SocietyMasterId
            {0}
        inner join AICall ac with(nolock) on ac.SocietyMasterId=esm.SocietyMasterId and ac.IsActive=@act
        inner join PDEntry pd with(nolock) on pd.AICallId=ac.AICallId and pd.IsActive=@act
        inner join Calving cl with(nolock) on cl.PDEntryId=pd.PDEntryId and cl.IsActive=@act
        inner join SystemUser su with(nolock) on su.SystemUserId=cl.CreatedBy
		left outer join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=su.RefId and su.UserType=@aiworker
		left outer join EmployeeMaster em with(nolock) on em.EmployeeMasterId=su.RefId and su.UserType=@employee";
        private const string CalvingReportRestQuery = @"select  c.CalvingId,case WHEN c.CalvingImageId IS NOT NULL and c.CalvingImageId<>'' THEN c.CalvingImageId 
			else (case when c.CalvingTagImageId IS NOT NULL and c.CalvingTagImageId<>'' then c.CalvingTagImageId
			else (case when p.PDEntryImageId IS NOT NULL and p.PDEntryImageId<>'' THEN p.PDEntryImageId
			else (case when p.PDTagEntryImageId IS NOT NULL and p.PDTagEntryImageId <>'' THEN p.PDTagEntryImageId 
			else(case when ac.BullImageId IS NOT NULL and ac.BullImageId<>'' then ac.BullImageId
			else (case when ac.FarmerImageId IS NOT NULL and ac.FarmerImageId<>'' then ac.FarmerImageId 
			else (case when ac.TagImageId IS NOT NULL and ac.TagImageId<>'' then ac.TagImageId 
			else ('') end) end) end) end) end) end) end as ImageId,
			sm.SocietyCode,sm.SocietyName as Society,concat(isnull(fm.FarmerCode,nfm.FarmerCode),' - ',isnull(fm.FarmerNameEng,nfm.FarmerNameEng))Farmer,
            ac.TagCode,isnull(lnn.LookupValue,'')NDDBType,lvct.LookupValue CattleType,lvag.LookupValue AgeGroup,bdm.[Name] BreedName,bm.BullNo,ac.Cycle,
          format(ac.CloseDate,'dd/MM/yyyy')CallDate,
          format(ac.CloseDate,'hh:mm tt')CallTime,
            lvNoa.LookupValue NoOfAI,ac.ContactName,ac.ContactNo,
          format(p.DueDate,'dd/MM/yyyy')PdDueDate,
          format(p.DueDate,'hh:mm tt')PdDueTime,
          format(p.CheckedDate,'dd/MM/yyyy')PdCheckedDate,
          format(p.CheckedDate,'hh:mm tt')PdCheckedTime,
            p.PregnancyDays,lvStatus.LookupValue PdStatus,
          format(c.DueDate,'dd/MM/yyyy')DueDate,
          format(c.DueDate,'hh:mm tt')DueTime,
          format(c.DoneDate,'dd/MM/yyyy')DoneDate,
          format(c.DoneDate,'hh:mm tt')DoneTime,
         c.[Days],
	 STUFF(
             (SELECT '/' + case when isnull(ct.TagNo,'') = '' or ct.TagNo is null then 'NA' else ct.TagNo end
              FROM CattleMaster ct
		     where ct.CalvingId=c.CalvingId 
              FOR XML PATH (''))
             , 1, 1, '') as CalfTag,
			 STUFF(
             (SELECT '/' + lvcfg.LookupValue 
              FROM CattleMaster as ct
			left outer join  LookupValues lvcfg with(nolock) on lvcfg.LookupValuesId=ct.Gender
              where  ct.CalvingId=c.CalvingId 
              FOR XML PATH (''))
             , 1, 1, '') as CalfGender,
lvcs.LookupValue [Status],sud.NameEng,
			case when sud.IsActive=@act and isnull(sud.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end [DoneByStatus],

			bm.IsSexedSemen,isnull(ccc.IsSexedSemenCalf,'')IsSexedSemenCalf,
isnull(lvreq.LookupValue,'Not Checked') CalvingRequestStatus,case when bm.IsSexedSemen=1 and ct.Gender = 2 then 1 else 0 end SexedSemenCalfcolor
        ,isnull(c.validateImage,'')validateImage,CAST('https://www.google.com/maps?q=' + c.Latitude + ',' + c.Longitude as xml)as ImageLatLong, CAST('https://www.google.com/maps?q=' + c.ValidateLatitude + ',' + c.ValidateLongitude as xml)as ValidateLatLong,isnull(sup.NameEng,'') as ValidatedBy,format(c.ValidatedOn,'dd/MM/yyyy') as ValidatedOn from Calving c with(nolock)
        inner join SystemUser suaw with(nolock) on suaw.RefId=c.AIWorkerMasterId and suaw.UserType=@utyp and c.IsActive=@act {6}
        inner join SystemUser sud with(nolock) on sud.SystemUserId=c.CreatedBy
        inner join PDEntry p with(nolock) on c.PDEntryId=p.PDEntryId and p.IsActive=@act
        inner join AICall ac with(nolock) on ac.AICallId=p.AICallId inner join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId and ac.IsActive=@act {0}
       -- left outer join CattleMaster cm with(nolock) on cm.CattleMasterId = ac.CattleMasterId
        inner join (select tagcode,sum(AI) aicount 
			from (select tagcode, (case when LAG(ac2.CallDate,1,NULL) over(partition by ac2.TagCode order by ac2.TagCode,ac2.CallDate) is null then 1 
					when datediff(day,LAG(ac2.CallDate,1,ac2.CallDate) over(partition by ac2.TagCode order by ac2.TagCode,ac2.CallDate),ac2.CallDate)<10 then 0 else 1 end)AI 
				from AICall ac2)T
			group by tagcode)T1 on ac.TagCode = T1.TagCode {3}
		inner join EmployeeSocietyMapping esm with(nolock) on esm.SocietyMasterId=ac.SocietyMasterId
		inner join SystemUser suem with(nolock) on suem.RefId=esm.EmployeeMasterId and suem.SystemUserId=@uid and suem.UserType=@employee
        inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId {1}
        inner join SystemUser su with(nolock) on su.SystemUserId=c.CreatedBy
        left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
        left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0        
        left outer join BreedMaster bdm with(nolock) on bdm.BreedMasterId=ac.BreedMasterId
        left outer join LookupValues lvNoa on lvNoa.LookupValuesId=ac.NoOfAI
        left outer join LookupValues lvStatus on lvStatus.LookupValuesId=p.StatusTypeId
        left outer join LookupValues lvct on lvct.LookupValuesId=ac.CattleTypeId
        left outer join LookupValues lvag on lvag.LookupValuesId=ac.AgeGroupTypeId		
        left outer join LookupValues lvcs on lvcs.LookupValuesId=c.[Status]
        left outer join LookupValues lvsexsemen on lvsexsemen.LookupValuesId=bm.issexedsemen
        left outer join LookupValues lvreq with(nolock) on lvreq.LookupValuesId=c.CalvingRequestStatus
        left outer join CattleMaster ct with(nolock) on ct.CalvingId=c.CalvingId 
left outer join LookupValues lvcfg with(nolock) on lvcfg.LookupValuesId=ct.Gender
         left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
 left outer join CattleMaster ccc with(nolock) on ac.TagCode=ccc.TagNo
		  left outer join LookupValues lnn with(nolock) on lnn.LookupValuesId=ccc.NDDBTypeId
left outer join SystemUser sup with(nolock) on sup.SystemUserId=c.ValidatedBy and c.CalvingRequestStatus!=0
        {2} {4} {5}
group by c.CalvingId,case WHEN c.CalvingImageId IS NOT NULL and c.CalvingImageId<>'' THEN c.CalvingImageId 
			else (case when c.CalvingTagImageId IS NOT NULL and c.CalvingTagImageId<>'' then c.CalvingTagImageId
			else (case when p.PDEntryImageId IS NOT NULL and p.PDEntryImageId<>'' THEN p.PDEntryImageId
			else (case when p.PDTagEntryImageId IS NOT NULL and p.PDTagEntryImageId<>'' THEN p.PDTagEntryImageId 
			else(case when ac.BullImageId IS NOT NULL and ac.BullImageId<>'' then ac.BullImageId
			else (case when ac.FarmerImageId IS NOT NULL and ac.FarmerImageId<>'' then ac.FarmerImageId 
			else (case when ac.TagImageId IS NOT NULL and ac.TagImageId<>'' then ac.TagImageId 
			else ('') end) end) end) end) end) end) end ,
			sm.SocietyCode,sm.SocietyName,concat(isnull(fm.FarmerCode,nfm.FarmerCode),' - ',isnull(fm.FarmerNameEng,nfm.FarmerNameEng)),
            ac.TagCode,isnull(lnn.LookupValue,''),lvct.LookupValue,lvag.LookupValue,bdm.[Name],bm.BullNo,ac.Cycle,
         format(ac.CloseDate,'dd/MM/yyyy'),
         format(ac.CloseDate,'hh:mm tt'),
            lvNoa.LookupValue,ac.ContactName,ac.ContactNo,
         format(p.DueDate,'dd/MM/yyyy'),
         format(p.DueDate,'hh:mm tt'),
         format(p.CheckedDate,'dd/MM/yyyy'),
         format(p.CheckedDate,'hh:mm tt'),
            p.PregnancyDays,lvStatus.LookupValue,
         format(c.DueDate,'dd/MM/yyyy'),
         format(c.DueDate,'hh:mm tt'),
         format(c.DoneDate,'dd/MM/yyyy'),
         format(c.DoneDate,'hh:mm tt'),
            c.[Days],
			lvcs.LookupValue,sud.NameEng,
			case when sud.IsActive=@act and isnull(sud.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end,
  bm.IsSexedSemen,ccc.IsSexedSemenCalf,
isnull(lvreq.LookupValue,'Not Checked'),case when bm.IsSexedSemen=1 and ct.Gender = 2 then 1 else 0 end
        ,isnull(c.validateImage,''),c.Latitude, c.Longitude, c.ValidateLatitude, c.ValidateLongitude,isnull(sup.NameEng,'') ,format(c.ValidatedOn,'dd/MM/yyyy') ";
        private const string CalvingReportExportRestQuery = @"select sm.SocietyName Society,sm.SocietyCode SocietyCode,isnull(fm.FarmerNameEng,nfm.FarmerNameEng) Farmer,isnull(fm.FarmerCode,nfm.FarmerCode) FarmerCode,
            ac.TagCode,isnull(lnn.LookupValue,'')NDDBType,lvct.LookupValue CattleType,lvag.LookupValue AgeGroup,bdm.[Name] BreedName,bm.BullNo,ac.Cycle,
          format(ac.CloseDate,'dd/MM/yyyy')CallDate,
          format(ac.CloseDate,'hh:mm tt')CallTime,
            lvNoa.LookupValue NoOfAI,ac.ContactName,ac.ContactNo,
          format(p.DueDate,'dd/MM/yyyy')PdDueDate,
          format(p.DueDate,'hh:mm tt')PdDueTime,
          format(p.CheckedDate,'dd/MM/yyyy')PdCheckedDate,
          format(p.CheckedDate,'hh:mm tt')PdCheckedTime,
             p.PregnancyDays,lvStatus.LookupValue PdStatus,
          format(c.DueDate,'dd/MM/yyyy')DueDate,
          format(c.DueDate,'hh:mm tt')DueTime,
          format(c.DoneDate,'dd/MM/yyyy')DoneDate,
          format(c.DoneDate,'hh:mm tt')DoneTime,
            c.[Days],lvcs.LookupValue [Status],sud.NameEng,
			case when sud.IsActive=@act and isnull(sud.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end [DoneByStatus],
		STUFF((SELECT '/' + case when isnull(ct.TagNo,'') = '' or ct.TagNo is null then 'NA' else ct.TagNo end
              FROM CattleMaster ct where ct.CalvingId=c.CalvingId 
              FOR XML PATH ('')), 1, 1, '') as CalfTag,
			 STUFF((SELECT '/' + lvcfg.LookupValue 
              FROM CattleMaster as ct
			left outer join  LookupValues lvcfg with(nolock) on lvcfg.LookupValuesId=ct.Gender
              where  ct.CalvingId=c.CalvingId 
             FOR XML PATH ('')), 1, 1, '') as CalfGender,
			  STUFF((SELECT '' + isnull(ln.LookupValue,'')
              FROM CattleMaster as ct
			  left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
              where  ct.CalvingId=c.CalvingId 
              FOR XML PATH ('')), 1, 1, '') as CalfNDDBType,
                 STUFF((SELECT '/' + lvcfst.LookupValue
              FROM CattleMaster as ct
			left outer join LookupValues lvcfst with(nolock) on lvcfst.LookupValuesId=ct.[Status]
              where  ct.CalvingId=c.CalvingId 
              FOR XML PATH ('')), 1, 1, '') as CalfStatus,
			STRING_AGG(ct.[Weight],'/') [Weight],
            case bm.IsSexedSemen when 1 then 'Yes' else 'No' end SexedSemen,
            isnull(lvreq.LookupValue,'Not Checked') CalvingRequestStatus,aw.AIWorkerCode AIWorkerCodes,suaw.NameEng AIWorkerNames, T1.aicount AICount
        ,isnull(c.validateImage,'')validateImage,CAST('https://www.google.com/maps?q=' + c.Latitude + ',' + c.Longitude as xml)as ImageLatLong, CAST('https://www.google.com/maps?q=' + c.ValidateLatitude + ',' + c.ValidateLongitude as xml)as ValidateLatLong, isnull(sup.NameEng,'') as ValidatedBy,format(c.ValidatedOn,'dd/MM/yyyy') as ValidatedOn
        ,isnull(lvcg.LookupValue,'No')IsNaturalAI,isnull(lvc.LookupValue,'No')IsOtherServiceProvider,isnull(nae.SPAIWorker,'')SPAIWorker,isnull(c.Remarks,'')Remarks
        from Calving c with(nolock)
        inner join SystemUser suaw with(nolock) on suaw.RefId=c.AIWorkerMasterId and suaw.UserType=@utyp and c.IsActive=@act {6}
        inner join SystemUser sud with(nolock) on sud.SystemUserId=c.CreatedBy
        inner join PDEntry p with(nolock) on c.PDEntryId=p.PDEntryId and p.IsActive=@act
        inner join AICall ac with(nolock) on ac.AICallId=p.AICallId and ac.IsActive=@act {0}
        inner join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=c.AIWorkerMasterId
        inner join (select tagcode,sum(AI) aicount 
			from (select tagcode, (case when LAG(ac2.CallDate,1,NULL) over(partition by ac2.TagCode order by ac2.TagCode,ac2.CallDate) is null then 1 
					when datediff(day,LAG(ac2.CallDate,1,ac2.CallDate) over(partition by ac2.TagCode order by ac2.TagCode,ac2.CallDate),ac2.CallDate)<10 then 0 else 1 end)AI
				from AICall ac2)T 
			group by tagcode)T1 on ac.TagCode = T1.TagCode {3}
		inner join EmployeeSocietyMapping esm with(nolock) on esm.SocietyMasterId=ac.SocietyMasterId 
		inner join SystemUser suem with(nolock) on suem.RefId=esm.EmployeeMasterId and suem.SystemUserId=@uid and suem.UserType=@employee
        inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId {1}
        inner join SystemUser su with(nolock) on su.SystemUserId=c.CreatedBy
        left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
        left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
        left outer join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
        left outer join BreedMaster bdm with(nolock) on bdm.BreedMasterId=ac.BreedMasterId
        left outer join LookupValues lvNoa on lvNoa.LookupValuesId=ac.NoOfAI
        left outer join LookupValues lvStatus on lvStatus.LookupValuesId=p.StatusTypeId
        left outer join LookupValues lvct on lvct.LookupValuesId=ac.CattleTypeId
        left outer join LookupValues lvag on lvag.LookupValuesId=ac.AgeGroupTypeId
        left outer join LookupValues lvcs on lvcs.LookupValuesId=c.[Status]
		left outer join CattleMaster ct with(nolock) on ct.CalvingId=c.CalvingId 
  left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
		left outer join LookupValues lvcfg with(nolock) on lvcfg.LookupValuesId=ct.Gender
		left outer join LookupValues lvcfst with(nolock) on lvcfst.LookupValuesId=ct.[Status]
        left outer join LookupValues lvreq with(nolock) on lvreq.LookupValuesId=c.CalvingRequestStatus
        left outer join CattleMaster ccc with(nolock) on ac.TagCode=ccc.TagNo
		left outer join LookupValues lnn with(nolock) on lnn.LookupValuesId=ccc.NDDBTypeId 
         left outer join NaturalAiEntry nae with(nolock) on nae.BreedingEntryID = c.CalvingId
		left outer join LookupValues lvcg with(nolock) on lvcg.LookupValuesId = nae.IsNaturalAI
		left outer join LookupValues lvc with(nolock) on lvc.LookupValuesId = nae.IsOtherServiceProvider
    left outer join SystemUser sup with(nolock) on sup.SystemUserId=c.ValidatedBy and c.CalvingRequestStatus!=0 {2} {4} {5}
group by  c.CalvingId,sm.SocietyName,sm.SocietyCode,isnull(fm.FarmerNameEng,nfm.FarmerNameEng),isnull(fm.FarmerCode,nfm.FarmerCode),
            ac.TagCode,isnull(lnn.LookupValue,''),lvct.LookupValue,lvag.LookupValue,bdm.[Name],bm.BullNo,ac.Cycle,
           format(ac.CloseDate,'dd/MM/yyyy'),
           format(ac.CloseDate,'hh:mm tt'),
            lvNoa.LookupValue,ac.ContactName,ac.ContactNo,
           format(p.DueDate,'dd/MM/yyyy'),
           format(p.DueDate,'hh:mm tt'),
           format(p.CheckedDate,'dd/MM/yyyy'),
           format(p.CheckedDate,'hh:mm tt'),
            p.PregnancyDays,lvStatus.LookupValue,
           format(c.DueDate,'dd/MM/yyyy'),
           format(c.DueDate,'hh:mm tt'),
           format(c.DoneDate,'dd/MM/yyyy'),
           format(c.DoneDate,'hh:mm tt'),
            c.[Days],lvcs.LookupValue,sud.NameEng,isnull(sup.NameEng,''),su.NameEng,suaw.NameEng,
			case when sud.IsActive=@act and isnull(sud.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end,
			case bm.IsSexedSemen when 1 then 'Yes' else 'No' end,
            isnull(lvreq.LookupValue,'Not Checked'),T1.aicount,
            aw.AIWorkerCode,t1.aicount,
        isnull(c.validateImage,''),c.Latitude,c.Longitude,c.ValidateLatitude,c.ValidateLongitude,format(c.ValidatedOn,'dd/MM/yyyy'),
        isnull(lvcg.LookupValue,'No'),isnull(lvc.LookupValue,'No'),isnull(nae.SPAIWorker,''),isnull(c.Remarks,'')";

  //      private const string CalvingDueReportWorkerQuery = @"select sm.SocietyCode,sm.SocietyName as Society,isnull(fm.FarmerCode,nfm.FarmerCode) FarmerCode,isnull(fm.FarmerNameEng,nfm.FarmerNameEng)FarmerName,
  //          concat(isnull(fm.FarmerCode,nfm.FarmerCode),' - ',isnull(fm.FarmerNameEng,nfm.FarmerNameEng))Farmer,
  //          ac.TagCode,isnull(ln.LookupValue,'')NDDBType,lvct.LookupValue CattleType,lvag.LookupValue AgeGroup,ac.LactationNo,bl.BullNo,format(ac.CloseDate,'dd/MM/yyyy') CallDate,
  //          [dbo].[CalculateTotalAi](ac.TagCode,@cStatus,ac.AiGroup)TotalAI,
  //          format(dateadd(day,(case ac.CattleTypeId when @cow then @cdays else @bdays end),cast(ac.CloseDate as date)),'dd/MM/yyyy') DueDate,datediff(day,ac.CloseDate,getdate()) DueDays,
		//    case ac.IsReliver when 1 then awr.AIWorkerCode else aw.AIWorkerCode end AIWorkerCodes,
		//    	case ac.IsReliver when 1 then concat(sur.NameEng,' (Reliver of ',su.NameEng,')') else su.NameEng end AIWorkerNames,
  //          concat(case ac.IsReliver when 1 then awr.AIWorkerCode else aw.AIWorkerCode end,' - ',
		//    	case ac.IsReliver when 1 then concat(sur.NameEng,' (Reliver of ',su.NameEng,')') else su.NameEng end) AIWorkerName,
		//	case when aw.IsActive=@act and su.IsActive=@act and isnull(su.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end [AiWorkerStatus],
		//	bl.IsSexedSemen,case bl.IsSexedSemen when 1 then 'Yes' else 'No' end SexedSemen,isnull(ct.IsSexedSemenCalf,'')IsSexedSemenCalf
  //      from AICall ac with(nolock)
  //      inner join PDEntry pd with(nolock) on pd.AICallId=ac.AICallId 
		//inner join BullMaster bl with(nolock) on bl.BullMasterId=ac.BullMasterId 
		//	and ac.IsActive=@act and pd.IsActive=@act and ac.CallStatus=@cStatus and pd.StatusTypeId=@pregnant 
		//	and ac.CloseDate between (case ac.CattleTypeId when @cow then DATEADD(day,-279,cast(@FromDate as date)) else DATEADD(day,-310,cast(@FromDate as date)) end) 
		//	and (case ac.CattleTypeId when @cow then DATEADD(day,-278,cast(@ToDate as date))  else DATEADD(day,-309,cast(@ToDate as date)) end) 
		//inner join CattleMaster ct with(nolock) on ct.TagNo=ac.TagCode and isnull(ct.[Status],@live)=@live
		//inner join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=(case ac.IsReliver when 1 then ac.ReliverId else ac.AIWorkerMasterId end)
  //      inner join SystemUser su with(nolock) on su.RefId=aw.AIWorkerMasterId and su.UserType=@uType and su.SystemUserId=@uid
  //      inner join LookupValues lvct with(nolock) on lvct.LookupValuesId=ac.CattleTypeId
  //      inner join LookupValues lvag with(nolock) on lvag.LookupValuesId=ac.AgeGroupTypeId
  //      left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
  //      inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId
  //      left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
  //      left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
  //      left outer join Calving cl with(nolock) on cl.PDEntryId=pd.PDEntryId 
		//left outer join AIWorkerMaster awr with(nolock) on ac.IsReliver=1 and awr.AIWorkerMasterId=ac.AIWorkerMasterId
		//left outer join SystemUser sur with(nolock) on sur.RefId=awr.AIWorkerMasterId and sur.UserType=@uType
  //      --left outer join CattleMaster cm with(nolock) on cm.CattleMasterId = ac.CattleMasterId
  //      where cl.CalvingId is null 
  //      	{0} {1} {2}";
  //      private const string CalvingDueReportEmployeeQuery = @"select sm.SocietyCode,sm.SocietyName as Society,isnull(fm.FarmerCode,nfm.FarmerCode) FarmerCode,isnull(fm.FarmerNameEng,nfm.FarmerNameEng)FarmerName,
  //          concat(isnull(fm.FarmerCode,nfm.FarmerCode),' - ',isnull(fm.FarmerNameEng,nfm.FarmerNameEng))Farmer,
  //          ac.TagCode,isnull(ln.LookupValue,'')NDDBType,lvct.LookupValue CattleType,lvag.LookupValue AgeGroup,ac.LactationNo,bl.BullNo,format(ac.CloseDate,'dd/MM/yyyy') CallDate,
  //          [dbo].[CalculateTotalAi](ac.TagCode,@cStatus,ac.AiGroup)TotalAI,
  //          format(dateadd(day,(case ac.CattleTypeId when @cow then @cdays else @bdays end),cast(ac.CloseDate as date)),'dd/MM/yyyy') DueDate,datediff(day,ac.CloseDate,getdate()) DueDays,
  //          case ac.IsReliver when 1 then awr.AIWorkerCode else aw.AIWorkerCode end AIWorkerCodes,
		//    	case ac.IsReliver when 1 then concat(sur.NameEng,' (Reliver of ',su.NameEng,')') else su.NameEng end AIWorkerNames,
  //          concat(case ac.IsReliver when 1 then awr.AIWorkerCode else aw.AIWorkerCode end,' - ',
		//    	case ac.IsReliver when 1 then concat(sur.NameEng,' (Reliver of ',su.NameEng,')') else su.NameEng end) AIWorkerName,
		//	case when aw.IsActive=@act and su.IsActive=@act and isnull(su.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end [AiWorkerStatus],
		//	bl.IsSexedSemen,case bl.IsSexedSemen when 1 then 'Yes' else 'No' end SexedSemen,isnull(ct.IsSexedSemenCalf,'')IsSexedSemenCalf
  //      from AICall ac with(nolock)
  //      inner join PDEntry pd with(nolock) on pd.AICallId=ac.AICallId 
		//inner join BullMaster bl with(nolock) on bl.BullMasterId=ac.BullMasterId and ac.IsActive=@act and pd.IsActive=@act and ac.CallStatus=@cStatus and pd.StatusTypeId=@pregnant 
		//	and ac.CloseDate between (case ac.CattleTypeId when @cow then DATEADD(day,-279,cast(@FromDate as date))  else DATEADD(day,-310,cast(@FromDate as date)) end) 
		//	and (case ac.CattleTypeId when @cow then DATEADD(day,-278,cast(@ToDate as date))  else DATEADD(day,-309,cast(@ToDate as date)) end) 
		//inner join CattleMaster ct with(nolock) on ct.TagNo=ac.TagCode and isnull(ct.[Status],@live)=@live
		//inner join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=ac.AIWorkerMasterId
  //      inner join SystemUser su with(nolock) on su.RefId=aw.AIWorkerMasterId and su.UserType=@uType
  //      inner join LookupValues lvct with(nolock) on lvct.LookupValuesId=ac.CattleTypeId
  //      inner join LookupValues lvag with(nolock) on lvag.LookupValuesId=ac.AgeGroupTypeId
  //      left outer join LookupValues ln with(nolock)  on ln.LookupValuesId=ct.NDDBTypeId
  //      left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
  //      inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId
  //      left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
  //      left outer join Calving cl with(nolock) on cl.PDEntryId=pd.PDEntryId 
  //      left outer join AIWorkerMaster awr with(nolock) on ac.IsReliver=1 and awr.AIWorkerMasterId=ac.IsReliver
		//left outer join SystemUser sur with(nolock) on sur.RefId=awr.AIWorkerMasterId and sur.UserType=@uType
  //      --left outer join CattleMaster cm with(nolock) on cm.CattleMasterId = ac.CattleMasterId
  //      where cl.CalvingId is null 
  //      	{0} {1} {2}";
  //      private const string CalvingDueReportRestQuery = @"select sm.SocietyCode,sm.SocietyName as Society,isnull(fm.FarmerCode,nfm.FarmerCode) FarmerCode,isnull(fm.FarmerNameEng,nfm.FarmerNameEng)FarmerName,
  //          concat(isnull(fm.FarmerCode,nfm.FarmerCode),' - ',isnull(fm.FarmerNameEng,nfm.FarmerNameEng))Farmer,
  //          ac.TagCode,isnull(ln.LookupValue,'')NDDBType,lvct.LookupValue CattleType,lvag.LookupValue AgeGroup,ac.LactationNo,bl.BullNo,format(ac.CloseDate,'dd/MM/yyyy') CallDate,
  //          [dbo].[CalculateTotalAi](ac.TagCode,@cStatus,ac.AiGroup)TotalAI,
  //          format(dateadd(day,(case ac.CattleTypeId when @cow then @cdays else @bdays end),cast(ac.CloseDate as date)),'dd/MM/yyyy') DueDate,datediff(day,ac.CloseDate,getdate()) DueDays,
		//    case ac.IsReliver when 1 then awr.AIWorkerCode else aw.AIWorkerCode end AIWorkerCodes,
		//    	case ac.IsReliver when 1 then concat(sur.NameEng,' (Reliver of ',su.NameEng,')') else su.NameEng end AIWorkerNames,
  //          concat(case ac.IsReliver when 1 then awr.AIWorkerCode else aw.AIWorkerCode end,' - ',
		//    	case ac.IsReliver when 1 then concat(sur.NameEng,' (Reliver of ',su.NameEng,')') else su.NameEng end) AIWorkerName,
		//	case when aw.IsActive=@act and su.IsActive=@act and isnull(su.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end [AiWorkerStatus],
		//	bl.IsSexedSemen,case bl.IsSexedSemen when 1 then 'Yes' else 'No' end SexedSemen,isnull(ct.IsSexedSemenCalf,'')IsSexedSemenCalf
  //      from AICall ac with(nolock)
  //      inner join PDEntry pd with(nolock) on pd.AICallId=ac.AICallId 
		//inner join BullMaster bl with(nolock) on bl.BullMasterId=ac.BullMasterId and ac.IsActive=@act and pd.IsActive=@act and ac.CallStatus=@cStatus and pd.StatusTypeId=@pregnant 
		//	and ac.CloseDate between (case ac.CattleTypeId when @cow then DATEADD(day,-279,cast(@FromDate as date)) else DATEADD(day,-310,cast(@FromDate as date)) end)
		//	and (case ac.CattleTypeId when @cow then DATEADD(day,-278,cast(@ToDate as date))  else DATEADD(day,-309,cast(@ToDate as date)) end) 
		//inner join CattleMaster ct with(nolock) on ct.TagNo=ac.TagCode and isnull(ct.[Status],@live)=@live
		//inner join EmployeeSocietyMapping esm with(nolock) on esm.SocietyMasterId=ac.SocietyMasterId 
		//inner join SystemUser suem with(nolock) on suem.RefId=esm.EmployeeMasterId and suem.SystemUserId=@uid and suem.UserType=@employee
		//inner join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=ac.AIWorkerMasterId
  //      inner join SystemUser su with(nolock) on su.RefId=aw.AIWorkerMasterId and su.UserType=@uType
  //      inner join LookupValues lvct with(nolock) on lvct.LookupValuesId=ac.CattleTypeId
  //      inner join LookupValues lvag with(nolock) on lvag.LookupValuesId=ac.AgeGroupTypeId
  //      left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
  //      inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId
  //      left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
  //      left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
  //      left outer join Calving cl with(nolock) on cl.PDEntryId=pd.PDEntryId 
		//left outer join AIWorkerMaster awr with(nolock) on ac.IsReliver=1 and awr.AIWorkerMasterId=ac.IsReliver
		//left outer join SystemUser sur with(nolock) on sur.RefId=awr.AIWorkerMasterId and sur.UserType=@uType
  //      --left outer join CattleMaster cm with(nolock) on cm.CattleMasterId = ac.CattleMasterId
  //      where cl.CalvingId is null
  //      	{0} {1} {2}";

        private const string CalvingAbortionTemplateQuery = @"select unpvt.FieldName as Name,unpvt.FieldValue as Code
        from (select cast(isnull(ac.ContactNo,'') as nvarchar(200)) as ContactNo,cast(su.MobileNo as nvarchar(200)) as AIWorkerContactNo,
        	cast(ac.TagCode as nvarchar(200))TagNo,
			cast(isnull(case when isnull(isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj),'')<>'' and isnull(fm.FarmerCode,nfm.FarmerCode)=isnull(fm.FarmerNameEng,nfm.FarmerNameEng)
				then isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) else isnull(fm.FarmerNameEng,nfm.FarmerNameEng) end,'Unknown') as nvarchar(200)) FarmerName,
        	cast(format(ac.CloseDate,'dd/MM/yyyy') as nvarchar(200)) as AICallCloseDate,
        	cast(format(ac.CloseDate,'hh:mm tt') as nvarchar(200)) as AICallCloseTime
        	from Calving c with(nolock)
        	inner join PDEntry p with(nolock) on p.PDEntryId=c.PDEntryId and c.CalvingId=@clid and c.IsActive=@act
        	inner join AICall ac with(nolock) on ac.AICallId=p.AICallId
        	inner join SystemUser su with(nolock) on su.RefId=c.AIWorkerMasterId and su.UserType=@uType
        	left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1 
        	left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
        )p unpivot (FieldValue for FieldName in (ContactNo,AIWorkerContactNo,TagNo,FarmerName,AICallCloseDate,AICallCloseTime)
        )unpvt";
        #endregion

        #region Service Implementation
        public ApiResponse GetDues(Pagination pagination, string searchBy, bool isEntry)
        {
            pagination.SortBy = string.IsNullOrWhiteSpace(pagination.SortBy) ? "CloseDate desc" : pagination.SortBy.Trim();
            return Get<CalvingListModel>(pagination, default(Enums.CalvingStatus), true, (isEntry ? ">" : "<="),
                string.IsNullOrWhiteSpace(searchBy)
                ? ""
                : @" and (sm.SocietyCode like concat('%',@srcby,'%') or sm.SocietyName like concat('%',@srcby,'%') or 
                isnull(fm.FarmerCode,nfm.FarmerCode) like concat('%',@srcby,'%') or 
                isnull(fm.FarmerNameEng,nfm.FarmerNameEng) like concat('%',@srcby,'%') or 
                isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) like concat('%',@srcby,'%') or ac.TagCode=@srcby)",
                new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                new Parameter("utyp", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                new Parameter("cstatus", System.Data.DbType.Int32, (int)Enums.CallStatus.Close),
                new Parameter("pstatus", System.Data.DbType.Int32, (int)Enums.PDStatus.Pregnant),
                new Parameter("suid", System.Data.DbType.Int64, _currentUser?.Info?.Id),
                new Parameter("cdays", System.Data.DbType.Int32, Constants.CowCalvingDueDays),
                new Parameter("bdays", System.Data.DbType.Int32, Constants.BuffaloCalvingDueDays),
                new Parameter("cow", System.Data.DbType.Int32, (int)Enums.CattleType.Cow),
                new Parameter("live", System.Data.DbType.Int32, (int)Enums.CalfStatus.Live),
                new Parameter("srcBy", System.Data.DbType.String, searchBy?.Trim()));
        }

        public ApiResponse GetDuesForDevice(Pagination pagination, string societyCode, string searchBy,
            bool isEntry, DateTime? date, DateTime? todate, Enums.CattleTypeInDashboard cattleType, string aiWorkerCode, int? isSexedSemen = null)
        {
            pagination.SortBy = string.IsNullOrWhiteSpace(pagination.SortBy) ? "ac.CloseDate desc" : pagination.SortBy.Trim();
            string filter = " and dateadd(day,(case ac.CattleTypeId when @cow then @cdays else @bdays end),cast(ac.CloseDate as date))between cast(@date as date) and cast(@todate as date) ";

            string sexedsemenfilter = $"{(isSexedSemen.HasValue && isSexedSemen.Value >= 0 ? " bm.IsSexedSemen=@isSexedSemen and " : "")}";
            if (isSexedSemen < 0)
            {
                isSexedSemen = null;
            }

            return Get<CalvingListModel>(pagination, default(Enums.CalvingStatus), true, (isEntry ? ">" : "<="),
                string.IsNullOrWhiteSpace(searchBy)
                ? GetDateFilterForApp(date, todate, " and" + sexedsemenfilter, filter)
                : GetDateWithSearchFilterForApp(date, todate, " and" + sexedsemenfilter, filter),


                //  ? GetDateFilterForApp(date, todate, " where" + sexedsemenfilter, filter)
                //: GetDateWithSearchFilterForApp(date, todate, " where" + sexedsemenfilter, filter),

                new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                new Parameter("utyp", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                new Parameter("cstatus", System.Data.DbType.Int32, (int)Enums.CallStatus.Close),
                new Parameter("pstatus", System.Data.DbType.Int32, (int)Enums.PDStatus.Pregnant),
                new Parameter("suid", System.Data.DbType.Int64, _currentUser?.Info?.Id),
                new Parameter("cdays", System.Data.DbType.Int32, Constants.CowCalvingDueDays),
                new Parameter("bdays", System.Data.DbType.Int32, Constants.BuffaloCalvingDueDays),
                new Parameter("cow", System.Data.DbType.Int32, (int)Enums.CattleType.Cow),
                new Parameter("code", System.Data.DbType.AnsiString, societyCode),
                new Parameter("live", System.Data.DbType.Int32, (int)Enums.CalfStatus.Live),
                new Parameter("srcBy", System.Data.DbType.String, searchBy?.Trim()),
                new Parameter("date", System.Data.DbType.DateTime, date?.Date),
                 new Parameter("todate", System.Data.DbType.DateTime, todate?.Date.AddDays(1).AddMilliseconds(-2)),
                 new Parameter("isSexedSemen", System.Data.DbType.Boolean, isSexedSemen),
                 new Parameter("cattleType", System.Data.DbType.Int32, cattleType),
                  new Parameter("uid1", System.Data.DbType.Int32, aiWorkerCode)
                 );
        }

        public ApiResponse GetDueById(long id)
        {
            ApiResponse response = default(ApiResponse);
            CalvingViewModel result;
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoCalving = new Repository<CalvingModel>(connection);
                string strQuery = $@"select ac.AICallId,p.PDEntryId,ac.CallNumber,sm.SocietyMasterId,sm.SocietyCode,sm.SocietyName,isnull(fm.FarmerMasterId,nfm.NonRegisteredFarmerId)FarmerMasterId,
                    isnull(fm.FarmerCode,nfm.FarmerCode) as FarmerCode,isnull(fm.FarmerNameEng,nfm.FarmerNameEng) as FarmerName,ac.IsRegisteredFarmer,isnull(ac.[Address],'')[Address],
                    ac.TagCode,isnull(lntypeCM.CultureValue,'')TagType,isnull(ctm.NDDBTypeId,'')NDDBTypeId,ac.CattleTypeId,isnull(ct.LookupValue,'') as CattleType,bdm.BreedMasterId,bdm.[Name] BreedType,
                    isnull(ac.AgeGroupTypeId,0)AgeGroupTypeId,isnull(ag.LookupValue,'')AgeGroup,bm.BullNo,isnull(ac.LactationNo,0)LactationNo,
                    ac.Cycle,ac.CloseDate,isnull(ac.NoOfAI,0)NoOfAIId,isnull(at.LookupValue,'')NoOfAI,isnull(ac.TotalAI,0)TotalAI,
                    isnull(ac.ContactName,'')ContactName,isnull(ac.ContactNo,'')ContactNo,ac.AIWorkerMasterId,isnull(ac.IsReliver,0)IsReliver,
                    case when {(int)_header.Platform<Platform>()} in ({(int)Platform.Android},{(int)Platform.iOS}) and {_currentUser.Info.CultureId.ToInt32()}<>{(int)Enums.Culture.English} then sur.NameGuj else sur.NameEng end Reliver,
                    case when {(int)_header.Platform<Platform>()} in ({(int)Platform.Android},{(int)Platform.iOS}) and {_currentUser.Info.CultureId.ToInt32()}<>{(int)Enums.Culture.English} then su.NameGuj else su.NameEng end Worker,
                    p.DueDate as PdDueDate,p.CheckedDate as PdCheckedDate,p.StatusTypeId PdStatusId,isnull(ps.LookupValue,'')PdStatus,p.PregnancyDays,
                    case when {(int)_header.Platform<Platform>()} in ({(int)Platform.Android},{(int)Platform.iOS}) and {_currentUser.Info.CultureId.ToInt32()}<>{(int)Enums.Culture.English} then pdsu.NameGuj else pdsu.NameEng end PdDoneBy,p.CreatedOn PdDoneDate,
                    dateadd(day,(case ac.CattleTypeId when @cow then @cdays else @bdays end),cast(ac.CloseDate as date)) as DueDate,datediff(day,isnull(ac.CloseDate,getdate()),getdate()) as [Days],bm.IsSexedSemen,isnull(cm.IsSexedSemenCalf,'')IsSexedSemenCalf
                from AICall ac with(nolock)
                inner join PDEntry p with(nolock) on p.AICallId=ac.AICallId 
                	and p.StatusTypeId=@pstatus and ac.CallStatus=@cstatus and ac.AICallId=@aicid and ac.IsActive=@act
                inner join AIWorkerMaster aim with(nolock) on aim.AIWorkerMasterId=ac.AIWorkerMasterId
                inner join SystemUser su with(nolock) on su.RefId=aim.AIWorkerMasterId and su.UserType=@utyp
                inner join SystemUser pdsu with(nolock) on pdsu.SystemUserId=p.CreatedBy
                inner join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
                left outer join BreedMaster bdm with(nolock) on bdm.BreedMasterId=ac.BreedMasterId                
                left outer join SocietyMaster sm with(nolock) on sm.SocietyMasterId = ac.SocietyMasterId
                left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId = ac.FarmerMasterId and ac.IsRegisteredFarmer = 1
                left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId = ac.FarmerMasterId and ac.IsRegisteredFarmer = 0
                left outer join LookupValues ct with(nolock) on ct.LookupValuesId=ac.CattleTypeId
                left outer join LookupValues ag with(nolock) on ag.LookupValuesId=ac.AgeGroupTypeId
                left outer join LookupValues at with(nolock) on at.LookupValuesId=ac.NoOfAI
                left outer join LookupValues ps with(nolock) on ps.LookupValuesId=p.StatusTypeId
               left outer join CattleMaster ctm with(nolock) on ctm.TagNo=ac.TagCode
                left outer join CattleMaster cm with(nolock) on cm.CattleMasterId = ac.CattleMasterId
			    left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ctm.NDDBTypeId
                left outer join CultureKey lntype on lntype.CultureKey = ln.CultureKey
				left outer join CultureKeyMapping lntypeCM on lntypeCM.CultureKeyId = lntype.CultureKeyId and lntypeCM.CultureId = @cultureId
                left outer join AIWorkerMaster awr with(nolock) on awr.AIWorkerMasterId=ac.ReliverId
			    left outer join SystemUser sur with(nolock) on sur.RefId=awr.AIWorkerMasterId and sur.UserType=@utyp
                ";

                result = _repoCalving.Query<CalvingViewModel, CalvingModel>(strQuery,
                    new Parameter("cstatus", System.Data.DbType.Int32, (int)Enums.CallStatus.Close),
                    new Parameter("pstatus", System.Data.DbType.Int32, (int)Enums.PDStatus.Pregnant),
                    new Parameter("aicid", System.Data.DbType.Int64, id),
                    new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                    new Parameter("utyp", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                    new Parameter("cow", System.Data.DbType.Int32, (int)Enums.CattleType.Cow),
                    new Parameter("cdays", System.Data.DbType.Int32, Constants.CowCalvingDueDays),
                    new Parameter("bdays", System.Data.DbType.Int32, Constants.BuffaloCalvingDueDays),
                     new Parameter("cultureId", System.Data.DbType.Int64, HeaderAccessor.Culture))
                    .FirstOrDefault();
            }

            if (null == result)
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = _culture.GetString("msg_NoCalvingDueFound")
                };
            else
            {
                result.AIWorkerName = GetCultureWiseWorkerName(result);
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status200OK,
                    Data = result
                };
            }
            return response;
        }

        public ApiResponse GetAll(Pagination pagination, string searchBy, Enums.CalvingStatus status)
        {
            pagination.SortBy = string.IsNullOrWhiteSpace(pagination.SortBy) ? "CalvingId desc" : pagination.SortBy.Trim();
            return Get<CalvingListModel>(pagination, status, false, default(string),
                string.IsNullOrWhiteSpace(searchBy)
                ? ""
                : @" where sm.SocietyCode like concat('%',@srcby,'%') or sm.SocietyName like concat('%',@srcby,'%') or 
                isnull(fm.FarmerCode,nfm.FarmerCode) like concat('%',@srcby,'%') or 
                isnull(fm.FarmerNameEng,nfm.FarmerNameEng) like concat('%',@srcby,'%') or 
                isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) like concat('%',@srcby,'%') or ac.TagCode=@srcby",
                new Parameter("uid", System.Data.DbType.Int64, _currentUser?.Info?.Id),
                new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                new Parameter("utyp", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                new Parameter("clstatus", System.Data.DbType.Int32, (int)status),
                new Parameter("srcBy", System.Data.DbType.String, searchBy?.Trim()));
        }

        public ApiResponse GetAllForDevice(Pagination pagination, string societyCode, string searchBy,
            Enums.CalvingStatus status, DateTime? date, DateTime? todate, Enums.CattleTypeInDashboard cattleType, string aiWorkerCode, int? isSexedSemen = null)
        {
            pagination.SortBy = string.IsNullOrWhiteSpace(pagination.SortBy) ? "CalvingId desc" : pagination.SortBy.Trim();
            string filter = " and c.DoneDate between @from and @to";
            string sexedsemenfilter = $"{(isSexedSemen.HasValue && isSexedSemen.Value >= 0 ? " bm.IsSexedSemen=@isSexedSemen and " : "")}";
            if (isSexedSemen < 0)
            {
                isSexedSemen = null;
            }
            return Get<CalvingListModel>(pagination, status, false, default(string),
                string.IsNullOrWhiteSpace(searchBy)
                ? GetDateFilterForApp(date, todate, "where" + sexedsemenfilter, filter)
                : GetDateWithSearchFilterForApp(date, todate, "where" + sexedsemenfilter, filter),
                new Parameter("uid", System.Data.DbType.Int64, _currentUser?.Info?.Id),
                new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                new Parameter("utyp", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                new Parameter("clstatus", System.Data.DbType.Int32, (int)status),
                new Parameter("code", System.Data.DbType.AnsiString, societyCode),
                new Parameter("srcBy", System.Data.DbType.String, searchBy?.Trim()),
                new Parameter("from", System.Data.DbType.DateTime, date?.Date),
                new Parameter("to", System.Data.DbType.DateTime, todate?.Date.AddDays(1).AddMilliseconds(-2)),
                new Parameter("isSexedSemen", System.Data.DbType.Boolean, isSexedSemen),
                new Parameter("cattleType", System.Data.DbType.Int32, cattleType),
                new Parameter("uid1", System.Data.DbType.Int32, aiWorkerCode)
                );
        }

        public ApiResponse GetById(long id)
        {
            ApiResponse response = default(ApiResponse);
            CalvingViewModel result;
            using (var connection = Tenant.GetConnection(_httpContext)) // Ritesh - Tenant Support
            {
                _repoCalving = new Repository<CalvingModel>(connection);
                string strQuery = $@"select c.CalvingId,ac.AICallId,p.PDEntryId,ac.CallNumber,sm.SocietyCode,sm.SocietyName,isnull(fm.FarmerCode,nfm.FarmerCode) as FarmerCode,isnull(fm.FarmerNameEng,nfm.FarmerNameEng) as FarmerName,
                	isnull(ac.[Address],'')[Address],ac.IsRegisteredFarmer,ac.TagCode,isnull(lntypeCM.CultureValue,'')TagType,ctm.NDDBTypeId,isnull(ac.CattleTypeId,0)CattleTypeId,isnull(ct.LookupValue,'') as CattleType,bdm.BreedMasterId,bdm.[Name] as BreedType,
                    isnull(ac.AgeGroupTypeId,0)AgeGroupTypeId,isnull(ag.LookupValue,'')AgeGroup,bm.BullNo,isnull(ac.LactationNo,0)LactationNo,
                    ac.Cycle,ac.CloseDate,isnull(ac.NoOfAI,0)NoOfAIId,isnull(at.LookupValue,'')NoOfAI,isnull(ac.TotalAI,0)TotalAI,
                    isnull(ac.ContactName,'')ContactName,isnull(ac.ContactNo,'')ContactNo,c.AIWorkerMasterId,isnull(ac.IsReliver,0)IsReliver,
                    case when {(int)_header.Platform<Platform>()} in ({(int)Platform.Android},{(int)Platform.iOS}) and {_currentUser.Info.CultureId.ToInt32()}<>{(int)Enums.Culture.English} then sur.NameGuj else sur.NameEng end Reliver,
                    case when {(int)_header.Platform<Platform>()} in ({(int)Platform.Android},{(int)Platform.iOS}) and {_currentUser.Info.CultureId.ToInt32()}<>{(int)Enums.Culture.English} then su.NameGuj else su.NameEng end Worker,
                	p.DueDate as PdDueDate,p.CheckedDate as PdCheckedDate,p.StatusTypeId PdStatusId,isnull(ps.LookupValue,'')PdStatus,p.PregnancyDays,
                    case when {(int)_header.Platform<Platform>()} in ({(int)Platform.Android},{(int)Platform.iOS}) and {_currentUser.Info.CultureId.ToInt32()}<>{(int)Enums.Culture.English} then pdsu.NameGuj else pdsu.NameEng end PdDoneBy,p.CreatedOn PdDoneDate,
					c.DueDate,c.DoneDate,isnull(pc.LookupValue,'') as StatusType,c.Status,isnull(c.Latitude,'')  as Latitude,isnull(c.Longitude,'') as Longitude,c.Days,c.Place,c.NoOfCalf,bm.IsSexedSemen, isnull(c.CalvingRequestStatus,0) CalvingRequestStatus, c.CalvingImageId,c.CalvingTagImageId,c.IsTagImageEdited,c.ScannedTagCode
                    ,isnull(c.validateImage,'')validateImage,isnull(c.ValidateLatitude,'')ValidateLatitude,isnull(c.ValidateLongitude,'')ValidateLongitude
                    ,isnull(suaw.NameEng,'')ValidatePersonName,isnull(sr.RoleName,'')ValidatePersonRole
                    ,isnull(c.Remarks,'')Remarks,isnull(nae.SPAIWorker,'')SPAIWorker,isnull(lvcg.LookupValuesId,94)IsNaturalAI,isnull(lvc.LookupValuesId,94)IsOtherServiceProvider,isnull(cm.IsSexedSemenCalf,'')IsSexedSemenCalf
                    from Calving c with(nolock)
                inner join PDEntry p with(nolock) on p.PDEntryId=c.PDEntryId and c.CalvingId=@clid and c.IsActive=@act
                inner join AICall ac with(nolock) on ac.AICallId=p.AICallId
                inner join AIWorkerMaster aim with(nolock) on aim.AIWorkerMasterId=c.AIWorkerMasterId
                inner join SystemUser su with(nolock) on su.RefId=aim.AIWorkerMasterId and su.UserType=@utyp
                inner join SystemUser pdsu with(nolock) on pdsu.SystemUserId=p.CreatedBy
                inner join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
                left outer join BreedMaster bdm with(nolock) on bdm.BreedMasterId=ac.BreedMasterId                
                left outer join SocietyMaster sm with(nolock) on sm.SocietyMasterId = ac.SocietyMasterId
                left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId = ac.FarmerMasterId and ac.IsRegisteredFarmer = 1
                left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId = ac.FarmerMasterId and ac.IsRegisteredFarmer = 0
                left outer join LookupValues ct with(nolock) on ct.LookupValuesId=ac.CattleTypeId
                left outer join LookupValues ag with(nolock) on ag.LookupValuesId=ac.AgeGroupTypeId
                left outer join LookupValues at with(nolock) on at.LookupValuesId=ac.NoOfAI
                left outer join LookupValues ps with(nolock) on ps.LookupValuesId=p.StatusTypeId	
				left outer join LookupValues pc with(nolock) on pc.LookupValuesId=c.Status
                left outer join CattleMaster ctm with(nolock) on ctm.TagNo=ac.TagCode
                left outer join CattleMaster cm with(nolock) on cm.CattleMasterId = ac.CattleMasterId
			   left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ctm.NDDBTypeId
                left outer join CultureKey lntype on lntype.CultureKey = ln.CultureKey
				left outer join CultureKeyMapping lntypeCM on lntypeCM.CultureKeyId = lntype.CultureKeyId and lntypeCM.CultureId = @cultureId
                left outer join AIWorkerMaster awr with(nolock) on awr.AIWorkerMasterId=ac.ReliverId
			    left outer join SystemUser sur with(nolock) on sur.RefId=awr.AIWorkerMasterId and sur.UserType=@utyp
               left outer join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=ac.AIWorkerMasterId
                left outer join SystemUser suaw with(nolock) on c.UpdatedBy=suaw.SystemUserId
                left outer join SystemUserRole sr on sr.SystemUserRoleId=suaw.SystemUserRoleId
                left outer Join NaturalAiEntry nae with(nolock) on  nae.BreedingEntryID = c.CalvingId
                left outer join LookupValues lvcg with(nolock) on lvcg.LookupValuesId=nae.IsNaturalAI
		        left outer join LookupValues lvc with(nolock) on lvc.LookupValuesId = nae.IsOtherServiceProvider";

                result = _repoCalving.Query<CalvingViewModel, CalvingModel>(strQuery,
                    new Parameter("utyp", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                    new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                    new Parameter("clid", System.Data.DbType.Int64, id),
                     new Parameter("cultureId", System.Data.DbType.Int64, HeaderAccessor.Culture)).FirstOrDefault();
                if (!string.IsNullOrEmpty(result.CalvingImageId))
                {
                    PhotoImage objPhotoImageFile = _mongoService.DownloadFile<PhotoImage>(MongoDB.Bson.ObjectId.Parse(result.CalvingImageId)).GetAwaiter().GetResult();
                    if (objPhotoImageFile != null)
                    {
                        string base64String = Convert.ToBase64String(objPhotoImageFile.Contents, 0, objPhotoImageFile.Contents.Length);
                        result.CalvingImageBase64 = !string.IsNullOrEmpty(base64String) ? base64String : string.Empty;
                    }
                }
                else
                    result.CalvingImageBase64 = string.Empty;

                if (!string.IsNullOrEmpty(result.CalvingTagImageId))
                {
                    TagImage objTagImageFile = _mongoService.DownloadFileBlob<TagImage>(result.CalvingTagImageId).GetAwaiter().GetResult();
                    if (objTagImageFile.Contents != null)
                    {
                        string base64String = Convert.ToBase64String(objTagImageFile.Contents, 0, objTagImageFile.Contents.Length);
                        result.CalvingTagImageBase64 = !string.IsNullOrEmpty(base64String) ? base64String : string.Empty;
                    }
                }
                else
                    result.CalvingTagImageBase64 = string.Empty;
                if (!string.IsNullOrEmpty(result.validateImage))
                {
                    ValidateImage objValidateImageFile = _mongoService.DownloadFile<ValidateImage>(MongoDB.Bson.ObjectId.Parse(result.validateImage)).GetAwaiter().GetResult();
                    if (objValidateImageFile.Contents != null)
                    {
                        string base64String = Convert.ToBase64String(objValidateImageFile.Contents, 0, objValidateImageFile.Contents.Length);
                        result.validateImageBase64 = !string.IsNullOrEmpty(base64String) ? base64String : string.Empty;
                    }
                    else
                        result.validateImageBase64 = string.Empty;
                }
                else
                    result.validateImageBase64 = string.Empty;

                if (null != result)
                {
                    _repoCattle = new Repository<CattleMasterModel>(connection);

                    //result.Calfs = _repoCattle.ReadAllQuery(@"select CattleMasterId,isnull(TagNo,'')TagNo,Gender,DateOfBirth,[Status],isnull([Weight],0)[Weight]
                    //    from CattleMaster where CalvingId=@id",
                    //new { id })?.ToList();
                    string calfQuery = @"select ct.CattleMasterId,isnull(ct.TagNo,'')TagNo,isnull(lntypeCM.CultureValue,'')TagType,ct.NDDBTypeId,isnull(ct.NDDBTypeId,155)idType,ct.Gender,ct.DateOfBirth,ct.[Status],isnull(ct.[Weight],0)[Weight],ct.IsSexedSemenCalf
                                        from CattleMaster ct
                                        left outer join LookupValues ln with(nolock) on ln.LookupValuesId = ct.NDDBTypeId
                                        left outer join CultureKey lntype on lntype.CultureKey = ln.CultureKey
                                        left outer join CultureKeyMapping lntypeCM on lntypeCM.CultureKeyId = lntype.CultureKeyId and lntypeCM.CultureId =@cultureId
                                        where ct.CalvingId =@id";

                    result.Calfs = _repoCattle.ReadAllQuery(calfQuery,
                     new { id, cultureId = HeaderAccessor.Culture }).ToList();

                }
            }

            if (null == result)
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = _culture.GetString("msg_NoCalvingFound")
                };
            else
            {
                result.AIWorkerName = GetCultureWiseWorkerName(result);
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status200OK,
                    Data = result
                };
            }
            return response;
        }

        public ApiResponse Add(CalvingAddEditModel model)
        {
            ApiResponse response = default(ApiResponse);
            using (var connection = Tenant.GetConnection(_httpContext)) // Ritesh - Tenant Support
            {
                _repoCalving = new Repository<CalvingModel>(connection);

                if (_repoCalving.Exists(criteria: "PDEntryId=@pdid", parameters: new { pdid = model.PDEntryId }))
                {
                    response = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status409Conflict,
                        Message = _culture.GetString("msg_CalvingAlreadyDoneAIPD")
                    };
                }
                else
                {
                    //ReTaggingModel objReTagging;
                    //Repository<ReTaggingModel> _repoRetagging = new Repository<ReTaggingModel>(connection);

                    //objReTagging = _repoRetagging.ReadOne(criteria: "(isnull(CurrentTagNo,'')<>'' and CurrentTagNo=@tNo)",
                    //     parameters: new { tNo = model?.Calfs[0].TagNo });
                    //if (objReTagging == null)
                    if (_retagging.IsCurrentTagNoExists(model?.Calfs[0].TagNo))
                    {
                        response = new ApiResponse
                        {
                            Message = _culture.GetString("msg_LastTagNoExist"),//"Cattle Exist with Tag #{0}",
                            StatusCode = StatusCodes.Status409Conflict
                        };


                    }
                    else if (_retagging.IsNewTagPendingForApproval(model?.Calfs[0].TagNo))
                    {
                        response = new ApiResponse
                        {
                            Message = _culture.GetString("msg_RetaggingPending"),
                            StatusCode = StatusCodes.Status409Conflict
                        };
                    }
                    else
                    {
                        bool _proceed = true;
                        #region Save Calving Data
                        _repoCalving.BeginTransaction();
                        _repoCattle = new Repository<CattleMasterModel>(_repoCalving.Transaction);
                        _repoBull = new Repository<BullMasterModel>(_repoCalving.Transaction);
                        CalvingModel data = model.GetMapped<CalvingModel, CalvingAddEditModel>();

                        try
                        {

                            data.DueDate = data.DueDate.AppendTime();
                            data.DoneDate = data.DoneDate.AppendTime();
                            data.CreatedBy = _currentUser?.Info?.Id;
                            data.IsActive = true;
                            //data.CalvingRequestStatus = data.CalvingRequestStatus ?? (int)Enums.RequestStatus.NotChecked;
                            _repoCalving.Add(data);

                            var Sexedsemen = GetSexedSemenFlagFromAICall(_repoBull,data.CalvingId);


                            CattleMasterModel cattle = GetCattleByPdId(_repoCattle, model.PDEntryId);
                            if (null != cattle)
                            {
                                cattle.LastCalvingDate = data.DoneDate;
                                cattle.UpdatedBy = _currentUser?.Info?.Id;
                                cattle.UpdatedOn = DateTime.Now;
                                _repoCattle.Update(cattle, "MilkingStatus,LastCalvingDate");
                            }

                            if (null != model?.Calfs)
                            {
                                foreach (CattleMasterModel calf in model?.Calfs)
                                {
                                    calf.TagNo = string.IsNullOrWhiteSpace(calf.TagNo) ? null : calf.TagNo;
                                    calf.CalvingId = data.CalvingId;
                                    calf.SocietyMasterId = model.SocietyMasterId;
                                    calf.FarmerMasterId = model.FarmerMasterId;
                                    calf.IsRegisteredFarmer = model.IsRegisteredFarmer;
                                    calf.CattleTypeId = model.CattleTypeId;
                                    calf.BreedMasterId = model.BreedMasterId
                                        ?? GetCattleBreedByPdId(_repoCattle, model.PDEntryId);
                                    calf.StageTypeId = (int)Enums.StageType.Calf;
                                    calf.AgeGroupTypeId = (int)Enums.AgeGroupType.Calf;
                                    calf.MilkingStatus = (int)Enums.MilkingStatus.Neco;
                                    calf.LactationNos = 0;
                                    calf.EntryMode = (int)Enums.EntryMode.Auto;
                                    calf.NDDBTypeId = ((calf.NDDBTypeId ?? 0L) == 0L ? null : calf.NDDBTypeId);
                                    calf.CreatedBy = _currentUser?.Info?.Id;
                                    calf.IsActive = true;
                                    if (Sexedsemen == 1 && calf.Gender == 2)
                                    {
                                        calf.IsSexedSemenCalf = true;
                                    }
                                    _repoCattle.Add(calf, _columnsAdd);
                                }
                            }
                            _repoCalving.Commit();
                            response = new ApiResponse
                            {
                                StatusCode = StatusCodes.Status200OK,
                                Message = _culture.GetString("msg_CalvingSaved")
                            };
                        }
                        catch (Exception ex)
                        {
                            Log.Error(ex, "Error in Calving Add");
                            _proceed = false;
                            _repoCalving.Rollback();
                            response = new ApiResponse
                            {
                                StatusCode = StatusCodes.Status400BadRequest,
                                Message = _culture.GetString("msg_SomethingWentWrong")
                            };
                        }
                        #endregion

                        if (_proceed)
                        {

                            #region Send Notification to Farmer and AI Worker
                            if ((int)Enums.CalvingStatus.Abortion == data.Status)
                            {
                                int templateId = GetTemplateId(data.CalvingId);
                                TemplateDetailModel objTemplateDetail = _generalMaster.GetTemplateDetailById(templateId, (int)Enums.Culture.Gujarati);
                                response = SendNotification<ISmsServiceProvider, CalvingModel>(_repoCalving,
                                    _culture.GetString("msg_CalvingSaved"),
                                    objTemplateDetail.Message,
                                    new string[] { "contactno", "aiworkercontactno" },
                                    (Enums.AIAppSMSType)templateId,
                                    $"Abortion CalvingId: {data.CalvingId}",
                                    CalvingAbortionTemplateQuery, objTemplateDetail.TemplateNo,
                                    new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                                    new Parameter("clid", System.Data.DbType.Int64, data.CalvingId),
                                    new Parameter("uType", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker));
                            }
                            #endregion

                            #region Sync Calving Event and it's calfs to Pep
                            RunInBackground(()
                                => _pep.FeedEvent(Models.PepSystem.Enums.AnimalEvent.FeedCalvingEvent, data.CalvingId, Tenant.GetTenant(_httpContext)));
                            #endregion
                        }
                    }
                }
            }
            return response;
        }
        public ApiResponse AddMobile(CalvingAddEditModel model, IFormFile photoImage, IFormFile tagImage)
        {
            ApiResponse response = default(ApiResponse);
            using (var connection = Tenant.GetConnection(_httpContext)) // Ritesh - Tenant Support
            {
                _repoCalving = new Repository<CalvingModel>(connection);

                if (_repoCalving.Exists(criteria: "PDEntryId=@pdid", parameters: new { pdid = model.PDEntryId }))
                {
                    response = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status409Conflict,
                        Message = _culture.GetString("msg_CalvingAlreadyDoneAIPD")
                    };
                }
                else
                {
                    //ReTaggingModel objReTagging;
                    //Repository<ReTaggingModel> _repoRetagging = new Repository<ReTaggingModel>(connection);

                    //objReTagging = _repoRetagging.ReadOne(criteria: "(isnull(CurrentTagNo,'')<>'' and CurrentTagNo=@tNo)",
                    //     parameters: new { tNo = model?.Calfs[0].TagNo });
                    //if (objReTagging == null)
                    if ((model.Calfs != null) ? _retagging.IsCurrentTagNoExists(model?.Calfs[0].TagNo) : false)
                    {
                        response = new ApiResponse
                        {
                            Message = _culture.GetString("msg_LastTagNoExist"),//"Cattle Exist with Tag #{0}",
                            StatusCode = StatusCodes.Status409Conflict
                        };

                    }
                    else if ((model.Calfs != null) ? _retagging.IsNewTagPendingForApproval(model?.Calfs[0].TagNo) : false)
                    {
                        response = new ApiResponse
                        {
                            Message = _culture.GetString("msg_RetaggingPending"),
                            StatusCode = StatusCodes.Status409Conflict
                        };
                    }
                    else
                    {
                        bool _proceed = true;
                        #region Save Calving Data
                        _repoCalving.BeginTransaction();
                        _repoCattle = new Repository<CattleMasterModel>(_repoCalving.Transaction);
                        _repoNaturalAiEntry = new Repository<NaturalAiEntryModel>(_repoCalving.Transaction);

                        CalvingModel data = model.GetMapped<CalvingModel, CalvingAddEditModel>();

                        try
                        {
                            data.DueDate = data.DueDate.AppendTime();
                            data.DoneDate = data.DoneDate.AppendTime();
                            data.CreatedBy = _currentUser?.Info?.Id;
                            data.IsActive = true;
                            data.CalvingImageId = InsertPhotoImage(photoImage).GetAwaiter().GetResult();
                            Task.Delay(5000).GetAwaiter().GetResult();
                            data.CalvingTagImageId = InsertTagImage(tagImage).GetAwaiter().GetResult();
                            Task.Delay(5000).GetAwaiter().GetResult();
                            _repoCalving.Add(data);

                            if (_repoCalving.Exists(criteria: "CalvingId=@cId", parameters: new { cId = data.CalvingId }))
                            {
                                try
                                {
                                    #region Add In NaturalAI
                                    AddUpdateNaturalAi(_repoNaturalAiEntry, model, data.CalvingId);
                                    #endregion
                                }
                                catch (Exception ex)
                                {
                                    Log.Error(ex, "Error in NaturalAiEntry AddMobile");
                                    _proceed = false;
                                    _repoNaturalAiEntry.Rollback();
                                    response = new ApiResponse
                                    {
                                        StatusCode = StatusCodes.Status400BadRequest,
                                        Message = _culture.GetString("msg_SomethingWentWrong")
                                    };

                                }
                            }

                            CattleMasterModel cattle = GetCattleByPdId(_repoCattle, model.PDEntryId);
                            if (null != cattle)
                            {
                                cattle.LastCalvingDate = data.DoneDate;
                                cattle.UpdatedBy = _currentUser?.Info?.Id;
                                cattle.UpdatedOn = DateTime.Now;
                                //cattle.NDDBTypeId = model.NDDBTypeId;
                                _repoCattle.Update(cattle, "MilkingStatus,LastCalvingDate");
                            }

                            if (null != model?.Calfs)
                            {
                                foreach (CattleMasterModel calf in model?.Calfs)
                                {
                                    calf.TagNo = string.IsNullOrWhiteSpace(calf.TagNo) ? null : calf.TagNo;
                                    calf.CalvingId = data.CalvingId;
                                    calf.SocietyMasterId = model.SocietyMasterId;
                                    calf.FarmerMasterId = model.FarmerMasterId;
                                    calf.IsRegisteredFarmer = model.IsRegisteredFarmer;
                                    calf.CattleTypeId = model.CattleTypeId;
                                    calf.BreedMasterId = model.BreedMasterId
                                        ?? GetCattleBreedByPdId(_repoCattle, model.PDEntryId);
                                    calf.StageTypeId = (int)Enums.StageType.Calf;
                                    calf.AgeGroupTypeId = (int)Enums.AgeGroupType.Calf;
                                    calf.NDDBTypeId = ((calf.NDDBTypeId ?? 0L) == 0L ? null : calf.NDDBTypeId);
                                    calf.LactationNos = 0;
                                    calf.EntryMode = (int)Enums.EntryMode.Auto;
                                    calf.CreatedBy = _currentUser?.Info?.Id;
                                    calf.IsActive = true;
                                    if (model.IsSexedSemen == true && calf.Gender == 2)
                                    {
                                        calf.IsSexedSemenCalf = true;
                                    }
                                    _repoCattle.Add(calf, _columnsAdd);
                                }
                            }
                            _repoCalving.Commit();
                            response = new ApiResponse
                            {
                                StatusCode = StatusCodes.Status200OK,
                                Message = _culture.GetString("msg_CalvingSaved")
                            };
                        }
                        catch (Exception ex)
                        {
                            Log.Error(ex, "Error in Calving AddMobile");
                            _proceed = false;
                            _repoCalving.Rollback();
                            response = new ApiResponse
                            {
                                StatusCode = StatusCodes.Status400BadRequest,
                                Message = _culture.GetString("msg_SomethingWentWrong")
                            };
                        }
                        #endregion

                        if (_proceed)
                        {
                            #region Send Notification to Farmer and AI Worker
                            if ((int)Enums.CalvingStatus.Abortion == data.Status)
                            {
                                int templateId = GetTemplateId(data.CalvingId);
                                TemplateDetailModel objTemplateDetail = _generalMaster.GetTemplateDetailById(templateId, (int)Enums.Culture.Gujarati);
                                response = SendNotification<ISmsServiceProvider, CalvingModel>(_repoCalving,
                                    _culture.GetString("msg_CalvingSaved"),
                                   objTemplateDetail.Message,
                                    new string[] { "contactno", "aiworkercontactno" },
                                    (Enums.AIAppSMSType)templateId,
                                    $"Abortion CalvingId: {data.CalvingId}",
                                    CalvingAbortionTemplateQuery, objTemplateDetail.TemplateNo,
                                    new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                                    new Parameter("clid", System.Data.DbType.Int64, data.CalvingId),
                                    new Parameter("uType", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker));
                            }
                            #endregion

                            #region Sync Calving Event and it's calfs to Pep
                            RunInBackground(()
                                => _pep.FeedEvent(Models.PepSystem.Enums.AnimalEvent.FeedCalvingEvent, data.CalvingId, Tenant.GetTenant(_httpContext)));
                            #endregion
                        }
                    }
                }
            }
            return response;
        }

        public ApiResponse Update(long id, CalvingAddEditModel model)
        {
            ApiResponse response = default(ApiResponse);
            using (var connection = Tenant.GetConnection(_httpContext)) // Ritesh - Tenant Support
            {
                _repoCalving = new Repository<CalvingModel>(connection);

                CalvingModel objCalving = _repoCalving.ReadOne(id);
                CalvingViewModel result;

                if (default(CalvingModel) == objCalving)
                {
                    response = new ApiResponse
                    {
                        Data = false,
                        StatusCode = StatusCodes.Status404NotFound,
                        Message = _culture.GetString("msg_CalvingDetailsNotFound")
                    };
                }
                else if (!string.IsNullOrWhiteSpace(model.Calfs[0].TagNo) && (model.Calfs[0].NDDBTypeId == (int)Enums.NDDBType.NDDB) && !model.Calfs[0].TagNo.VerifyTagNo())
                {
                    response = new ApiResponse
                    {
                        Data = false,
                        StatusCode = StatusCodes.Status404NotFound,
                        Message = $"Invalid Tag #{model.Calfs[0].TagNo}"
                    };
                }
                else if (!string.IsNullOrWhiteSpace(model.Calfs[0].TagNo) && (model.Calfs[0].NDDBTypeId == (int)Enums.NDDBType.NonNDDB) && !model.Calfs[0].TagNo.VerifyNonNDDBTagNo())
                {
                    response = new ApiResponse
                    {
                        Data = false,
                        StatusCode = StatusCodes.Status404NotFound,
                        Message = $"Invalid Tag #{model.Calfs[0].TagNo}"
                    };
                }
                else if (!string.IsNullOrWhiteSpace(model.Calfs[0].TagNo) && (model.Calfs[0].NDDBTypeId.IsEmpty() || model.Calfs[0].NDDBTypeId.Value == 0) && !model.Calfs[0].TagNo.VerifyTagNo())
                {
                    response = new ApiResponse
                    {
                        Data = false,
                        StatusCode = StatusCodes.Status404NotFound,
                        Message = $"Invalid Tag #{model.Calfs[0].TagNo}"
                    };
                }
                //else if (!string.IsNullOrWhiteSpace(model.Calfs[0].TagNo) && !model.Calfs[0].TagNo.VerifyTagNo())
                //{
                //    response = new ApiResponse
                //    {
                //        Data = false,
                //        StatusCode = StatusCodes.Status404NotFound,
                //        Message = $"Invalid Tag #{model.Calfs[0].TagNo}"
                //    };
                //}
                else
                {
                    bool _proceed = model.AIWorkerMasterId != objCalving.AIWorkerMasterId;
                    _repoCattle = new Repository<CattleMasterModel>(connection);
                    List<CattleMasterModel> cattles = _repoCattle.ReadAll(
                        criteria: "CalvingId=@clid",
                        parameters: new { clid = id }).ToList();

                    #region get Calving data by ID 
                    _repoCalving = new Repository<CalvingModel>(connection);
                    string strQuery = $@"select CalvingImageId,* from  Calving where CalvingId=@CalvingId and IsActive=@act ";

                    result = _repoCalving.Query<CalvingViewModel, CalvingModel>(strQuery,
                        new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                        new Parameter("CalvingId", System.Data.DbType.Int64, id)).FirstOrDefault();
                    #endregion

                    #region Calving Data Update
                    _repoCalving.BeginTransaction();
                    _repoCattle = new Repository<CattleMasterModel>(_repoCalving.Transaction);
                    _repoNaturalAiEntry = new Repository<NaturalAiEntryModel>(_repoCalving.Transaction);
                    _repoBull = new Repository<BullMasterModel>(_repoCalving.Transaction);

                    bool calvingDateChanged = false;
                    try
                    {
                        model.CalvingId = id;
                        model.VersionNo = objCalving.VersionNo;
                        model.IsActive = objCalving.IsActive;
                        model.DueDate = model.DueDate.AppendTime(time: objCalving.DueDate.TimeOfDay);

                        calvingDateChanged = model.DoneDate.Date != objCalving.DoneDate.Date;
                        if (_currentUser.Info.RoleId.ToInt64().IsAdmin())
                            model.DoneDate = model.DoneDate.AppendTime(time: objCalving.DoneDate.TimeOfDay);
                        else
                            model.DoneDate = objCalving.DoneDate;

                        model.PDEntryId = result.PDEntryId;
                        model.AIWorkerMasterId = result.AIWorkerMasterId;
                        model.Status = result.Status;
                        model.Days = result.Days;
                        model.NoOfCalf = result.NoOfCalf;
                        model.Latitude = result.Latitude;
                        model.Longitude = result.Longitude;
                        model.CalvingImageId = result.CalvingImageId;
                        model.CalvingRequestStatus = result.CalvingRequestStatus;
                        model.CalvingTagImageId = result.CalvingTagImageId;
                        model.ScannedTagCode = result.ScannedTagCode;
                        model.IsTagImageEdited = result.IsTagImageEdited;
                        objCalving = model.GetMapped(objCalving);
                        objCalving.UpdatedBy = _currentUser?.Info?.Id;
                        _repoCalving.Update(objCalving);

                        var SexedSemen = GetSexedSemenFlagFromAICall(_repoBull, objCalving.CalvingId);

                        if (_repoCalving.Exists(criteria: "CalvingId=@cId", parameters: new { cId = objCalving.CalvingId }))
                        {
                            try
                            {
                                #region Add In NaturalAI
                                AddUpdateNaturalAi(_repoNaturalAiEntry, model, objCalving.CalvingId);
                                #endregion
                            }
                            catch (Exception ex)
                            {
                                Log.Error(ex, "Error in NaturalAiEntry AddMobile");
                                _proceed = false;
                                _repoNaturalAiEntry.Rollback();
                                response = new ApiResponse
                                {
                                    StatusCode = StatusCodes.Status400BadRequest,
                                    Message = _culture.GetString("msg_SomethingWentWrong")
                                };

                            }
                        }


                        if (calvingDateChanged && _currentUser.Info.RoleId.ToInt64().IsAdmin())
                        {
                            _repoCalving.ExecuteNonQuery(
                                $@"update cm set cm.LastCalvingDate = '{objCalving.DoneDate:yyyy-MM-dd}'
                                from Calving c
                                inner join PDEntry p on p.PDEntryId = c.PDEntryId and c.CalvingId={id}
                                inner join AICall a on a.AICallId = p.AICallId
                                inner join CattleMaster cm on cm.TagNo = a.TagCode");
                        }

                        if (null != model?.Calfs)
                        {
                            foreach (CattleMasterModel calf in model.Calfs)
                            {
                                CattleMasterModel cattle = cattles.Find(f => f.CattleMasterId == calf.CattleMasterId);
                                if (null != cattle)
                                {
                                    if (_currentUser.Info.RoleId.ToInt64().IsAdmin()) cattle.DateOfBirth = calf.DateOfBirth;
                                    cattle.Gender = calf.Gender;
                                    cattle.Status = calf.Status;
                                    cattle.Weight = 0 == (calf.Weight ?? 0) ? null : calf.Weight;
                                    cattle.TagNo = calf.TagNo ?? string.Empty;
                                    cattle.NDDBTypeId = ((calf.NDDBTypeId ?? 0L) == 0L ? null : calf.NDDBTypeId);
                                    cattle.UpdatedBy = _currentUser?.Info?.Id;
                                    if (SexedSemen == 1 && cattle.Gender == 2)
                                    {
                                        cattle.IsSexedSemenCalf = true;
                                    }
                                    else if (model.IsSexedSemen == true && cattle.Gender == 2)
                                    {
                                        cattle.IsSexedSemenCalf = true;
                                    }
                                }
                                _repoCattle.Update(cattle, _columnsUpdate);
                            }
                        }

                        _repoCalving.Commit();
                        response = new ApiResponse
                        {
                            Data = true,
                            StatusCode = StatusCodes.Status200OK,
                            Message = _culture.GetString("msg_CalvingChangesSaved")
                        };
                    }
                    catch
                    {
                        _proceed = false;
                        _repoCalving.Rollback();
                        response = new ApiResponse
                        {
                            StatusCode = StatusCodes.Status400BadRequest,
                            Message = _culture.GetString("msg_SomethingWentWrong")
                        };
                    }
                    #endregion

                    #region Send Notification of Changes to AI Worker
                    if (_proceed && (int)Enums.CalvingStatus.Abortion == objCalving.Status)
                    {
                        int templateId = GetTemplateId(model.CalvingId);
                        TemplateDetailModel objTemplateDetail = _generalMaster.GetTemplateDetailById(templateId, (int)Enums.Culture.Gujarati);
                        response = SendNotification<ISmsServiceProvider, CalvingModel>(_repoCalving,
                            _culture.GetString("msg_CalvingSaved"),
                            objTemplateDetail.Message,
                            new string[] { "aiworkercontactno" },
                            (Enums.AIAppSMSType)templateId,
                            $"Abortion Changes CalvingId: {objCalving.CalvingId}",
                            CalvingAbortionTemplateQuery, objTemplateDetail.TemplateNo,
                            new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                            new Parameter("clid", System.Data.DbType.Int64, objCalving.CalvingId),
                            new Parameter("uType", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker));
                    }
                    #endregion

                    #region Sync Calving Event and it's calfs to Pep
                    RunInBackground(()
                        => _pep.FeedEvent(Models.PepSystem.Enums.AnimalEvent.FeedCalvingEvent, objCalving.CalvingId, Tenant.GetTenant(_httpContext)));
                    #endregion
                }
            }
            return response;
        }

        public ApiResponse Delete(long id)
        {
            ApiResponse response = default(ApiResponse);
            using (var connection = Tenant.GetConnection(_httpContext)) // Ritesh - Tenant Support
            {
                _repoCalving = new Repository<CalvingModel>(connection);
                if (!_repoCalving.Exists(id))
                {
                    response = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status404NotFound,
                        Message = "Calving Not Found",
                        Data = false
                    };
                }
                else
                {
                    long calfs = _repoCalving.Count(
                        queryorCriteria: "select CattleMasterId from CattleMaster where CalvingId=@clid",
                        parameters: new { clid = id });

                    if (0 < calfs)
                        response = new ApiResponse()
                        {
                            Message = $"{calfs} Calf(s) Associeted with Calving",
                            StatusCode = StatusCodes.Status409Conflict
                        };
                    else
                    {
                        _repoCalving.Delete(id, _currentUser?.Info?.Id);
                        response = new ApiResponse
                        {
                            StatusCode = StatusCodes.Status200OK,
                            Message = "Calving Deleted",
                            Data = true
                        };
                    }
                }
            }
            return response;
        }

        public ApiResponse FillDoneBy()
        {
            List<OptionGroupFilter> data = DoneBy<OptionGroupFilter, CalvingModel>(
                Enums.SystemUserRole.AIWorker == _currentUser?.Role()
                ? CalvingDoneByWorkerQuery : GetCalvingDoneByQueryByDesignation(),
                (item) => item.OrderBy(o => o.Group).ToList(),
                new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                new Parameter("uid", System.Data.DbType.Int64, _currentUser.Info?.Id),
                new Parameter("aiworker", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                new Parameter("employee", System.Data.DbType.Int64, (int)Enums.UserType.Employee));
            return new ApiResponse
            {
                StatusCode = (data?.Any() ?? false) ? StatusCodes.Status200OK : StatusCodes.Status204NoContent,
                Data = data
            };
        }

        public ApiResponse FillDoneBy(string[] societyCodes)
        {

            CodeName<string, List<Parameter>> parameters = GetSqlPerameters(societyCodes,
               new Parameter("act", System.Data.DbType.Int32, (int)RecordStatusEnum.Active),
                new Parameter("uid", System.Data.DbType.Int64, _currentUser.Info?.Id),
               new Parameter("aiworker", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
               new Parameter("employee", System.Data.DbType.Int64, (int)Enums.UserType.Employee));

            List<OptionGroupFilter> data = DoneBy<OptionGroupFilter, PDEntryModel>(
                Enums.SystemUserRole.AIWorker == _currentUser?.Role()
                ? CalvingDoneByWorkerQuery : GetCalvingDoneByQueryByDesignation(parameters.Code),
                (item) => item.OrderBy(o => o.Group).ToList(),
                parameters.Name.ToArray());

            return new ApiResponse
            {
                StatusCode = (data?.Any() ?? false) ? StatusCodes.Status200OK : StatusCodes.Status204NoContent,
                Data = data
            };
        }

        public ApiResponse Report(Pagination pagination, CalvingReportFilter filter)
        {
            pagination.SortBy = string.IsNullOrWhiteSpace(pagination.SortBy) ? "c.CalvingId desc" : pagination.SortBy.Trim();
            Pagination<CalvingReportModel> data = GetReport<CalvingReportModel>(filter, pagination);

            ApiResponse response;
            if (null == data?.Data || 0 >= data?.Data.Count())
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = "No Calving Found"
                };
            else
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status200OK,
                    Data = data
                };
            return response;
        }

        public byte[] ReportExport(string sortBy, CalvingReportFilter filter, string name)
            => filter.AllowNonNDDBTag ? GetReport<CalvingReportExportModelAllowNddb>(filter, sortBy: sortBy).Data.ToExcel(name) : GetReport<CalvingReportExportModel>(filter, sortBy: sortBy).Data.ToExcel(name);

        //public ApiResponse DueReport(Pagination pagination, DueReportFilterModel reportFilter)
        //{
        //    ApiResponse response = default(ApiResponse);
        //    pagination.SortBy = string.IsNullOrWhiteSpace(pagination.SortBy) ? "SocietyName,CallDate" : pagination.SortBy.Trim();
        //    Pagination<CalvingDueReportModel> pgData = GetDueReport<CalvingDueReportModel>(reportFilter, pagination);

        //    if (null == pgData?.Data || 0 >= pgData?.Data.Count())
        //        response = new ApiResponse
        //        {
        //            StatusCode = StatusCodes.Status404NotFound,
        //            Message = "No Calving Due Found"
        //        };
        //    else
        //        response = new ApiResponse
        //        {
        //            StatusCode = StatusCodes.Status200OK,
        //            Data = pgData
        //        };
        //    return response;
        //}
        public ApiResponse GetDueReportData(Pagination pagination, DueReportFilterModel reportFilter)
        {
            ApiResponse response = default(ApiResponse);
            pagination.SortBy = string.IsNullOrWhiteSpace(pagination.SortBy) ? "SocietyName,CallDate" : pagination.SortBy.Trim();
            Pagination<CalvingDueReportModelSP> pgData = GetCalvingDueReport(reportFilter, pagination);

            if (null == pgData?.Data || 0 >= pgData?.Data.Count())
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = "No Calving Due Found"
                };
            else
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status200OK,
                    Data = pgData
                };
            return response;
        }

        //public byte[] DueReportExport(string sortBy, DueReportFilterModel reportFilter, string name)
        //    => reportFilter.AllowNonNDDBTag ? GetDueReport<CalvingDueReportExportModelAllowNddb>(reportFilter, sortBy: sortBy).Data
        //    .ToExcel(name, $"Date Range: {reportFilter.FromDate:dd/MM/yyyy} - {reportFilter.ToDate:dd/MM/yyyy}") : GetDueReport<CalvingDueReportExportModel>(reportFilter, sortBy: sortBy).Data
        //    .ToExcel(name, $"Date Range: {reportFilter.FromDate:dd/MM/yyyy} - {reportFilter.ToDate:dd/MM/yyyy}");

        public byte[] ExportDueReportData(string sortBy, DueReportFilterModel reportFilter, string name)
        {
            var result = GetCalvingDueReport(reportFilter,sortBy:sortBy);
            List<CalvingDueReportModelSP> calvingDueReportModelData = new List<CalvingDueReportModelSP>();
            if (result.Data != null)
            {
                calvingDueReportModelData = (List<CalvingDueReportModelSP>)result.Data;

            }

            var data = calvingDueReportModelData.ToList().Select(e => new
            {
                e.SocietyCode,
                e.Society,
                e.AIWorkerCode,
                e.AiWorkerName,
                e.AiWorkerStatus,
                e.Farmer,
                e.TagCode,
                e.CattleType,
                e.AgeGroup,
                e.LactationNo,
                e.BullNo,
                e.StrCallDate,
                e.TotalAI,
                e.StrDueDate,
                e.DueDays,
                e.SexedSemen
            });

            #region Export Exl
            FileInfo file = new FileInfo(Path.Combine(name));
            using (ExcelPackage package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Calving Due Report");

                int Cell = 1;
                worksheet.Cells.LoadFromCollection(data, true);
                worksheet.Cells[Cell, 1].Value = "Society Code";
                worksheet.Cells[Cell, 2].Value = "Society Name";
                worksheet.Cells[Cell, 3].Value = "AI Worker Code";
                worksheet.Cells[Cell, 4].Value = "AI Worker Name";
                worksheet.Cells[Cell, 5].Value = "AI Worker Status";
                worksheet.Cells[Cell, 6].Value = "Farmer Name";
                worksheet.Cells[Cell, 7].Value = "Tag Number";
                worksheet.Cells[Cell, 8].Value = "Cattle";
                worksheet.Cells[Cell, 9].Value = "Age Group";
                worksheet.Cells[Cell, 10].Value = "Lactation";
                worksheet.Cells[Cell, 11].Value = "Bull No";
                worksheet.Cells[Cell, 12].Value = "Last AI Date";
                worksheet.Cells[Cell, 13].Value = "Total AI";
                worksheet.Cells[Cell, 14].Value = "Calving Due";
                worksheet.Cells[Cell, 15].Value = "Due Days";
                worksheet.Cells[Cell, 16].Value = "Sexed Semen";
                worksheet.Cells[worksheet.Cells.Address].AutoFitColumns();

                var range = worksheet.Cells[1, 1, calvingDueReportModelData.Count() + 1, 16];
                range.Style.Border.Top.Style = range.Style.Border.Bottom.Style
                = range.Style.Border.Left.Style = range.Style.Border.Right.Style = ExcelBorderStyle.Thin;

                return package.GetAsByteArray();
            }
            #endregion Export Exl
        }


        public ApiResponse ValidateandUpdateCalvingRequest(RequestStatusModel calvingRequestStatusModel)
        {
            ApiResponse apiResponse = default(ApiResponse);

            using (var connection = Tenant.GetConnection(_httpContext)) // Ritesh - Tenant Support
            {
                _repoCalving = new Repository<CalvingModel>(connection);
                CalvingModel calvingModel = _repoCalving.ReadOne(calvingRequestStatusModel?.Id);
                if (calvingModel == null)
                {
                    apiResponse = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status404NotFound,
                        Message = _culture.GetString("msg_ReasonNotFound")
                    };
                }
                else
                {
                    calvingModel.UpdatedBy = _currentUser?.Info?.Id;
                    calvingModel.UpdatedOn = DateTime.Now;
                    calvingModel.IsActive = true;
                    calvingModel.CalvingRequestStatus = calvingRequestStatusModel?.RequestStatusId;
                    calvingModel.Longitude = string.IsNullOrWhiteSpace(calvingRequestStatusModel.Longitude) ? calvingModel.Longitude : calvingRequestStatusModel.Longitude;
                    calvingModel.Latitude = string.IsNullOrWhiteSpace(calvingRequestStatusModel.Latitude) ? calvingModel.Latitude : calvingRequestStatusModel.Latitude;
                    calvingModel.ValidatedOn = DateTime.Now;
                    calvingModel.ValidatedBy = (long?)(_currentUser?.Info?.Id);
                    _repoCalving.Update(calvingModel);

                    apiResponse = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status200OK,
                        Message = string.Format(_culture.GetString("msg_RequestStatus"), (Enums.RequestStatus)calvingModel.CalvingRequestStatus)
                    };
                }
            }
            return apiResponse;
        }
        public ApiResponse ValidateandUpdateCalvingRequest(RequestStatusModel calvingRequestStatusModel, IFormFile validateImage)
        {
            ApiResponse apiResponse = default(ApiResponse);

            using (var connection = Tenant.GetConnection(_httpContext)) // Ritesh - Tenant Support
            {
                _repoCalving = new Repository<CalvingModel>(connection);
                CalvingModel calvingModel = _repoCalving.ReadOne(calvingRequestStatusModel?.Id);
                if (calvingModel == null)
                {
                    apiResponse = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status404NotFound,
                        Message = _culture.GetString("msg_ReasonNotFound")
                    };
                }
                else
                {
                    calvingModel.UpdatedBy = _currentUser?.Info?.Id;
                    calvingModel.UpdatedOn = DateTime.Now;
                    calvingModel.IsActive = true;
                    calvingModel.CalvingRequestStatus = calvingRequestStatusModel?.RequestStatusId;
                    calvingModel.ValidateLongitude = calvingRequestStatusModel.Longitude;
                    calvingModel.ValidateLatitude = calvingRequestStatusModel.Latitude;
                    calvingModel.validateImage = InsertValidateImage(validateImage).GetAwaiter().GetResult();
                    calvingModel.ValidatedOn = DateTime.Now;
                    calvingModel.ValidatedBy = Convert.ToInt64(_currentUser?.Info?.Id);
                    _repoCalving.Update(calvingModel);

                    apiResponse = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status200OK,
                        Message = string.Format(_culture.GetString("msg_RequestStatus"), (Enums.RequestStatus)calvingModel.CalvingRequestStatus)
                    };
                }
            }
            return apiResponse;
        }

        public long GetSocietyIdOfCalving(long calvingId)
        {
            using (var connection = Tenant.GetConnection(_httpContext)) // Ritesh - Tenant Support
            {
                _repoAiCall = new Repository<AICallModel>(connection);
                string query = @" SELECT a.SocietyMasterId 
                            FROM Calving c 
							JOIN PDEntry p on p.PDEntryId = c.PDEntryId
                            JOIN AICall a on a.AICallId = p.AICallId 
                            WHERE c.CalvingId=@CalvingId";

                return _repoAiCall.Query<long>(query, new { CalvingId = calvingId });
            }
        }

        public long GetSocietyIdOfAICall(long aiCallId)
        {
            using (var connection = Tenant.GetConnection(_httpContext)) // Ritesh - Tenant Support
            {
                _repoAiCall = new Repository<AICallModel>(connection);
                string query = @"select c.SocietyMasterId from AICall a
                    inner join CattleMaster c on c.TagNo=a.TagCode and isnull(a.TagCode,'')<>''
                    where a.AICallId=@AICallId";

                return _repoAiCall.Query<long>(query, new { AICallId = aiCallId });
            }
        }

        public long GetSocietyIdOfSocietyCode(string societyCode)
        {
            using (var connection = Tenant.GetConnection(_httpContext)) // Ritesh - Tenant Support
            {
                _repoAiCall = new Repository<AICallModel>(connection);
                string query = @"select societymasterid from SocietyMaster where SocietyCode=@SocietyCode";

                return _repoAiCall.Query<long>(query, new { SocietyCode = societyCode });
            }
        }
        #endregion

        #region Private Methods
        private CodeName<string, List<Parameter>> GetSqlPerameters(string[] filter, params Parameter[] parameters)
        {
            CodeName<string, List<Parameter>> result = new CodeName<string, List<Parameter>>
            { Name = new List<Parameter>() };

            if (filter?.Any() ?? false)
            {
                result.Name.AddRange(filter.Select((s, i)
                    => new Parameter($"@p{i}", System.Data.DbType.AnsiString, s.TrimEnd(' ', '*'))));
                result.Code = string.Join(',', result.Name.Select(p => p.Key));
            }

            result.Name.AddRange(parameters);
            return result;
        }
        private ApiResponse Get<RType>(Pagination pagination, Enums.CalvingStatus status,
            bool isdue, string condition, string filter,
            params Parameter[] parameters)
            where RType : class, new()
        {
            ApiResponse response;
            Pagination<RType> pgData;
            string strQuery, countquery = string.Empty;
            switch (isdue)
            {
                case true:
                    strQuery = Enums.SystemUserRole.AIWorker == _currentUser?.Role()
                        ? string.Format(CalvingDueWorkerQuery, (int)Enums.UserType.AIWorker, condition)
                        : GetDueQueryByDesignation(condition);
                    countquery = Enums.SystemUserRole.AIWorker == _currentUser?.Role()
                        ? string.Format(CalvingDueWorkerCountQuery, (int)Enums.UserType.AIWorker, condition)
                        : GetDueCountQueryByDesignation(condition);
                    break;
                default:
                    strQuery = Enums.SystemUserRole.AIWorker == _currentUser?.Role()
                        ? string.Format(CalvingWorkerQuery, (int)Enums.UserType.AIWorker, CalvingStatusFilter(status))
                        : GetQueryByDesignation(status);
                    break;
            }

            using (var connection = Tenant.GetConnection(_httpContext)) // Ritesh - Tenant Support
            {
                _repoCalving = new Repository<CalvingModel>(connection);
                if (isdue)
                    pgData = _repoCalving.FetchReport<RType, CalvingModel>(300, $"{strQuery} {filter}", $"{countquery} {filter}",
                        pagination.SortBy, pagination.PageNo, pagination.RecordsPerPage, parameters);
                else
                    pgData = _repoCalving.FetchReport<RType, CalvingModel>(300, $"{strQuery} {filter}",
                        pagination.SortBy, pagination.PageNo, pagination.RecordsPerPage, parameters);
            }

            if (null == pgData?.Data || 0 >= pgData?.Data.Count())
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = isdue ? _culture.GetString("msg_NoCalvingDueFound") : _culture.GetString("msg_NoCalvingDoneFound")
                };
            else
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status200OK,
                    Data = pgData
                };
            return response;
        }

        private string CalvingStatusFilter(Enums.CalvingStatus status)
            => 0 == status ? "" : "and c.[Status]=@clstatus";

        private string GetDateFilterForApp(DateTime? date, DateTime? todate, string prefix, string filter)
            => $@"{prefix} sm.SocietyCode=(case when @code='0' then sm.SocietyCode else @code end) and ac.cattletypeid= case when @cattleType =0 then ac.cattletypeid else @cattleType end
                {(date.HasValue && todate.HasValue ? filter : "")}";

        private string GetDateWithSearchFilterForApp(DateTime? date, DateTime? todate, string prefix, string filter)
            => $@"{prefix} sm.SocietyCode=(case when @code='0' then sm.SocietyCode else @code end) and 
             
      ac.cattletypeid= case when @cattleType =0 then ac.cattletypeid else @cattleType end and
                (ac.TagCode=@srcby or 
                isnull(fm.FarmerCode,nfm.FarmerCode) like concat('%',case when @srcby <> '0' then @srcby else '' end,'%') or 
                isnull(fm.FarmerNameEng,nfm.FarmerNameEng) like concat('%',case when @srcby <> '0' then @srcby else '' end,'%') or
                isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) like concat('%',case when @srcby <> '0' then @srcby else '' end,'%'))
                {(date.HasValue && todate.HasValue ? filter : "")}";

        private string GetDueQueryByDesignation(string condition)
        {
            string result = default(string);
            switch (_currentUser.Designation())
            {
                case Enums.SystemUserDesignation.Employee:
                case Enums.SystemUserDesignation.SuperAdmin:
                    result = string.Format(CalvingDueEmployeeQuery, condition);
                    break;
                default:
                    result = string.Format(CalvingDueRestQuery, (int)Enums.UserType.Employee, condition);
                    break;
            }
            return result;
        }

        private string GetDueCountQueryByDesignation(string condition)
        {
            string result = default(string);
            switch (_currentUser.Designation())
            {
                case Enums.SystemUserDesignation.Employee:
                case Enums.SystemUserDesignation.SuperAdmin:
                    result = string.Format(CalvingDueEmployeeCountQuery, condition);
                    break;
                default:
                    result = string.Format(CalvingDueRestCountQuery, (int)Enums.UserType.Employee, condition);
                    break;
            }
            return result;
        }

        private string GetQueryByDesignation(Enums.CalvingStatus status)
        {
            string result = default(string);
            switch (_currentUser.Designation())
            {
                case Enums.SystemUserDesignation.SuperAdmin:
                case Enums.SystemUserDesignation.Employee:
                    result = string.Format(CalvingEmployeeQuery, CalvingStatusFilter(status));
                    break;
                default:
                    result = string.Format(CalvingRestQuery, (int)Enums.UserType.Employee, CalvingStatusFilter(status));
                    break;
            }
            return result;
        }

        private int GetTemplateId(long calvingId)
        {
            int result = default(int);
            switch ((Enums.CattleType)_repoCalving.Query<int>(
                @"select ac.CattleTypeId from Calving c with(nolock)
                inner join PDEntry p with(nolock) on p.PDEntryId=c.PDEntryId and c.CalvingId=@clid and c.IsActive=@act
                inner join AICall ac with(nolock) on ac.AICallId=p.AICallId",
                new { clid = calvingId, act = RecordStatusEnum.Active }))
            {
                case Enums.CattleType.Buffalo:
                    result = (int)Enums.Template.OnAbortionCalvingOfBuffalo;
                    break;
                default:
                    result = (int)Enums.Template.OnAbortionCalvingOfCow;
                    break;
            }
            return result;
        }

        private long? GetCattleBreedByPdId(Repository<CattleMasterModel> repository, long pdid)
        {
            return repository.Query<long?>(
                @"select ac.BreedMasterId from PDEntry p with(nolock)
                inner join AICall ac with(nolock) 
                on ac.AICallId=p.AICallId and p.PDEntryId=@pdid",
                new { pdid });
        }

        private CattleMasterModel GetCattleByPdId(Repository<CattleMasterModel> repository, long pdid)
        {
            return repository.ReadAllQuery(@"select ct.CattleMasterId,ct.CalvingId,ct.NickName,ct.TagNo,ct.CattleTypeId,ct.BreedMasterId,ct.StageTypeId,ct.Gender,ct.[Status],
                ct.DateOfBirth,ct.LactationNos,ct.Girth,ct.[Weight],ct.FarmerMasterId,ct.IsRegisteredFarmer,ct.SocietyMasterId,ct.EntryMode,
                ct.AgeGroupTypeId,ct.CreatedBy,ct.CreatedOn,ct.UpdatedBy,ct.UpdatedOn,ct.IsActive,ct.VersionNo,ct.LastCalvingDate,
                ct.PeakMilkYield,ct.SuperiorAnimal,ct.SuperiorAiSireNo,
                (case when (count(oldcl.CalvingId)<=0 and ct.AgeGroupTypeId=@heifer) or (isnull(ct.MilkingStatus,0)=0 and (count(oldcl.CalvingId)>0)) 
                	then @inmilk else ct.MilkingStatus end)MilkingStatus
                from PDEntry pd with(nolock)
                inner join AICall ac with(nolock) on ac.AICallId=pd.AICallId and pd.PDEntryId=@pdid
                inner join CattleMaster ct with(nolock) on ct.TagNo=ac.TagCode
                left outer join AICall oldac with(nolock) on oldac.TagCode=ac.TagCode
                left outer join PDEntry oldpd with(nolock) on oldpd.AICallId=oldac.AICallId
                left outer join Calving oldcl with(nolock) on oldcl.PDEntryId=oldpd.PDEntryId
                group by ct.CattleMasterId,ct.CalvingId,ct.NickName,ct.TagNo,ct.CattleTypeId,ct.BreedMasterId,ct.StageTypeId,ct.Gender,ct.[Status],
                ct.DateOfBirth,ct.LactationNos,ct.Girth,ct.[Weight],ct.FarmerMasterId,ct.IsRegisteredFarmer,ct.SocietyMasterId,ct.EntryMode,
                ct.AgeGroupTypeId,ct.CreatedBy,ct.CreatedOn,ct.UpdatedBy,ct.UpdatedOn,ct.IsActive,ct.VersionNo,ct.LastCalvingDate,ct.MilkingStatus,
                ct.PeakMilkYield,ct.SuperiorAnimal,ct.SuperiorAiSireNo",
                new { pdid, heifer = (int)Enums.AgeGroupType.Heifer, inmilk = (int)Enums.MilkingStatus.InMilk })?.FirstOrDefault();
        }

        private Pagination<TReport> GetReport<TReport>(CalvingReportFilter reportFilter,
            Pagination pagination = default(Pagination), string sortBy = default(string)) where TReport : class, new()
        {
            Pagination<TReport> pgData;

            List<Parameter> societies = reportFilter.SocietyCodes?.Select((s, i)
                   => new Parameter($"@sc{i}", System.Data.DbType.AnsiString, s.TrimEnd(' ', '*')))
                   ?.ToList() ?? new List<Parameter>();

            List<Parameter> bulls = reportFilter.BullMasterIds?.Select((b, i)
                  => new Parameter($"@b{i}", System.Data.DbType.Int64, b))
                  ?.ToList() ?? new List<Parameter>();

            List<Parameter> aiCounts = reportFilter.AICount?.Select((c, i)
                => new Parameter($"@c{i}", System.Data.DbType.Int64, c))?.ToList() ?? new List<Parameter>();

            List<Parameter> doneby = reportFilter.validationDoneBy?.Select((d, i)
            => new Parameter($"@doneby{i}", System.Data.DbType.Int64, d))
            ?.ToList() ?? new List<Parameter>();


            List<Parameter> parameters = new List<Parameter>
            {
                new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                new Parameter("uid", System.Data.DbType.Int64, _currentUser?.Info?.Id),
                new Parameter("FromDate", System.Data.DbType.DateTime, reportFilter.FromDate.Date),
                new Parameter("ToDate", System.Data.DbType.DateTime, reportFilter.ToDate.Date.AddDays(1).AddMilliseconds(-2)),
                new Parameter("CattleType", System.Data.DbType.Int32, (int)reportFilter.CattleType),
                new Parameter("utyp", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                new Parameter("employee", System.Data.DbType.Int32, (int)Enums.UserType.Employee),
                new Parameter("clStatus", System.Data.DbType.Int32, (int)reportFilter.CalvingStatus),
                new Parameter("doneby", System.Data.DbType.Int64, reportFilter.DoneBy),
                new Parameter("OptionYesNo", System.Data.DbType.Int32,reportFilter.OptionYesNo.ToString() == "Yes" ? 1: 0),
                new Parameter("RequestStatus", System.Data.DbType.Int32,(int)reportFilter.RequestStatus),
                new Parameter("CalfGender", System.Data.DbType.Int32, (int)reportFilter.CalfGender),
            };
            parameters.AddRange(societies);
            parameters.AddRange(bulls);
            parameters.AddRange(aiCounts);
            parameters.AddRange(doneby);

            using (var connection = Tenant.GetConnection(_httpContext)) // Ritesh - Tenant Support
            {
                _repoCalving = new Repository<CalvingModel>(connection);
                pgData = default(Pagination) == pagination
                    ? new Pagination<TReport>
                    {
                        Data = _repoCalving.FetchReport<TReport, CalvingModel>(300,
                            GetReportQuery(societies, bulls, aiCounts, doneby, reportFilter, Order(sortBy, "c.CalvingId desc"), true),
                            parameters.ToArray())
                    }
                    : _repoCalving.FetchReport<TReport, CalvingModel>(300,
                        GetReportQuery(societies, bulls, aiCounts, doneby, reportFilter, string.Empty),
                        pagination.SortBy, pagination.PageNo, pagination.RecordsPerPage, parameters.ToArray());
            }
            return pgData;
        }

        //private Pagination<TReport> GetDueReport<TReport>(DueReportFilterModel reportFilter,
        //    Pagination pagination = default(Pagination), string sortBy = default(string)) where TReport : class, new()
        //{
        //    Pagination<TReport> pgData;
        //    List<Parameter> societies = reportFilter.SocietyCodes?.Select((s, i)
        //           => new Parameter($"@sc{i}", System.Data.DbType.AnsiString, s.TrimEnd(' ', '*')))
        //           ?.ToList() ?? new List<Parameter>();
        //    List<Parameter> aiworkers = reportFilter.AIWorkerMasterIds?.Select((a, i)
        //           => new Parameter($"@aw{i}", System.Data.DbType.Int64, a))
        //           ?.ToList() ?? new List<Parameter>();
        //    List<Parameter> bulls = reportFilter.BullMasterIds?.Select((b, i)
        //          => new Parameter($"@b{i}", System.Data.DbType.Int64, b))
        //          ?.ToList() ?? new List<Parameter>();

        //    List<Parameter> parameters = new List<Parameter>
        //    {
        //        new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
        //        new Parameter("uid", System.Data.DbType.Int64, _currentUser?.Info?.Id),
        //        new Parameter("cStatus", System.Data.DbType.Int32, (int)Enums.CallStatus.Close),
        //        new Parameter("pregnant", System.Data.DbType.Int32, (int)Enums.PDStatus.Pregnant),
        //        new Parameter("uType", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
        //        new Parameter("live", System.Data.DbType.Int32, (int)Enums.CalfStatus.Live),
        //        new Parameter("FromDate", System.Data.DbType.DateTime, reportFilter.FromDate.Date),
        //        new Parameter("ToDate", System.Data.DbType.DateTime, reportFilter.ToDate.Date.AddDays(1).AddMilliseconds(-2)),
        //        new Parameter("cow", System.Data.DbType.Int32, (int)Enums.CattleType.Cow),
        //        new Parameter("cdays", System.Data.DbType.Int32, Constants.CowCalvingDueDays),
        //        new Parameter("employee", System.Data.DbType.Int32, (int)Enums.UserType.Employee),
        //        new Parameter("bdays", System.Data.DbType.Int32, Constants.BuffaloCalvingDueDays),
        //        new Parameter("CattleType", System.Data.DbType.Int32, (int)reportFilter.CattleType),
        //        new Parameter("OptionYesNo", System.Data.DbType.Int32,reportFilter.OptionYesNo.ToString() == "Yes" ? 1: 0),
        //    };
        //    parameters.AddRange(societies);
        //    parameters.AddRange(aiworkers);
        //    parameters.AddRange(bulls);

        //    using (var connection = Tenant.GetConnection(_httpContext)) // Ritesh - Tenant Support
        //    {
        //        _repoCalving = new Repository<CalvingModel>(connection);
        //        pgData = default(Pagination) == pagination
        //            ? new Pagination<TReport>
        //            {
        //                Data = _repoCalving.FetchReport<TReport, CalvingModel>(300,
        //                    GetDueReportQuery(societies, bulls, aiworkers, reportFilter, Order(sortBy, "Society,CallDate")),
        //                    parameters.ToArray())
        //            }
        //            : _repoCalving.FetchReport<TReport, CalvingModel>(300, GetDueReportQuery(societies, bulls, aiworkers, reportFilter, string.Empty),
        //                pagination.SortBy, pagination.PageNo, pagination.RecordsPerPage, parameters.ToArray());
        //    }
        //    return pgData;
        //}

        private Pagination<CalvingDueReportModelSP> GetCalvingDueReport(DueReportFilterModel reportFilter,
          Pagination pagination = default(Pagination), string sortBy = default(string))
        {
            Pagination<CalvingDueReportModelSP> pgData;
     
            using (var connection = Tenant.GetConnection(_httpContext)) // Ritesh - Tenant Support
            {
                _repoCalvingDueReportModel = new Repository<CalvingDueReportModelSP>(connection);
                var CalvingDueReportModelObj = new List<CalvingDueReportModelSP>();
                IList<SqlParameter> sqlParameters = new List<SqlParameter>();
                SqlParameter parameter;
                DataTable dt = new DataTable();

                dt.Columns.Add("ID", typeof(int));
                if (reportFilter.SocietyCodes != null)
                {
                    foreach (var id in reportFilter.SocietyCodes)
                    {
                        dt.Rows.Add(id);
                    }
                }
                parameter = new SqlParameter("@SocietyMasterIDs", SqlDbType.Structured);
                parameter.TypeName = "dbo.IntList";
                parameter.Value = dt;
                sqlParameters.Add(parameter);


                dt = new DataTable();
                dt.Columns.Add("ID", typeof(int));
                if (reportFilter.AIWorkerMasterIds != null)
                {
                    foreach (var id in reportFilter.AIWorkerMasterIds)
                    {
                        dt.Rows.Add(id);
                    }
                }
                parameter = new SqlParameter("@AIWorkerMasterIDs", SqlDbType.Structured);
                parameter.TypeName = "dbo.IntList";
                parameter.Value = dt;
                sqlParameters.Add(parameter);


                dt = new DataTable();
                dt.Columns.Add("ID", typeof(int));
                if (reportFilter.BullMasterIds != null)
                {
                    foreach (var id in reportFilter.BullMasterIds)
                    {
                        dt.Rows.Add(id);
                    }
                }
                parameter = new SqlParameter("@BullMasterIDs", SqlDbType.Structured);
                parameter.TypeName = "dbo.IntList";
                parameter.Value = dt;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@FromDate", SqlDbType.Date);
                parameter.Value = reportFilter.FromDate;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@ToDate", SqlDbType.Date);
                parameter.Value = reportFilter.ToDate;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@CTypeID", SqlDbType.Int);
                parameter.Value = reportFilter.CattleType;
                sqlParameters.Add(parameter);


                parameter = new SqlParameter("@IsSexedSemen", SqlDbType.Int);

                if (reportFilter.OptionYesNo.ToString().ToLower() == "yes")
                {
                    parameter.Value = 1;
                }
                else if (reportFilter.OptionYesNo.ToString().ToLower() == "no")
                {
                    parameter.Value = 0;
                }
                else
                {
                    parameter.Value = -1;

                }
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@SystemUserRoleID", SqlDbType.Int);
                parameter.Value = _currentUser?.Info?.RoleId;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@systemUserId", SqlDbType.BigInt);
                parameter.Value = _currentUser?.Info?.Id;
                sqlParameters.Add(parameter);

                if (default(Pagination) == pagination)
                {
                    parameter = new SqlParameter("@PageNo", SqlDbType.Int);
                    parameter.Value = 0;
                    sqlParameters.Add(parameter);

                    parameter = new SqlParameter("@PageSize", SqlDbType.Int);
                    parameter.Value = 0;
                    sqlParameters.Add(parameter);
                }
                else
                {
                    parameter = new SqlParameter("@PageNo", SqlDbType.Int);
                    parameter.Value = pagination.PageNo;
                    sqlParameters.Add(parameter);

                    parameter = new SqlParameter("@PageSize", SqlDbType.Int);
                    parameter.Value = pagination.RecordsPerPage;
                    sqlParameters.Add(parameter);
                }

             
                CalvingDueReportModelObj = _repoCalvingDueReportModel.ExecuteStoredProcedure("SP_GET_CalvingDue", sqlParameters).ToList();

                pgData = default(Pagination) == pagination ? new Pagination<CalvingDueReportModelSP>()
                {
                    Data = CalvingDueReportModelObj
                }
                :
                new Pagination<CalvingDueReportModelSP>
                {
                    Data = CalvingDueReportModelObj,
                    PageNo = pagination.PageNo,
                    RecordsPerPage = pagination.RecordsPerPage,
                    SortBy = pagination.SortBy,
                    TotalRecords = CalvingDueReportModelObj.Count() > 0 ? CalvingDueReportModelObj[0].TTotal : 0,
                };
               
            }
            return pgData;
        }

        private string GetReportQuery(List<Parameter> societies, List<Parameter> bulls, List<Parameter> aiCounts, List<Parameter> doneby, CalvingReportFilter filter, string sortBy, bool isExport = false)
        {
            string query = Enums.SystemUserRole.AIWorker == _currentUser?.Role()
                ? CalvingReportQueryByWorker(isExport, filter.AllowNonNDDBTag) : GetReportQueryByDesignation(isExport, filter.AllowNonNDDBTag);
            // if (filter.OptionYesNo != 0) { query += bulls.Count == 0 ? " where bm.IsSexedSemen=@OptionYesNo " : ""; }
            return string.Format(query, GetReportFilterQuery(filter), GetReportSocietyFilterQuery(societies), GetBullFilter(bulls, filter.OptionYesNo != Enums.OptionYesNo.NA), GetAICountFilter(aiCounts), GetGenderFilter(filter, bulls), GetValidateByFilter(doneby, filter), GetDateRangeFilter(filter), sortBy);
        }

        private string CalvingReportQueryByWorker(bool isExport, bool? AllowNDDBType)
            => isExport ? CalvingReportExportWorkerQuery : CalvingReportWorkerQuery;

        private string GetReportQueryByDesignation(bool isExport, bool? AllowNDDBType)
        {
            string result = default(string);
            switch (_currentUser.Designation())
            {
                case Enums.SystemUserDesignation.SuperAdmin:
                case Enums.SystemUserDesignation.Employee:
                    result = isExport ? CalvingReportExportEmployeeQuery : CalvingReportEmployeeQuery;
                    break;
                default:
                    result = isExport ? CalvingReportExportRestQuery : CalvingReportRestQuery;
                    break;
            }
            return result;
        }

        private string GetCalvingDoneByQueryByDesignation(string societyCodes = "")
        {
            string result = default(string);
            switch (_currentUser.Designation())
            {
                case Enums.SystemUserDesignation.SuperAdmin:
                case Enums.SystemUserDesignation.Employee:
                    result = CalvingDoneByEmployeeQuery;
                    break;
                default:
                    result = CalvingDoneByRestQuery;
                    break;
            }
            return string.Format(result, string.IsNullOrWhiteSpace(societyCodes)
                ? string.Empty : $"and sm.SocietyCode in ({societyCodes})");
        }

        private string GetReportFilterQuery(CalvingReportFilter filter)
        {
            string filterquery = string.Empty;
            if (filter.CattleType > 0) filterquery += " and ac.CattleTypeId=@CattleType";
            if (filter.CalvingStatus > 0) filterquery += " and c.[Status]=@clstatus";
            if (filter.DoneBy > 0) filterquery += " and c.CreatedBy=@doneby";
            if ((int)filter.RequestStatus > 0) filterquery += $" and isnull(c.CalvingRequestStatus,{(int)Enums.RequestStatus.NotChecked})= @RequestStatus";
            return filterquery;
        }


        private string GetReportSocietyFilterQuery(List<Parameter> societies)
            => (societies?.Any() ?? false) ? $"and sm.SocietyCode in ({string.Join(',', societies.Select(s => s.Key))})" : string.Empty;
        private string GetBullFilter(List<Parameter> data, bool isSexedSemen)
        {
            if (data?.Any() ?? false)
            {
                if (isSexedSemen)
                    return $"where bm.BullMasterId in ({string.Join(',', data.Select(b => b.Key))}) and bm.IsSexedSemen=@OptionYesNo";
                else
                    return $"where bm.BullMasterId in ({string.Join(',', data.Select(b => b.Key))})";
            }
            else if (isSexedSemen)
                return "where bm.IsSexedSemen=@OptionYesNo";

            return string.Empty;
        }
        //private string GetBullFilter(List<Parameter> data)
        //   => (data?.Any() ?? false) ? $"where bm.BullMasterId in ({string.Join(',', data.Select(b => b.Key))})" : string.Empty;
        private string GetAICountFilter(List<Parameter> aiCounts)
            => (aiCounts?.Any() ?? false) ? $" and aicount in ({string.Join(',', aiCounts.Select(b => b.Key))})" : string.Empty;

        private string GetValidateByFilter(List<Parameter> doneby, CalvingReportFilter filter)
        {
            if (doneby?.Any() ?? false)
            {
                if (filter.OptionYesNo == Enums.OptionYesNo.NA && filter.BullMasterIds == null)
                {
                    if (filter.CalfGender > 0)
                    {
                        return $"and c.ValidatedBy in ({string.Join(',', doneby.Select(b => b.Key))})  and c.CalvingRequestStatus!=0";
                    }
                    return $"where c.ValidatedBy in ({string.Join(',', doneby.Select(b => b.Key))})  and c.CalvingRequestStatus!=0";
                }
                if (filter.BullMasterIds == null)
                {
                    return $"and c.ValidatedBy in ({string.Join(',', doneby.Select(b => b.Key))})  and c.CalvingRequestStatus!=0";
                }
                if (filter.OptionYesNo != Enums.OptionYesNo.NA || filter.BullMasterIds.Length != 0 || filter.CalfGender > 0)
                {
                    return $"and c.ValidatedBy in ({string.Join(',', doneby.Select(b => b.Key))})  and c.CalvingRequestStatus!=0";
                }

                return $"where c.ValidatedBy in ({string.Join(',', doneby.Select(b => b.Key))}) and c.CalvingRequestStatus!=0";
            }
            return string.Empty;
        }
        //   private string GetGenderFilter(CalvingReportFilter filter, List<Parameter> data) => (filter.CalfGender > 0 ? ((data?.Any() ?? false) ? $" and ct.gender=@CalfGender" : $" where ct.gender=@CalfGender") : string.Empty);
        private string GetDateRangeFilter(CalvingReportFilter filter)
        {
            if (filter.DateRangeFilter == 0)
            {
                return $"and CONVERT(date, c.ValidatedOn) between CONVERT(date,@FromDate) and CONVERT(date,@ToDate)";
            }
            return $"and CONVERT(date, c.DoneDate) between CONVERT(date,@FromDate) and CONVERT(date,@ToDate)";
        }
        private string GetGenderFilter(CalvingReportFilter filter, List<Parameter> data)
        {
            if (filter.CalfGender > 0)
            {
                if ((data?.Any() ?? false))
                {
                    return $"and ct.gender = @CalfGender";
                }
                if (filter.OptionYesNo != Enums.OptionYesNo.NA)
                {
                    return $"and ct.gender = @CalfGender";
                }
                return $"where ct.gender = @CalfGender";
            }

            return string.Empty;
        }
        //private string GetDueReportQuery(List<Parameter> societies, List<Parameter> bulls, List<Parameter> aiworkers, DueReportFilterModel reportFilter, string sortBy)
        //{
        //    string query = Enums.SystemUserRole.AIWorker == _currentUser?.Role()
        //        ? CalvingDueReportWorkerQuery
        //        : GetDueReportQueryByDesignation();
        //    if (reportFilter.OptionYesNo != 0)
        //    {
        //        query += " and bl.IsSexedSemen=@OptionYesNo";
        //    }
        //    if (reportFilter.CattleType > 0) query += " and ac.CattleTypeId=@CattleType";
        //    return string.Format(query,
        //        Filter("and sm.SocietyCode in ({0})", string.Join(',', societies.Select(s => s.Value))),
        //        Filter("and aw.AIWorkerMasterId in ({0})", string.Join(',', aiworkers.Select(s => s.Value))),
        //        Filter("and bl.BullMasterId in ({0})", string.Join(',', bulls.Select(s => s.Value))),
        //    sortBy);

        //}

        //private string GetDueReportQueryByDesignation()
        //{
        //    string result = default(string);
        //    switch (_currentUser.Designation())
        //    {
        //        case Enums.SystemUserDesignation.SuperAdmin:
        //        case Enums.SystemUserDesignation.Employee:
        //            result = CalvingDueReportEmployeeQuery;
        //            break;
        //        default:
        //            result = CalvingDueReportRestQuery;
        //            break;
        //    }
        //    return result;
        //}

        private string GetCultureWiseWorkerName(CalvingViewModel result)
            => result.AIWorkerName = result.IsReliver
            ? $"{result.Reliver} ({string.Format(_culture.GetString("pfx_RelieverOf"), result.Worker)})"
            : result.Worker;


        public async Task<string> InsertPhotoImage(IFormFile photoImage)
        {
            if (null == photoImage)
                return string.Empty;
            try
            {
                var bytes = await GetBytes(photoImage);
                PhotoImage objPhotoImageFile = new PhotoImage();
                objPhotoImageFile.FileName = photoImage.FileName;
                objPhotoImageFile.FileSize = photoImage.Length;
                objPhotoImageFile.FileType = Path.GetExtension(photoImage.FileName);
                objPhotoImageFile.Contents = bytes;
                objPhotoImageFile.CreatedOn = DateTime.Now;

                var result = await _mongoService.UploadFile<PhotoImage>(objPhotoImageFile);
                Log.Error("CalvingImage FileSize-->" + objPhotoImageFile.FileSize);
                Log.Error("Calvngimage id-->" + result.ToString());
                return result.ToString();
            }
            catch (Exception ex)
            {
                Log.Error(ex, "InsertPhotoImage-->Calving-->");
                throw;
            }
        }
        public async Task<string> InsertTagImage(IFormFile tagImage)
        {
            if (null == tagImage)
                return string.Empty;
            try
            {
                var bytes = await GetBytes(tagImage);
                TagImage objTagImageFile = new TagImage();
                objTagImageFile.FileName = tagImage.FileName;
                objTagImageFile.FileSize = tagImage.Length;
                objTagImageFile.FileType = tagImage.ContentType; //Path.GetExtension(tagImage.FileName);
                objTagImageFile.Contents = bytes;
                objTagImageFile.CreatedOn = DateTime.Now;
                string result = await _mongoService.UploadFileBlob<TagImage>(objTagImageFile);
                Log.Error("CalvingTagimage FileSize-->" + objTagImageFile.FileSize);
                Log.Error("CalvingTagimage id-->" + result);
                return result;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "CalvingInsertTagImage-->");
                throw;
            }
        }
        public async Task<string> InsertValidateImage(IFormFile validateImage)
        {
            if (null == validateImage)
                return string.Empty;
            try
            {
                var bytes = await GetBytes(validateImage);
                ValidateImage objPhotoImageFile = new ValidateImage();
                objPhotoImageFile.FileName = validateImage.FileName;
                objPhotoImageFile.FileSize = validateImage.Length;
                objPhotoImageFile.FileType = Path.GetExtension(validateImage.FileName);
                objPhotoImageFile.Contents = bytes;
                objPhotoImageFile.CreatedOn = DateTime.Now;

                var result = await _mongoService.UploadFile<ValidateImage>(objPhotoImageFile);
                Log.Error("ValidateImage FileSize-->" + objPhotoImageFile.FileSize);
                Log.Error("Validateimage id-->" + result.ToString());
                return result.ToString();
            }
            catch (Exception ex)
            {
                Log.Error(ex, "InsertValidateImage-->Calving-->");
                throw;
            }
        }

        public async Task<byte[]> GetBytes(IFormFile formFile)
        {
            using (var memoryStream = new MemoryStream())
            {
                await formFile.CopyToAsync(memoryStream);
                return memoryStream.ToArray();
            }
        }

        public ApiResponse GetBullCalving(DateTime FromDate, DateTime ToDate)
        {

            var Region = Tenant.GetTenant(_httpContext).ShortCode;

            ApiResponse response;
            List<GetBullCalvingModel> pgData;

            using (var connection = Tenant.GetConnection(_httpContext))
            {
                pgData = new Repository<BullMasterModel>(connection)
                    .Query<GetBullCalvingModel, BullMasterModel>(
                    @"select bm.BullNo,count(*) as TotalCalving,
                      count(case  when lvcfg.LookupValue='Male' then 1  end) Male,
                      count(case  when lvcfg.LookupValue='Female' then 1  end) Female,
                      case  when @region='2021' then 'Anand' when @region='2012' then 'Kolkata' when @region='2011' then 'Maharastra' when @region='2005' then 'Bharuch' end as Region
                      from Calving c
	                  inner join PDEntry pd with(nolock) on pd.PDEntryId=c.PDEntryId 
	                  inner join AICall ac with(nolock) on ac.AICallId=pd.AICallId 
                      inner join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
	                  left outer join CattleMaster ct with(nolock) on c.CalvingId=ct.CalvingId
	                  inner join LookupValues lvcfg with(nolock) on lvcfg.LookupValuesId=ct.Gender
	                  where c.IsActive=1 and CONVERT(date, c.DoneDate) between CONVERT(date,@fromDate) and CONVERT(date,@toDate) and ac.BullMasterId 
	                  IN(select BullMasterId from AICall)
	                  group by bm.BullNo",

                     new Parameter("region", System.Data.DbType.String, Region),
                     new Parameter("fromDate", System.Data.DbType.DateTime, FromDate),
                     new Parameter("toDate", System.Data.DbType.DateTime, ToDate));

            }

            if (null == pgData || 0 >= pgData.Count())
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = "No Record Found",
                    Data = pgData
                };
            else
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status200OK,
                    Data = pgData
                };
            return response;
        }
        public ApiResponse GetAIWorkerCalving(DateTime FromDate, DateTime ToDate)
        {
            var Region = Tenant.GetTenant(_httpContext).ShortCode;

            ApiResponse response;
            List<GetBullCalvingModel> pgData;

            using (var connection = Tenant.GetConnection(_httpContext))
            {
                pgData = new Repository<BullMasterModel>(connection)
                    .Query<GetBullCalvingModel, BullMasterModel>(
                    @"select su.NameEng as AIWorkerName , count(*) as TotalCalving,
                      count(case  when lvcfg.LookupValue='Male' then 1  end) Male,
                      count(case  when lvcfg.LookupValue='Female' then 1  end) Female,
                      case  when @region='2021' then 'Anand' when @region='2012' then 'Kolkata' when @region='2011' then 'Maharastra' when @region='2005' then 'Bharuch' end as Region
                     from Calving c with(nolock)
					 inner join SystemUser su with(nolock) on su.SystemUserId=c.CreatedBy
	                  inner join CattleMaster ct with(nolock) on c.CalvingId=ct.CalvingId
	                  inner join LookupValues lvcfg with(nolock) on lvcfg.LookupValuesId=ct.Gender
	                  where CONVERT(date, c.DoneDate) between CONVERT(date,@fromDate) and CONVERT(date,@toDate)
	                  group by su.NameEng",

                     new Parameter("region", System.Data.DbType.String, Region),
                     new Parameter("fromDate", System.Data.DbType.DateTime, FromDate),
                     new Parameter("toDate", System.Data.DbType.DateTime, ToDate));

            }

            if (null == pgData || 0 >= pgData.Count())
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = "No Record Found",
                    Data = pgData
                };
            else
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status200OK,
                    Data = pgData
                };
            return response;
        }

        private void AddUpdateNaturalAi(Repository<NaturalAiEntryModel> repository, CalvingAddEditModel Model,
         long calvingid)
        {
            long naturalAiId;
            NaturalAiEntryModel objMaster = repository.ReadOne(
                criteria: "BreedingEntryId=@CId",
                parameters: new { CId = calvingid });
            if (objMaster == null)
            {
                objMaster = new NaturalAiEntryModel
                {
                    BreedingType = (int)Enums.BreedingType.Calving,
                    BreedingEntryID = calvingid,
                    IsNaturalAI = Model.IsNaturalAI,
                    IsOtherServiceProvider = Model.IsOtherServiceProvider,
                    SPAIWorker = Model.SPAIWorker,
                    CreatedBy = _currentUser?.Info?.Id,
                    IsActive = true
                };
                repository.Add(objMaster);
            }
            else
            {
                naturalAiId = objMaster.NaturalAiEntryId;
                NaturalAiEntryModel naturalAiEntry = repository.ReadOne(
                    criteria: "NaturalAiEntryId=@NId",
                    parameters: new { NId = naturalAiId });

                naturalAiEntry.IsNaturalAI = Model.IsNaturalAI;
                naturalAiEntry.IsOtherServiceProvider = Model.IsOtherServiceProvider;
                naturalAiEntry.SPAIWorker = Model.SPAIWorker;
                naturalAiEntry.UpdatedBy = _currentUser?.Info?.Id;
                naturalAiEntry.UpdatedOn = DateTime.Now;
                repository.Update(naturalAiEntry);

            }
        }
        public long GetSexedSemenFlagFromAICall(Repository<BullMasterModel> repository, long calvingId)
        {

            string query = @"select bm.IsSexedSemen from BullMaster bm
                                inner join AICall ac on ac.BullMasterId = bm.BullMasterId
                                inner join PDEntry pd on pd.AICallId = ac.AICallId
                                inner join Calving cl on cl.PDEntryId = pd.PDEntryId
                                where cl.CalvingId = @CalvingId";

            return repository.Query<long>(query, new { CalvingId = calvingId });

        }
        #endregion

        #region Duration Wise ComparisonReport
        public ApiResponse DurationWiseComparisonReport(Pagination pagination, DurationWiseComparisonReportFilterModel reportFilter)
        {
            pagination.SortBy = string.IsNullOrWhiteSpace(pagination.SortBy) ? "Aiworker No desc" : pagination.SortBy.Trim();
            return ReportResponse(() => GetReport(reportFilter, pagination), "Duration Wise Comparison Wise Data not found");

        }
        private ApiResponse ReportResponse<TReport>(Func<Pagination<TReport>> data, string nodatamessage)
        {
            ApiResponse response = default(ApiResponse);
            Pagination<TReport> pgData = data();
            if (null == pgData?.Data || 0 >= pgData?.Data.Count())
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = nodatamessage
                };
            else
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status200OK,
                    Data = pgData
                };
            return response;
        }
        private Pagination<DurationWiseComparisonReportModel> GetReport(DurationWiseComparisonReportFilterModel reportFilter,
        Pagination pagination = default(Pagination), string sortBy = default(string))
        {
            Pagination<DurationWiseComparisonReportModel> ComparisonWiseModelData;

            using (var connection = Tenant.GetConnection(_httpContext))
            {

                _repoComparisonReportModel = new Repository<DurationWiseComparisonReportModel>(connection);

                var ComparisonWiseModelObj = new List<DurationWiseComparisonReportModel>();

                IList<SqlParameter> sqlParameters = new List<SqlParameter>();
                SqlParameter parameter;
                DataTable dt = new DataTable();

                dt.Columns.Add("ID", typeof(int));
                if (reportFilter.SocietyCodes != null)
                {
                    foreach (var id in reportFilter.SocietyCodes)
                    {
                        dt.Rows.Add(id);
                    }
                }
                parameter = new SqlParameter("@SocietyMasterIDs", SqlDbType.Structured);
                parameter.TypeName = "dbo.IntList";
                parameter.Value = dt;
                sqlParameters.Add(parameter);


                dt = new DataTable();
                dt.Columns.Add("ID", typeof(int));
                if (reportFilter.AIWorkerMasterIds != null)
                {
                    foreach (var id in reportFilter.AIWorkerMasterIds)
                    {
                        dt.Rows.Add(id);
                    }
                }
                parameter = new SqlParameter("@AIWorkerMasterIDs", SqlDbType.Structured);
                parameter.TypeName = "dbo.IntList";
                parameter.Value = dt;
                sqlParameters.Add(parameter);


                parameter = new SqlParameter("@FromDateOld", SqlDbType.DateTime);
                parameter.Value = reportFilter.FromDateOld;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@ToDateOld", SqlDbType.DateTime);
                parameter.Value = reportFilter.ToDateOld.AddDays(1).AddMilliseconds(-2);
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@FromDateNew", SqlDbType.DateTime);
                parameter.Value = reportFilter.FromDateNew;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@ToDateNew", SqlDbType.DateTime);
                parameter.Value = reportFilter.ToDateNew.AddDays(1).AddMilliseconds(-2);
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@SystemUserRoleID", SqlDbType.Int);
                parameter.Value = _currentUser?.Info?.RoleId;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@systemUserId", SqlDbType.BigInt);
                parameter.Value = _currentUser?.Info?.Id;
                sqlParameters.Add(parameter);

                if (default(Pagination) == pagination)
                {
                    parameter = new SqlParameter("@PageNo", SqlDbType.Int);
                    parameter.Value = 0;
                    sqlParameters.Add(parameter);

                    parameter = new SqlParameter("@PageSize", SqlDbType.Int);
                    parameter.Value = 0;
                    sqlParameters.Add(parameter);
                }
                else
                {
                    parameter = new SqlParameter("@PageNo", SqlDbType.Int);
                    parameter.Value = pagination.PageNo;
                    sqlParameters.Add(parameter);

                    parameter = new SqlParameter("@PageSize", SqlDbType.Int);
                    parameter.Value = pagination.RecordsPerPage;
                    sqlParameters.Add(parameter);
                }


                ComparisonWiseModelObj = _repoComparisonReportModel.ExecuteStoredProcedure("SP_GET_DurationWiseComparisonData", sqlParameters).ToList();

                ComparisonWiseModelData = default(Pagination) == pagination ? new Pagination<DurationWiseComparisonReportModel>()
                {
                    Data = ComparisonWiseModelObj
                }
                : new Pagination<DurationWiseComparisonReportModel>()
                {

                    Data = ComparisonWiseModelObj,
                    PageNo = pagination.PageNo,
                    RecordsPerPage = pagination.RecordsPerPage,
                    SortBy = pagination.SortBy,
                    TotalRecords = ComparisonWiseModelObj.Count() > 0 ? ComparisonWiseModelObj[0].TTotal : 0
                };

            }
            return ComparisonWiseModelData;
        }

        public byte[] DurationWiseComparisonReportExport(string sortBy, DurationWiseComparisonReportFilterModel reportFilter, string name)
        {
            var result = GetReport(reportFilter, sortBy: sortBy);
            List<DurationWiseComparisonReportModel> reportModels = new List<DurationWiseComparisonReportModel>();
            if (result.Data != null)
            {
                reportModels = (List<DurationWiseComparisonReportModel>)result.Data;

            }

            #region Export Exl
            FileInfo file = new FileInfo(Path.Combine(name));
            using (ExcelPackage package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Duration Wise Comparison Report");
                // set header of excel

                int Cell = 3;
                //worksheet.Cells.LoadFromCollection(data, true);

                //OldData,New Data,Difference
                worksheet.Cells["A1:C1"].Merge = true;
                worksheet.Cells["D1:V1"].Merge = true;
                worksheet.Cells["W1:AO1"].Merge = true;
                worksheet.Cells["AP1:BH1"].Merge = true;

                //Other
                worksheet.Cells["A2:C2"].Merge = true;
                worksheet.Cells["D2:P2"].Merge = true;
                worksheet.Cells["W2:AI2"].Merge = true;
                worksheet.Cells["AP2:BB2"].Merge = true;

                //Type of Calving Merge
                worksheet.Cells["Q2:V2"].Merge = true;
                worksheet.Cells["AJ2:AO2"].Merge = true;
                worksheet.Cells["BC2:BH2"].Merge = true;

                //Merge Column Assign Blank
                worksheet.Cells[1, 1].Value = "";
                worksheet.Cells[2, 1].Value = "";
                worksheet.Cells[2, 4].Value = "";
                worksheet.Cells[2, 23].Value = "";
                worksheet.Cells[2, 42].Value = "";

                //Old Data Header
                worksheet.Cells[1, 4].Value = "Old Data";
                worksheet.Cells[1, 4].Style.Font.Bold = true;
                worksheet.Cells[1, 4].Style.Font.Size = 14;
                worksheet.Cells[1, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[1, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[1, 4].Style.Fill.BackgroundColor.SetColor(Color.White);
                worksheet.Cells[1, 4].Style.Font.Color.SetColor(Color.Black);
                //New Data Header
                worksheet.Cells[1, 23].Value = "New Data";
                worksheet.Cells[1, 23].Style.Font.Bold = true;
                worksheet.Cells[1, 23].Style.Font.Size = 14;
                worksheet.Cells[1, 23].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[1, 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[1, 23].Style.Fill.BackgroundColor.SetColor(Color.White);
                worksheet.Cells[1, 23].Style.Font.Color.SetColor(Color.Black);
                //Difference Header
                worksheet.Cells[1, 42].Value = "Difference";
                worksheet.Cells[1, 42].Style.Font.Bold = true;
                worksheet.Cells[1, 42].Style.Font.Size = 14;
                worksheet.Cells[1, 42].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[1, 42].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[1, 42].Style.Fill.BackgroundColor.SetColor(Color.White);
                worksheet.Cells[1, 42].Style.Font.Color.SetColor(Color.Black);
                //Type Of Calving Header
                worksheet.Cells[2, 17].Value = "Type Of Calving";
                worksheet.Cells[2, 17].Style.Font.Bold = true;
                worksheet.Cells[2, 17].Style.Font.Size = 12;
                worksheet.Cells[2, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[2, 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[2, 17].Style.Fill.BackgroundColor.SetColor(Color.White);
                worksheet.Cells[2, 17].Style.Font.Color.SetColor(Color.Black);

                worksheet.Cells[2, 36].Value = "Type Of Calving";
                worksheet.Cells[2, 36].Style.Font.Bold = true;
                worksheet.Cells[2, 36].Style.Font.Size = 12;
                worksheet.Cells[2, 36].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[2, 36].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[2, 36].Style.Fill.BackgroundColor.SetColor(Color.White);
                worksheet.Cells[2, 36].Style.Font.Color.SetColor(Color.Black);

                worksheet.Cells[2, 55].Value = "Type Of Calving";
                worksheet.Cells[2, 55].Style.Font.Bold = true;
                worksheet.Cells[2, 55].Style.Font.Size = 12;
                worksheet.Cells[2, 55].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[2, 55].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[2, 55].Style.Fill.BackgroundColor.SetColor(Color.White);
                worksheet.Cells[2, 55].Style.Font.Color.SetColor(Color.Black);
                //Final Bind Data

                worksheet.Cells[Cell, 1].Value = "Society Code";
                worksheet.Cells[Cell, 2].Value = "Society Name";
                worksheet.Cells[Cell, 3].Value = "AI Worker";
                worksheet.Cells[Cell, 4].Value = "First AI";
                worksheet.Cells[Cell, 5].Value = "24 Hrs Repeat AI";
                worksheet.Cells[Cell, 6].Value = "Repeat AI";
                worksheet.Cells[Cell, 7].Value = "Total SemenDose Used";
                worksheet.Cells[Cell, 8].Value = "Total AI";
                worksheet.Cells[Cell, 9].Value = "Pregnant First AI";
                worksheet.Cells[Cell, 10].Value = "Pregnant 24 Hrs Repeat AI";
                worksheet.Cells[Cell, 11].Value = "Pregnant  Repeat AI";
                worksheet.Cells[Cell, 12].Value = "Total Pregnant";
                worksheet.Cells[Cell, 13].Value = "Empty";
                worksheet.Cells[Cell, 14].Value = "Total Calving";
                worksheet.Cells[Cell, 15].Value = "Calving Male";
                worksheet.Cells[Cell, 16].Value = "Calving Female";
                worksheet.Cells[Cell, 17].Value = "Normal";
                worksheet.Cells[Cell, 18].Value = "Abortion";
                worksheet.Cells[Cell, 19].Value = "False PD";
                worksheet.Cells[Cell, 20].Value = "Force Termination";
                worksheet.Cells[Cell, 21].Value = "Premature Calving";
                worksheet.Cells[Cell, 22].Value = "Dystocia";
                worksheet.Cells[Cell, 23].Value = "First AI";
                worksheet.Cells[Cell, 24].Value = "24 Hrs Repeat AI";
                worksheet.Cells[Cell, 25].Value = "Repeat AI";
                worksheet.Cells[Cell, 26].Value = "Total SemenDose Used";
                worksheet.Cells[Cell, 27].Value = "Total AI";
                worksheet.Cells[Cell, 28].Value = "Pregnant First AI";
                worksheet.Cells[Cell, 29].Value = "Pregnant 24 Hrs Repeat AI";
                worksheet.Cells[Cell, 30].Value = "Pregnant Repeat AI";
                worksheet.Cells[Cell, 31].Value = "Total Pregnant";
                worksheet.Cells[Cell, 32].Value = "Empty";
                worksheet.Cells[Cell, 33].Value = "Total Calving";
                worksheet.Cells[Cell, 34].Value = "Calving Male";
                worksheet.Cells[Cell, 35].Value = "Calving Female";
                worksheet.Cells[Cell, 36].Value = "Normal";
                worksheet.Cells[Cell, 37].Value = "Abortion";
                worksheet.Cells[Cell, 38].Value = "False PD";
                worksheet.Cells[Cell, 39].Value = "Force Termination";
                worksheet.Cells[Cell, 40].Value = "Premature Calving";
                worksheet.Cells[Cell, 41].Value = "Dystocia";
                worksheet.Cells[Cell, 42].Value = "First AI";
                worksheet.Cells[Cell, 43].Value = "24 Hrs Repeat AI";
                worksheet.Cells[Cell, 44].Value = "Repeat AI";
                worksheet.Cells[Cell, 45].Value = "Total SemenDose Used";
                worksheet.Cells[Cell, 46].Value = "Total AI";
                worksheet.Cells[Cell, 47].Value = "Pregnant First AI";
                worksheet.Cells[Cell, 48].Value = "Pregnant 24 Hrs Repeat AI";
                worksheet.Cells[Cell, 49].Value = "Pregnant Repeat AI";
                worksheet.Cells[Cell, 50].Value = "Total Pregnant";
                worksheet.Cells[Cell, 51].Value = "Empty";
                worksheet.Cells[Cell, 52].Value = "Total Calving";
                worksheet.Cells[Cell, 53].Value = "Calving Male";
                worksheet.Cells[Cell, 54].Value = "Calving Female";
                worksheet.Cells[Cell, 55].Value = "Normal";
                worksheet.Cells[Cell, 56].Value = "Abortion";
                worksheet.Cells[Cell, 57].Value = "False PD";
                worksheet.Cells[Cell, 58].Value = "Force Termination";
                worksheet.Cells[Cell, 59].Value = "Premature Calving";
                worksheet.Cells[Cell, 60].Value = "Dystocia";


                for (int index = 3; index <= reportModels.Count + 2; index++)
                {

                    worksheet.Cells[index + 1, 1].Value = reportModels[index - 3].SocietyCode;
                    worksheet.Cells[index + 1, 2].Value = reportModels[index - 3].SocietyName;
                    worksheet.Cells[index + 1, 3].Value = reportModels[index - 3].AiWorker;
                    worksheet.Cells[index + 1, 4].Value = reportModels[index - 3].FirstAIold;
                    worksheet.Cells[index + 1, 5].Value = reportModels[index - 3].HrsRepeatAIold;
                    worksheet.Cells[index + 1, 6].Value = reportModels[index - 3].RepeatAIold;
                    worksheet.Cells[index + 1, 7].Value = reportModels[index - 3].TotalSemenDoseUsedold;
                    worksheet.Cells[index + 1, 8].Value = reportModels[index - 3].TotalAIold;
                    worksheet.Cells[index + 1, 9].Value = reportModels[index - 3].PregnentWithFirstAiold;
                    worksheet.Cells[index + 1, 10].Value = reportModels[index - 3].PregnentWithHrsRepeatAiold;
                    worksheet.Cells[index + 1, 11].Value = reportModels[index - 3].PregnentWithRepeatAiold;
                    worksheet.Cells[index + 1, 12].Value = reportModels[index - 3].TotalPregnentold;
                    worksheet.Cells[index + 1, 13].Value = reportModels[index - 3].Emptyold;
                    worksheet.Cells[index + 1, 14].Value = reportModels[index - 3].TotalCalvingold;
                    worksheet.Cells[index + 1, 15].Value = reportModels[index - 3].Maleold;
                    worksheet.Cells[index + 1, 16].Value = reportModels[index - 3].Femaleold;
                    worksheet.Cells[index + 1, 17].Value = reportModels[index - 3].Normalold;
                    worksheet.Cells[index + 1, 18].Value = reportModels[index - 3].Abortionold;
                    worksheet.Cells[index + 1, 19].Value = reportModels[index - 3].FalsePDold;
                    worksheet.Cells[index + 1, 20].Value = reportModels[index - 3].ForceTerminationold;
                    worksheet.Cells[index + 1, 21].Value = reportModels[index - 3].PrematureCalvingold;
                    worksheet.Cells[index + 1, 22].Value = reportModels[index - 3].Dystociaold;
                    worksheet.Cells[index + 1, 23].Value = reportModels[index - 3].FirstAInew;
                    worksheet.Cells[index + 1, 24].Value = reportModels[index - 3].HrsRepeatAInew;
                    worksheet.Cells[index + 1, 25].Value = reportModels[index - 3].RepeatAInew;
                    worksheet.Cells[index + 1, 26].Value = reportModels[index - 3].TotalSemenDoseUsednew;
                    worksheet.Cells[index + 1, 27].Value = reportModels[index - 3].TotalAInew;
                    worksheet.Cells[index + 1, 28].Value = reportModels[index - 3].PregnentWithFirstAinew;
                    worksheet.Cells[index + 1, 29].Value = reportModels[index - 3].PregnentWithHrsRepeatAinew;
                    worksheet.Cells[index + 1, 30].Value = reportModels[index - 3].PregnentWithRepeatAinew;
                    worksheet.Cells[index + 1, 31].Value = reportModels[index - 3].TotalPregnentnew;
                    worksheet.Cells[index + 1, 32].Value = reportModels[index - 3].Emptynew;
                    worksheet.Cells[index + 1, 33].Value = reportModels[index - 3].TotalCalvingnew;
                    worksheet.Cells[index + 1, 34].Value = reportModels[index - 3].Malenew;
                    worksheet.Cells[index + 1, 35].Value = reportModels[index - 3].Femalenew;
                    worksheet.Cells[index + 1, 36].Value = reportModels[index - 3].Normalnew;
                    worksheet.Cells[index + 1, 37].Value = reportModels[index - 3].Abortionnew;
                    worksheet.Cells[index + 1, 38].Value = reportModels[index - 3].FalsePDnew;
                    worksheet.Cells[index + 1, 39].Value = reportModels[index - 3].ForceTerminationnew;
                    worksheet.Cells[index + 1, 40].Value = reportModels[index - 3].PrematureCalvingnew;
                    worksheet.Cells[index + 1, 41].Value = reportModels[index - 3].Dystocianew;
                    worksheet.Cells[index + 1, 42].Value = reportModels[index - 3].FirstAIDiff;
                    worksheet.Cells[index + 1, 43].Value = reportModels[index - 3].HrsRepeatAIDiff;
                    worksheet.Cells[index + 1, 44].Value = reportModels[index - 3].RepeatAIDiff;
                    worksheet.Cells[index + 1, 45].Value = reportModels[index - 3].TotalSemenDoseUsedDiff;
                    worksheet.Cells[index + 1, 46].Value = reportModels[index - 3].TotalAIDiff;
                    worksheet.Cells[index + 1, 47].Value = reportModels[index - 3].PregnentWithFirstAiDiff;
                    worksheet.Cells[index + 1, 48].Value = reportModels[index - 3].PregnentWithHrsRepeatAiDiff;
                    worksheet.Cells[index + 1, 49].Value = reportModels[index - 3].PregnentWithRepeatAiDiff;
                    worksheet.Cells[index + 1, 50].Value = reportModels[index - 3].TotalPregnentDiff;
                    worksheet.Cells[index + 1, 51].Value = reportModels[index - 3].EmptyDiff;
                    worksheet.Cells[index + 1, 52].Value = reportModels[index - 3].TotalCalvingDiff;
                    worksheet.Cells[index + 1, 53].Value = reportModels[index - 3].MaleDiff;
                    worksheet.Cells[index + 1, 54].Value = reportModels[index - 3].FemaleDiff;
                    worksheet.Cells[index + 1, 55].Value = reportModels[index - 3].NormalDiff;
                    worksheet.Cells[index + 1, 56].Value = reportModels[index - 3].AbortionDiff;
                    worksheet.Cells[index + 1, 57].Value = reportModels[index - 3].FalsePDDiff;
                    worksheet.Cells[index + 1, 58].Value = reportModels[index - 3].ForceTerminationDiff;
                    worksheet.Cells[index + 1, 59].Value = reportModels[index - 3].PrematureCalvingDiff;
                    worksheet.Cells[index + 1, 60].Value = reportModels[index - 3].DystociaDiff;
                }
                worksheet.Cells[worksheet.Cells.Address].AutoFitColumns();

                var range = worksheet.Cells[1, 1, reportModels.Count() + 3, 60];
                range.Style.Border.Top.Style = range.Style.Border.Bottom.Style
                = range.Style.Border.Left.Style = range.Style.Border.Right.Style = ExcelBorderStyle.Thin;

                return package.GetAsByteArray();
            }
            #endregion Export Exl
        }
        #endregion
    }
}


