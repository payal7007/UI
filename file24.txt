using AI.Models;
using AI.Services.PepIntegrationService;
using AI.Services.Tracing;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Options;
using Prompt.Infrastructure;
using Prompt.Infrastructure.AMCS;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Vega;
using Newtonsoft.Json;
using Request = Prompt.Infrastructure;
using System.Threading.Tasks;
using Serilog;
using AI.Services.ReTagging;
using AI.Models.CustomModel;
using System.Data;
using System.Data.SqlClient;
using OfficeOpenXml.Style;
using OfficeOpenXml;
using System.Drawing;
using System.Net.Http;

namespace AI.Services
{
    public class AICall : CommonService, IAICall
    {
        private Repository<AIReasonModel> _repoAiReason { get; set; }
        private Repository<FarmerMasterModel> _repoFarmer { get; set; }
        private Repository<NonRegisteredFarmerMasterModel> _repoNonFarmer { get; set; }
        private Repository<SocietyMasterModel> _repoSociety { get; set; }
        private Repository<AICallModel> _repoAiCall { get; set; }
        private Repository<CattleMasterModel> _repoCattleMaster { get; set; }
        public Repository<AISummaryReportModel> _repoAISummaryReportData { get; set; }
        public Repository<AIReportModel> _repoAIReportData { get; set; }
        private Repository<AIDataModel> _repoAIData { get; set; }
        private Repository<SystemSettingsModel> _repoSystemSetting { get; set; }

        private readonly IGeneralMaster _generalMaster;
        private readonly Request.Platform _platform;
        private readonly IHeaderAccessor _header;
        private readonly ICulture _culture;
        private readonly IPepIntegrationService _pep;
        private readonly IMongoService _mongoService;
        private readonly IReTagging _retagging;
        private readonly IHeaderAccessor HeaderAccessor;

        private readonly IHttpContextAccessor _httpContext;
        public readonly JsonSerializerSettings _serializerSettings;

        public AICall(IHttpContextAccessor httpContext, ICurrentUser currentUser, ISmsService notifier, IHostingEnvironment env,
            IGeneralMaster generalMaster, IHeaderAccessor header, ICulture culture,
            IPepIntegrationService pep, IMongoService mongoService, IReTagging retagging,
            IHttpContextAccessor httpContextient, IHostingEnvironment environment)
            : base(httpContext, currentUser, env, notifier)
        {
            _generalMaster = generalMaster;
            _culture = culture;
            _header = header;
            _platform = header.Platform<Request.Platform>();
            _pep = pep;
            _mongoService = mongoService;
            _retagging = retagging;
            HeaderAccessor = header;
            _httpContext = httpContextient;
            _serializerSettings = new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore };

        }

        #region Constants      
        private const string AiCallWorkerQuery = @"select ac.callstatus,ac.AICallId,sm.SocietyCode,sm.SocietyName,isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,
                case when isnull(isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj),'')<>'' and isnull(fm.FarmerCode,nfm.FarmerCode)=isnull(fm.FarmerNameEng,nfm.FarmerNameEng)
				    then isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) else isnull(fm.FarmerNameEng,nfm.FarmerNameEng) end FarmerNameEng,ac.ContactNo,ac.ContactName,
            	su.NameEng,ac.CallDate,isnull(ac.CloseDate,'') as CloseDate,ac.CallNumber,isnull(lv.LookupValue,'') as RequestedThrough,bm.IsSexedSemen,isnull(cm.IsSexedSemenCalf,'')IsSexedSemenCalf
            from AICall ac with(nolock)
            inner join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=(case ac.IsReliver when 1 then ac.ReliverId else ac.AIWorkerMasterId end) 
                and aw.IsActive=@act and ac.IsActive=@act {0}
            inner join SystemUser su with(nolock) on su.RefId=aw.AIWorkerMasterId and su.UserType=@uTyp and su.SystemUserId=@uId
            inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId
            left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
            left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
            left outer join LookupValues lv with(nolock) on lv.LookupValuesId=ac.RequestedThrough
            left outer join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
            left outer join CattleMaster cm with(nolock) on cm.CattleMasterId = ac.CattleMasterId
            {1}";
        private const string AiCallEmployeeQuery = @"select ac.AICallId,sm.SocietyCode,sm.SocietyName,isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,
                case when isnull(isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj),'')<>'' and isnull(fm.FarmerCode,nfm.FarmerCode)=isnull(fm.FarmerNameEng,nfm.FarmerNameEng)
				    then isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) else isnull(fm.FarmerNameEng,nfm.FarmerNameEng) end FarmerNameEng,ac.ContactNo,ac.ContactName,
				case ac.IsReliver when 1 then concat(sur.NameEng,' (Reliver of ',su.NameEng,')') else su.NameEng end NameEng,ac.CallDate,isnull(ac.CloseDate,'') as CloseDate,ac.CallNumber,isnull(lv.LookupValue ,'')as RequestedThrough,bm.IsSexedSemen,isnull(cm.IsSexedSemenCalf,'')IsSexedSemenCalf
            From AICall ac with(nolock)
            inner join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=ac.AIWorkerMasterId and ac.IsActive=@act {0}
            inner join SystemUser su with(nolock) on su.RefId=aw.AIWorkerMasterId and su.UserType=@uTyp
            inner join SocietyMaster sm with(nolock) on ac.SocietyMasterId=sm.SocietyMasterId
            left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
			left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
            left outer join SystemUser sur with(nolock) on sur.RefId=ac.ReliverId and sur.UserType=@uTyp
            left outer join LookupValues lv with(nolock) on lv.LookupValuesId=ac.RequestedThrough
            left outer join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
            left outer join CattleMaster cm with(nolock) on cm.CattleMasterId = ac.CattleMasterId
          {1}";
        private const string AiCallRestQuery = @"select ac.AICallId,sm.SocietyCode,sm.SocietyName,isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,
                case when isnull(isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj),'')<>'' and isnull(fm.FarmerCode,nfm.FarmerCode)=isnull(fm.FarmerNameEng,nfm.FarmerNameEng)
				    then isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) else isnull(fm.FarmerNameEng,nfm.FarmerNameEng) end FarmerNameEng,ac.ContactNo,ac.ContactName,
				case ac.IsReliver when 1 then concat(sur.NameEng,' (Reliver of ',sua.NameEng,')') else sua.NameEng end NameEng,ac.CallDate,isnull(ac.CloseDate,'') as CloseDate,
            ac.CallNumber,isnull(lv.LookupValue ,'')as RequestedThrough,bm.IsSexedSemen,isnull(cm.IsSexedSemenCalf,'')IsSexedSemenCalf
            from EmployeeSocietyMapping esm with(nolock)
            inner join EmployeeMaster em with(nolock) on em.EmployeeMasterId=esm.EmployeeMasterId
            inner join SystemUser su with(nolock) on su.RefId=em.EmployeeMasterId and su.UserType=[UserType] and su.SystemUserId=@uId
            inner join AICall ac with(nolock) on ac.SocietyMasterId=esm.SocietyMasterId and ac.IsActive=@act {0}
			inner join AIWorkerMaster awa with(nolock) on awa.AIWorkerMasterId=ac.AIWorkerMasterId
			inner join SystemUser sua with(nolock) on sua.RefId=awa.AIWorkerMasterId and sua.UserType=@uTyp
            inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId
            left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
			left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
            left outer join SystemUser sur with(nolock) on sur.RefId=ac.ReliverId and sur.UserType=@uTyp
            left outer join LookupValues lv with(nolock) on lv.LookupValuesId=ac.RequestedThrough
            left outer join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
            left outer join CattleMaster cm with(nolock) on cm.CattleMasterId = ac.CattleMasterId
            {1}";

        private const string AiCallWorkerExportQuery = @"select sm.SocietyCode,sm.SocietyName as Society,isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,
                case when isnull(isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj),'')<>'' and isnull(fm.FarmerCode,nfm.FarmerCode)=isnull(fm.FarmerNameEng,nfm.FarmerNameEng)
				    then isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) else isnull(fm.FarmerNameEng,nfm.FarmerNameEng) end Farmer,
            	format(ac.CallDate,'dd/MM/yyyy')CallDate,format(ac.CallDate,'hh:mm tt')CallTime,ac.CallNumber,isnull(ac.TagCode,'')TagCode,
            	isnull(lvct.LookupValue,'') as CattleType,isnull(bdm.Name,'')Breed,isnull(lvag.LookupValue,'') as AgeGroup,ac.LactationNo,
            	isnull(bm.BullNo,'')BullNo,isnull(lvNoa.LookupValue,'')NoOfAI,isnull(ac.TotalAI,0)TotalAI,isnull(ac.ContactNo,'')ContactNo,
            	isnull(ac.ContactName,'') as ContactName,isnull(em.AgentCode,'')AgentCode,isnull(su.NameEng,'')EmployeeName,
            	isnull(aw.AIWorkerCode,'')AiWorkerCode,isnull((case ac.IsReliver when 1 then concat(suaw.NameEng,' (Reliver of ',sur.NameEng,')') else suaw.NameEng end),'')AiWorkerName,
            	format(ac.CloseDate,'dd/MM/yyyy')CloseDate,format(ac.CloseDate,'hh:mm tt')CloseTime,
            	isnull(ar.Reason,'')Reason,isnull(lvStatus.LookupValue,'')CallStatus,isnull(lv.LookupValue ,'')RequestedThrough,
                case bm.IsSexedSemen when 1 then 'Yes' when 0 then 'No' else null end SexedSemen
            from AICall ac with(nolock) 
            inner join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=ac.AIWorkerMasterId 
                and aw.IsActive=@act and ac.IsActive=@act {0}
            inner join SystemUser suaw With(nolock) on suaw.RefId=aw.AIWorkerMasterId and suaw.UserType=@uTyp and suaw.SystemUserId=@uId
            inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId and ac.IsActive=@act
            inner join SystemUser su With(nolock) on su.SystemUserId=ac.CreatedBy
            left outer join EmployeeMaster em with (nolock) on em.EmployeeMasterId=su.RefId
            left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
            left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
            left outer join BreedMaster bdm with(nolock) on bdm.BreedMasterId=ac.BreedMasterId
            left outer join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
            left outer join AIReason ar with(nolock) on ar.AIReasonId=ac.AIReasonId
            left outer join LookupValues lvct with(nolock) on lvct.LookupValuesId=ac.CattleTypeId
            left outer join LookupValues lvag with(nolock) on lvag.LookupValuesId=ac.AgeGroupTypeId
            left outer join LookupValues lvNoa on lvNoa.LookupValuesId=ac.NoOfAI
            left outer join LookupValues lvStatus on lvStatus.LookupValuesId=ac.CallStatus
            left outer join LookupValues lv with(nolock) on lv.LookupValuesId=ac.RequestedThrough
            left outer join AIWorkerMaster awr with(nolock) on awr.AIWorkerMasterId=ac.AIWorkerMasterId
			left outer join SystemUser sur with(nolock) on sur.RefId=awr.AIWorkerMasterId and sur.UserType=@uTyp
            {1}
            {2}";
        private const string AiCallEmployeeExportQuery = @"select sm.SocietyCode,sm.SocietyName as Society,isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,
                case when isnull(isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj),'')<>'' and isnull(fm.FarmerCode,nfm.FarmerCode)=isnull(fm.FarmerNameEng,nfm.FarmerNameEng)
				    then isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) else isnull(fm.FarmerNameEng,nfm.FarmerNameEng) end Farmer,
            	format(ac.CallDate,'dd/MM/yyyy')CallDate,format(ac.CallDate,'hh:mm tt')CallTime,ac.CallNumber,isnull(ac.TagCode,'')TagCode,
            	isnull(lvct.LookupValue,'') as CattleType,isnull(bdm.Name,'')Breed,isnull(lvag.LookupValue,'') as AgeGroup,ac.LactationNo,
            	isnull(bm.BullNo,'')BullNo,isnull(lvNoa.LookupValue,'')NoOfAI,isnull(ac.TotalAI,0)TotalAI,isnull(ac.ContactNo,'') as ContactNo,
            	isnull(ac.ContactName,'') as ContactName,isnull(em.AgentCode,'') as AgentCode,isnull(su.NameEng,'') as EmployeeName,
            	isnull((case ac.IsReliver when 1 then awr.AIWorkerCode else aw.AIWorkerCode end),'')AiWorkerCode,
				isnull((case ac.IsReliver when 1 then concat(sur.NameEng,' (Reliver of ',suaw.NameEng,')') else suaw.NameEng end),'')AiWorkerName,
            	format(ac.CloseDate,'dd/MM/yyyy')CloseDate,format(ac.CloseDate,'hh:mm tt')CloseTime,
            	isnull(ar.Reason,'')Reason,isnull(lvStatus.LookupValue,'')CallStatus,isnull(lv.LookupValue,'')RequestedThrough,
                case bm.IsSexedSemen when 1 then 'Yes' when 0 then 'No' else null end SexedSemen
            from AICall ac with(nolock) 
            inner join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=ac.AIWorkerMasterId and ac.IsActive=@act {0}
            inner join SystemUser suaw With(nolock) on suaw.RefId=aw.AIWorkerMasterId and suaw.UserType=@uTyp
            inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId and ac.IsActive=@act
            inner join SystemUser su With(nolock) on su.SystemUserId=ac.CreatedBy
            left outer join EmployeeMaster em with (nolock) on em.EmployeeMasterId=su.RefId
            left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
            left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
            left outer join BreedMaster bdm with(nolock) on bdm.BreedMasterId=ac.BreedMasterId
            left outer join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
            left outer join AIReason ar with(nolock) on ar.AIReasonId=ac.AIReasonId
            left outer join LookupValues lvct with(nolock) on lvct.LookupValuesId=ac.CattleTypeId
            left outer join LookupValues lvag with(nolock) on lvag.LookupValuesId=ac.AgeGroupTypeId
            left outer join LookupValues lvNoa on lvNoa.LookupValuesId=ac.NoOfAI
            left outer join LookupValues lvStatus on lvStatus.LookupValuesId=ac.CallStatus
            left outer join LookupValues lv with(nolock) on lv.LookupValuesId=ac.RequestedThrough
            left outer join AIWorkerMaster awr with(nolock) on awr.AIWorkerMasterId=ac.ReliverId
			left outer join SystemUser sur with(nolock) on sur.RefId=awr.AIWorkerMasterId and sur.UserType=@uTyp
            {1}
            {2}";
        private const string AiCallRestExportQuery = @"select sm.SocietyCode,sm.SocietyName as Society,isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,
                case when isnull(isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj),'')<>'' and isnull(fm.FarmerCode,nfm.FarmerCode)=isnull(fm.FarmerNameEng,nfm.FarmerNameEng)
				    then isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) else isnull(fm.FarmerNameEng,nfm.FarmerNameEng) end Farmer,
            	format(ac.CallDate,'dd/MM/yyyy')CallDate,format(ac.CallDate,'hh:mm tt')CallTime,ac.CallNumber,isnull(ac.TagCode,'')TagCode,
            	isnull(lvct.LookupValue,'') as CattleType,isnull(bdm.Name,'')Breed,isnull(lvag.LookupValue,'') as AgeGroup,ac.LactationNo,
            	isnull(bm.BullNo,'')BullNo,isnull(lvNoa.LookupValue,'')NoOfAI,isnull(ac.TotalAI,0)TotalAI,isnull(ac.ContactNo,'') as ContactNo,
            	isnull(ac.ContactName,'') as ContactName,isnull(em.AgentCode,'') as AgentCode,isnull(su.NameEng,'') as EmployeeName,
            	isnull((case ac.IsReliver when 1 then awr.AIWorkerCode else aw.AIWorkerCode end),'')AiWorkerCode,
				isnull((case ac.IsReliver when 1 then concat(sur.NameEng,' (Reliver of ',suaw.NameEng,')') else suaw.NameEng end),'')AiWorkerName,
            	format(ac.CloseDate,'dd/MM/yyyy')CloseDate,format(ac.CloseDate,'hh:mm tt')CloseTime,
            	isnull(ar.Reason,'')Reason,isnull(lvStatus.LookupValue,'')CallStatus,isnull(lv.LookupValue,'')RequestedThrough,
                case bm.IsSexedSemen when 1 then 'Yes' when 0 then 'No' else null end SexedSemen
            from EmployeeSocietyMapping esm with(nolock)
            inner join EmployeeMaster uem with(nolock) on uem.EmployeeMasterId=esm.EmployeeMasterId
            inner join SystemUser esu with(nolock) on esu.RefId=uem.EmployeeMasterId and esu.UserType=[UserType] and esu.SystemUserId=@uId
            inner join AICall ac with(nolock) on ac.SocietyMasterId=esm.SocietyMasterId and ac.IsActive=@act {0}
            inner join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=ac.AIWorkerMasterId
            inner join SystemUser suaw With(nolock) on suaw.RefId=aw.AIWorkerMasterId and suaw.UserType=@uTyp
            inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId and ac.IsActive=@act
            inner join SystemUser su With(nolock) on su.SystemUserId=ac.CreatedBy
            left outer join EmployeeMaster em with (nolock) on em.EmployeeMasterId=su.RefId
            left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
            left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
            left outer join BreedMaster bdm with(nolock) on bdm.BreedMasterId=ac.BreedMasterId
            left outer join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
            left outer join AIReason ar with(nolock) on ar.AIReasonId=ac.AIReasonId
            left outer join LookupValues lvct with(nolock) on lvct.LookupValuesId=ac.CattleTypeId
            left outer join LookupValues lvag with(nolock) on lvag.LookupValuesId=ac.AgeGroupTypeId
            left outer join LookupValues lvNoa on lvNoa.LookupValuesId=ac.NoOfAI
            left outer join LookupValues lvStatus on lvStatus.LookupValuesId=ac.CallStatus
            left outer join LookupValues lv with(nolock) on lv.LookupValuesId=ac.RequestedThrough
            left outer join AIWorkerMaster awr with(nolock) on awr.AIWorkerMasterId=ac.ReliverId
			left outer join SystemUser sur with(nolock) on sur.RefId=awr.AIWorkerMasterId and sur.UserType=@uTyp
            {1}
            {2}";

        private const string AiCallRegistrationTemplateQuery = @"select unpvt.FieldName as Name,unpvt.FieldValue as Code 
            from (select cast(ac.ContactNo as nvarchar(200)) as ContactNo, cast(su.MobileNo as nvarchar(200)) as AIWorkerContactNo,
                cast(case when isnull(isnull(f.FarmerNameGuj,nf.FarmerNameGuj),'')<>'' and isnull(f.FarmerCode,nf.FarmerCode)=isnull(f.FarmerNameEng,nf.FarmerNameEng)
				    then isnull(f.FarmerNameGuj,nf.FarmerNameGuj) else isnull(f.FarmerNameEng,nf.FarmerNameEng) end as nvarchar(200))FarmerName,
                cast(s.SocietyName as nvarchar(200))SocietyName,cast(s.SocietyCode as nvarchar(200)) as SocietyCode,cast(ac.CallNumber as nvarchar(200))CallNumber,
				cast(ct.CattleType as nvarchar(200))CattleType,
            	cast(format(ac.CallDate,'dd/MM/yyyy') as nvarchar(200)) as AICallDate,cast(format(ac.CallDate,'hh:mm tt') as nvarchar(200)) as AICallTime
            	from aicall ac with(nolock)
            	inner join SystemUser su on su.RefId=isnull(ac.ReliverId,ac.AIWorkerMasterId) and su.UserType=@uType and ac.AICallId=@acid and ac.IsActive=@act
            	inner join SocietyMaster s with(nolock) on s.SocietyMasterId=ac.SocietyMasterId
            	left outer join FarmerMaster f with(nolock) on f.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
            	left outer join NonRegisteredFarmer nf with(nolock) on nf.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
				outer apply (select ckm.CultureValue CattleType from LookupValues lv 
					inner join CultureKey ck on ck.CultureKey = lv.CultureKey and lv.LookupValuesId = ac.CattleTypeId
					inner join CultureKeyMapping ckm on ckm.CultureKeyId = ck.CultureKeyId and ckm.CultureId = @culture)ct
            	)p unpivot (FieldValue for FieldName in (ContactNo,AIWorkerContactNo,FarmerName,SocietyName,SocietyCode,CattleType,AICallDate,AICallTime,CallNumber)  
            )AS unpvt";
        private const string AiCallCompleteTemplateQuery = @"select unpvt.FieldName as Name,unpvt.FieldValue as Code 
            from (select cast(ac.ContactNo as nvarchar(200)) as ContactNo, cast(su.MobileNo as nvarchar(200)) as AIWorkerContactNo,
				cast(case when isnull(isnull(f.FarmerNameGuj,nf.FarmerNameGuj),'')<>'' and isnull(f.FarmerCode,nf.FarmerCode)=isnull(f.FarmerNameEng,nf.FarmerNameEng)
				    then isnull(f.FarmerNameGuj,nf.FarmerNameGuj) else isnull(f.FarmerNameEng,nf.FarmerNameEng) end as nvarchar(200))FarmerName,
                cast(ac.TagCode as nvarchar(200)) as TagNo,
				cast(ct.CattleType as nvarchar(200))CattleType,
            	cast(format(ac.CallDate,'dd/MM/yyyy') as nvarchar(200)) as AICallDate,cast(format(ac.CallDate,'hh:mm tt') as nvarchar(200)) as AICallTime,
            	cast(format(ac.CloseDate,'dd/MM/yyyy') as nvarchar(200)) as AICallCloseDate,cast(format(ac.CloseDate,'hh:mm tt') as nvarchar(200)) as AICallCloseTime
            	from aicall ac with(nolock)
            	inner join SystemUser su on su.RefId=isnull(ac.ReliverId,ac.AIWorkerMasterId) and su.UserType=@uType and ac.AICallId=@acid and ac.IsActive=@act
            	inner join SocietyMaster s with(nolock) on s.SocietyMasterId=ac.SocietyMasterId
            	left outer join FarmerMaster f with(nolock) on f.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
            	left outer join NonRegisteredFarmer nf with(nolock) on nf.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
				outer apply (select ckm.CultureValue CattleType from LookupValues lv 
					inner join CultureKey ck on ck.CultureKey = lv.CultureKey and lv.LookupValuesId = ac.CattleTypeId
					inner join CultureKeyMapping ckm on ckm.CultureKeyId = ck.CultureKeyId and ckm.CultureId = @culture)ct
            	)p unpivot (FieldValue for FieldName in (ContactNo,AIWorkerContactNo,FarmerName,CattleType,TagNo,AICallDate,AICallTime,AICallCloseDate,AICallCloseTime)  
            )AS unpvt";

        //      private const string AiCallReportWorkerQuery = @"select sm.SocietyCode,sm.SocietyName as Society,isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,isnull(fm.FarmerNameEng,nfm.FarmerNameEng)Farmer,
        //              format(ac.CallDate,'dd/MM/yyyy')CallDate,format(ac.CallDate,'hh:mm tt')CallTime,ac.CallNumber,ac.TagCode,isnull(ln.LookupValue,'')NDDBType,lvct.LookupValue CattleType,isnull(bdm.Name,'')Breed,lvag.LookupValue AgeGroup,ac.LactationNo,
        //              bm.BullNo,lvNoa.LookupValue NoOfAI,ac.TotalAI, ac.ContactNo,ac.ContactName,em.AgentCode,su.NameEng EmployeeName,
        //              isnull(case ac.IsReliver when 1 then awr.AIWorkerCode else aw.AIWorkerCode end,'')AiWorkerCode,isnull(case ac.IsReliver when 1 then concat(sur.NameEng,' (Reliver of ',suaw.NameEng,')') else suaw.NameEng end,'') AiWorkerName,
        //              format(ac.CloseDate,'dd/MM/yyyy')CloseDate,format(ac.CloseDate,'hh:mm tt')CloseTime, format(ac.UpdatedOn,'dd/MM/yyyy')UpdatedOnDate,format(ac.UpdatedOn,'hh:mm tt')UpdatedOnTime,
        //              ar.Reason,lvStatus.LookupValue CallStatus,ac.NoOfStraw,lv.LookupValue RequestedThrough,case bm.IsSexedSemen when 1 then 'Yes' when 0 then 'No' else null end SexedSemen,isnull(ct.IsSexedSemenCalf,'')IsSexedSemenCalf,
        //              case when (lvStatus.LookupValue <>'Close' and ac.CallStatus <> '') then '' else isnull(lvreq.LookupValue,'Not Checked') end AIRequestStatus,
        //		case when aw.IsActive=@act and suaw.IsActive=@act and isnull(suaw.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end [AiWorkerStatus]
        //	,isnull(ac.validateImage,'')validateImage ,CAST('https://www.google.com/maps?q=' + ac.Latitude + ',' + ac.Longitude as xml)as ImageLatLong,CAST('https://www.google.com/maps?q=' + ac.ValidateLatitude + ',' + ac.ValidateLongitude as xml)as ValidateLatLong,isnull(sud.NameEng,'') as ValidatedBy,format(ac.ValidatedOn,'dd/MM/yyyy') as ValidatedOn from AIWorkerMaster aw with(nolock)
        //          inner join SystemUser suaw with(nolock) on suaw.RefId=aw.AIWorkerMasterId and suaw.SystemUserId=@uid and suaw.UserType=@wrk and aw.IsActive=@act 
        //	inner join AICall ac with(nolock) on aw.AIWorkerMasterId=ac.AIWorkerMasterId {4} {0}           
        //          inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId {1}
        //          inner join SystemUser su With(nolock) on su.SystemUserId=ac.CreatedBy
        //          left outer join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId and ac.IsActive=@act 
        //          left outer join EmployeeMaster em with (nolock) on em.EmployeeMasterId=su.RefId
        //          left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
        //          left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
        //          left outer join BreedMaster bdm with(nolock) on bdm.BreedMasterId=ac.BreedMasterId  
        //          left outer join AIReason ar with(nolock) on ar.AIReasonId=ac.AIReasonId
        //          left outer join LookupValues lvct with(nolock) on lvct.LookupValuesId=ac.CattleTypeId
        //          left outer join LookupValues lvag with(nolock) on lvag.LookupValuesId=ac.AgeGroupTypeId
        //          left outer join LookupValues lvNoa on lvNoa.LookupValuesId=ac.NoOfAI
        //          left outer join LookupValues lvStatus on lvStatus.LookupValuesId=ac.CallStatus
        //          left outer join LookupValues lvsexsemen on lvsexsemen.LookupValuesId=bm.issexedsemen
        //       left outer join LookupValues lv with(nolock) on lv.LookupValuesId=ac.RequestedThrough
        //          left outer join LookupValues lvreq with(nolock) on lvreq.LookupValuesId=ac.AIRequestStatus
        //          left outer join CattleMaster ct with(nolock) on(CASE WHEN ISNULL(ct.TagNo,'')<>'' then ct.TagNo END)=ac.TagCode
        //          --left outer join CattleMaster cm with(nolock) on cm.CattleMasterId = ac.CattleMasterId
        //	left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
        //	left outer join AIWorkerMaster awr with(nolock) on ac.IsReliver=@act and awr.AIWorkerMasterId=ac.AIWorkerMasterId
        //	left outer join SystemUser sur with(nolock) on sur.RefId=awr.AIWorkerMasterId and sur.UserType=@wrk

        //          left outer  join SystemUser sud with(nolock) on sud.SystemUserId=ac.ValidatedBy and ac.AIRequestStatus!=0
        //         {2} {3}";
        //      private const string AiCallReportWorkerCountQuery = @"select count(ac.AICallId) from AIWorkerMaster aw with(nolock)
        //	inner join SystemUser suaw with(nolock) on suaw.RefId=aw.AIWorkerMasterId and suaw.SystemUserId=@uid and suaw.UserType=@wrk and aw.IsActive=@act
        //	inner join AICall ac with(nolock) on aw.AIWorkerMasterId=ac.AIWorkerMasterId and ac.IsActive=@act {4} {0}
        //          inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId  {1} 
        //          left outer join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId 
        //left outer  join SystemUser sud with(nolock) on sud.SystemUserId=ac.ValidatedBy and ac.AIRequestStatus!=0 {2} {3}";

        //      private const string AiCallReportEmployeeQuery = @"select case WHEN ac.BullImageId IS NOT NULL and ac.BullImageId<>'' THEN ac.BullImageId
        //			else (case when ac.FarmerImageId IS NOT NULL  and ac.FarmerImageId<>'' then ac.FarmerImageId 
        //			else (case when ac.TagImageId IS NOT NULL and ac.TagImageId<>'' then ac.TagImageId 
        //			else ('') end) end) end  as ImageId, ac.AICallId, sm.SocietyCode,sm.SocietyName as Society,isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,isnull(fm.FarmerNameEng,nfm.FarmerNameEng)Farmer,
        //              format(ac.CallDate,'dd/MM/yyyy')CallDate,format(ac.CallDate,'hh:mm tt')CallTime,ac.CallNumber,ac.TagCode,isnull(ln.LookupValue,'')NDDBType,lvct.LookupValue CattleType,isnull(bdm.Name,'')Breed,lvag.LookupValue AgeGroup,ac.LactationNo,
        //              bm.BullNo,lvNoa.LookupValue NoOfAI,ac.TotalAI, ac.ContactNo,ac.ContactName,em.AgentCode,su.NameEng EmployeeName,
        //              isnull(case ac.IsReliver when 1 then awr.AIWorkerCode else aw.AIWorkerCode end,'')AiWorkerCode,isnull(case ac.IsReliver when 1 then concat(sur.NameEng,' (Reliver of ',suaw.NameEng,')') else suaw.NameEng end,'') AiWorkerName,
        //              format(ac.CloseDate,'dd/MM/yyyy')CloseDate,format(ac.CloseDate,'hh:mm tt')CloseTime,format(ac.UpdatedOn,'dd/MM/yyyy')UpdatedOnDate,format(ac.UpdatedOn,'hh:mm tt')UpdatedOnTime,
        //              ar.Reason,lvStatus.LookupValue CallStatus,ac.NoOfStraw,lv.LookupValue RequestedThrough,case bm.IsSexedSemen when 1 then 'Yes' when 0 then 'No' else null end SexedSemen,isnull(ct.IsSexedSemenCalf,'')IsSexedSemenCalf,
        //              case when (lvStatus.LookupValue <>'Close' and ac.CallStatus <> '') then '' else isnull(lvreq.LookupValue,'Not Checked') end AIRequestStatus,
        //		case when aw.IsActive=@act and suaw.IsActive=@act and isnull(suaw.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end [AiWorkerStatus]
        //          ,isnull(ac.validateImage,'')validateImage,CAST('https://www.google.com/maps?q=' + ac.Latitude + ',' + ac.Longitude as xml)as ImageLatLong,CAST('https://www.google.com/maps?q=' + ac.ValidateLatitude + ',' + ac.ValidateLongitude as xml)as ValidateLatLong ,isnull(sud.NameEng,'') as ValidatedBy,format(ac.ValidatedOn,'dd/MM/yyyy') as ValidatedOn from AICall ac with(nolock)            
        //          inner join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=ac.AIWorkerMasterId and ac.IsActive=@act {4} {0}            
        //          inner join SystemUser suaw With(nolock) on suaw.RefId=aw.AIWorkerMasterId and suaw.UserType=@wrk
        //          inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId {1}
        //          inner join SystemUser su With(nolock) on su.SystemUserId=ac.CreatedBy
        //          left outer join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
        //          left outer join EmployeeMaster em with (nolock) on em.EmployeeMasterId=su.RefId
        //          left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
        //          left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
        //          left outer join BreedMaster bdm with(nolock) on bdm.BreedMasterId=ac.BreedMasterId
        //          left outer join AIReason ar with(nolock) on ar.AIReasonId=ac.AIReasonId
        //          left outer join LookupValues lvct with(nolock) on lvct.LookupValuesId=ac.CattleTypeId
        //          left outer join LookupValues lvag with(nolock) on lvag.LookupValuesId=ac.AgeGroupTypeId
        //          left outer join LookupValues lvNoa on lvNoa.LookupValuesId=ac.NoOfAI
        //          left outer join LookupValues lvStatus on lvStatus.LookupValuesId=ac.CallStatus
        //          left outer join LookupValues lvsexsemen on lvsexsemen.LookupValuesId=bm.issexedsemen
        //          left outer join LookupValues lv with(nolock) on lv.LookupValuesId=ac.RequestedThrough       
        //          left outer join LookupValues lvreq with(nolock) on lvreq.LookupValuesId=ac.AIRequestStatus
        //          left outer join CattleMaster ct with(nolock) on(CASE WHEN ISNULL(ct.TagNo,'')<>'' then ct.TagNo END)=ac.TagCode
        //          --left outer join CattleMaster cm with(nolock) on cm.CattleMasterId = ac.CattleMasterId
        //          left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
        //	left outer join AIWorkerMaster awr with(nolock) on ac.IsReliver=@act and awr.AIWorkerMasterId=ac.ReliverId
        //          left outer join SystemUser sur With(nolock) on sur.RefId=awr.AIWorkerMasterId and sur.UserType=@wrk
        //          left outer join SystemUser sud With(nolock) on sud.SystemUserId=ac.ValidatedBy and ac.AIRequestStatus!=0
        //          {2} {3}";
        //      private const string AiCallReportExportEmployeeQuery = @"select  sm.SocietyCode,sm.SocietyName as Society,isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,isnull(fm.FarmerNameEng,nfm.FarmerNameEng)Farmer,
        //              format(ac.CallDate,'dd/MM/yyyy')CallDate,format(ac.CallDate,'hh:mm tt')CallTime,ac.CallNumber,ac.TagCode,isnull(ln.LookupValue,'')NDDBType,lvct.LookupValue CattleType,isnull(bdm.Name,'')Breed,lvag.LookupValue AgeGroup,ac.LactationNo,
        //              bm.BullNo,lvNoa.LookupValue NoOfAI,ac.TotalAI, ac.ContactNo,ac.ContactName,em.AgentCode,su.NameEng EmployeeName,
        //              isnull(case ac.IsReliver when 1 then awr.AIWorkerCode else aw.AIWorkerCode end,'')AiWorkerCode,isnull(case ac.IsReliver when 1 then concat(sur.NameEng,' (Reliver of ',suaw.NameEng,')') else suaw.NameEng end,'') AiWorkerName,
        //              format(ac.CloseDate,'dd/MM/yyyy')CloseDate,format(ac.CloseDate,'hh:mm tt')CloseTime,format(ac.UpdatedOn,'dd/MM/yyyy')UpdatedOnDate,format(ac.UpdatedOn,'hh:mm tt')UpdatedOnTime,
        //              ar.Reason,lvStatus.LookupValue CallStatus,ac.NoOfStraw,lv.LookupValue RequestedThrough,case bm.IsSexedSemen when 1 then 'Yes' when 0 then 'No' else null end SexedSemen,
        //              case when (lvStatus.LookupValue <>'Close' and ac.CallStatus <> '') then '' else isnull(lvreq.LookupValue,'Not Checked') end AIRequestStatus,
        //		case when aw.IsActive=@act and suaw.IsActive=@act and isnull(suaw.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end [AiWorkerStatus]
        //          ,isnull(ac.validateImage,'')validateImage,CAST('https://www.google.com/maps?q=' + ac.Latitude + ',' + ac.Longitude as xml)as ImageLatLong,CAST('https://www.google.com/maps?q=' + ac.ValidateLatitude + ',' + ac.ValidateLongitude as xml)as ValidateLatLong,isnull(sud.NameEng,'') as ValidatedBy,format(ac.ValidatedOn,'dd/MM/yyyy') as ValidatedOn from AICall ac with(nolock)            
        //          inner join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=ac.AIWorkerMasterId and ac.IsActive=@act {4} {0}            
        //          inner join SystemUser suaw With(nolock) on suaw.RefId=aw.AIWorkerMasterId and suaw.UserType=@wrk 
        //          inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId {1}
        //          inner join SystemUser su With(nolock) on su.SystemUserId=ac.CreatedBy
        //          left outer join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
        //          left outer join EmployeeMaster em with (nolock) on em.EmployeeMasterId=su.RefId
        //          left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
        //          left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
        //          left outer join BreedMaster bdm with(nolock) on bdm.BreedMasterId=ac.BreedMasterId
        //          left outer join AIReason ar with(nolock) on ar.AIReasonId=ac.AIReasonId
        //          left outer join LookupValues lvct with(nolock) on lvct.LookupValuesId=ac.CattleTypeId
        //          left outer join LookupValues lvag with(nolock) on lvag.LookupValuesId=ac.AgeGroupTypeId
        //          left outer join LookupValues lvNoa on lvNoa.LookupValuesId=ac.NoOfAI
        //          left outer join LookupValues lvStatus on lvStatus.LookupValuesId=ac.CallStatus
        //          left outer join LookupValues lvsexsemen on lvsexsemen.LookupValuesId=bm.issexedsemen
        //          left outer join LookupValues lv with(nolock) on lv.LookupValuesId=ac.RequestedThrough       
        //          left outer join LookupValues lvreq with(nolock) on lvreq.LookupValuesId=ac.AIRequestStatus
        //          left outer join CattleMaster ct with(nolock) on(CASE WHEN ISNULL(ct.TagNo,'')<>'' then ct.TagNo END)=ac.TagCode
        //	left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
        //	left outer join AIWorkerMaster awr with(nolock) on ac.IsReliver=@act and awr.AIWorkerMasterId=ac.ReliverId
        //          left outer join SystemUser sur With(nolock) on sur.RefId=awr.AIWorkerMasterId and sur.UserType=@wrk
        //          left outer join SystemUser sud with(nolock) on sud.SystemUserId=ac.ValidatedBy and ac.AIRequestStatus!=0
        //{2}  {3}";

        //      private const string AiCallReportEmployeeCountQuery = @"select count(ac.AICallId) from AICall ac with(nolock)             
        //          inner join SystemUser suaw With(nolock) on suaw.RefId=ac.AIWorkerMasterId and ac.IsActive=@act and suaw.UserType=@wrk
        //          inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId {4} {0} {1}
        //          left outer join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId 
        //left outer  join SystemUser sud with(nolock) on sud.SystemUserId=ac.ValidatedBy and ac.AIRequestStatus!=0 {2} {3}";

        //      private const string AiCallReportRestQuery = @"select case WHEN ac.BullImageId IS NOT NULL and ac.BullImageId<>'' THEN ac.BullImageId
        //			else (case when ac.FarmerImageId IS NOT NULL  and ac.FarmerImageId<>'' then ac.FarmerImageId 
        //			else (case when ac.TagImageId IS NOT NULL and ac.TagImageId<>'' then ac.TagImageId 
        //			else ('') end) end) end  as ImageId, ac.AICallId, sm.SocietyCode,sm.SocietyName as Society,isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,isnull(fm.FarmerNameEng,nfm.FarmerNameEng)Farmer,
        //              format(ac.CallDate,'dd/MM/yyyy')CallDate,format(ac.CallDate,'hh:mm tt')CallTime,ac.CallNumber,ac.TagCode,isnull(ln.LookupValue,'')NDDBType,lvct.LookupValue CattleType,isnull(bdm.Name,'')Breed,lvag.LookupValue AgeGroup,ac.LactationNo,
        //              bm.BullNo,lvNoa.LookupValue NoOfAI,ac.TotalAI, ac.ContactNo,ac.ContactName,em.AgentCode,su.NameEng EmployeeName,
        //              isnull(case ac.IsReliver when 1 then awr.AIWorkerCode else aw.AIWorkerCode end,'')AiWorkerCode,isnull(case ac.IsReliver when 1 then concat(sur.NameEng,' (Reliver of ',suaw.NameEng,')') else suaw.NameEng end,'') AiWorkerName,
        //              format(ac.CloseDate,'dd/MM/yyyy')CloseDate,format(ac.CloseDate,'hh:mm tt')CloseTime,format(ac.UpdatedOn,'dd/MM/yyyy')UpdatedOnDate,format(ac.UpdatedOn,'hh:mm tt')UpdatedOnTime,
        //              ar.Reason,lvStatus.LookupValue CallStatus,ac.NoOfStraw,lv.LookupValue RequestedThrough,case bm.IsSexedSemen when 1 then 'Yes' when 0 then 'No' else null end SexedSemen,isnull(ct.IsSexedSemenCalf,'')IsSexedSemenCalf,
        //              case when (lvStatus.LookupValue <>'Close' and ac.CallStatus <> '') then '' else isnull(lvreq.LookupValue,'Not Checked') end AIRequestStatus,
        //		case when aw.IsActive=@act and suaw.IsActive=@act and isnull(suaw.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end [AiWorkerStatus]
        //	,isnull(ac.validateImage,'')validateImage ,CAST('https://www.google.com/maps?q=' + ac.Latitude + ',' + ac.Longitude as xml)as ImageLatLong,CAST('https://www.google.com/maps?q=' + ac.ValidateLatitude + ',' + ac.ValidateLongitude as xml)as ValidateLatLong,isnull(sud.NameEng,'') as ValidatedBy,format(ac.ValidatedOn,'dd/MM/yyyy') as ValidatedOn from EmployeeSocietyMapping esm with(nolock)
        //	inner join SystemUser suem with(nolock) on suem.RefId=esm.EmployeeMasterId and suem.SystemUserId=@uid and suem.UserType=@employee
        //	inner join AICall ac with(nolock) on ac.SocietyMasterId=esm.SocietyMasterId  {4} {0} 
        //          inner join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=ac.AIWorkerMasterId
        //          inner join SystemUser suaw With(nolock) on suaw.RefId=aw.AIWorkerMasterId and suaw.UserType=@wrk
        //	inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId {1}
        //          inner join SystemUser su With(nolock) on su.SystemUserId=ac.CreatedBy
        //          left outer join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId and ac.IsActive=@act 
        //          left outer join EmployeeMaster em with (nolock) on em.EmployeeMasterId=su.RefId
        //          left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
        //          left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
        //          left outer join BreedMaster bdm with(nolock) on bdm.BreedMasterId=ac.BreedMasterId
        //          left outer join AIReason ar with(nolock) on ar.AIReasonId=ac.AIReasonId
        //          left outer join LookupValues lvct with(nolock) on lvct.LookupValuesId=ac.CattleTypeId
        //          left outer join LookupValues lvag with(nolock) on lvag.LookupValuesId=ac.AgeGroupTypeId
        //          left outer join LookupValues lvNoa on lvNoa.LookupValuesId=ac.NoOfAI
        //          left outer join LookupValues lvStatus on lvStatus.LookupValuesId=ac.CallStatus
        //          left outer join LookupValues lvsexsemen on lvsexsemen.LookupValuesId=bm.issexedsemen
        //          left outer join LookupValues lv with(nolock) on lv.LookupValuesId=ac.RequestedThrough
        //          left outer join LookupValues lvreq with(nolock) on lvreq.LookupValuesId=ac.AIRequestStatus
        //          left outer join CattleMaster ct with(nolock) on(CASE WHEN ISNULL(ct.TagNo,'')<>'' then ct.TagNo END)=ac.TagCode
        //          --left outer join CattleMaster cm with(nolock) on cm.CattleMasterId = ac.CattleMasterId
        //          left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
        //	left outer join AIWorkerMaster awr with(nolock) on ac.IsReliver=@act and awr.AIWorkerMasterId=ac.ReliverId
        //	left outer join SystemUser sur with(nolock) on sur.RefId=awr.AIWorkerMasterId and sur.UserType=@wrk
        //          left outer join SystemUser sud with(nolock) on sud.SystemUserId=ac.ValidatedBy and ac.AIRequestStatus!=0
        //           {2} {3} ";
        //      private const string AiCallReportExportRestQuery = @"select sm.SocietyCode,sm.SocietyName as Society,isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,isnull(fm.FarmerNameEng,nfm.FarmerNameEng)Farmer,
        //              format(ac.CallDate,'dd/MM/yyyy')CallDate,format(ac.CallDate,'hh:mm tt')CallTime,ac.CallNumber,ac.TagCode,isnull(ln.LookupValue,'')NDDBType,lvct.LookupValue CattleType,isnull(bdm.Name,'')Breed,lvag.LookupValue AgeGroup,ac.LactationNo,
        //              bm.BullNo,lvNoa.LookupValue NoOfAI,ac.TotalAI, ac.ContactNo,ac.ContactName,em.AgentCode,su.NameEng EmployeeName,
        //              isnull(case ac.IsReliver when 1 then awr.AIWorkerCode else aw.AIWorkerCode end,'')AiWorkerCode,isnull(case ac.IsReliver when 1 then concat(sur.NameEng,' (Reliver of ',suaw.NameEng,')') else suaw.NameEng end,'') AiWorkerName,
        //              format(ac.CloseDate,'dd/MM/yyyy')CloseDate,format(ac.CloseDate,'hh:mm tt')CloseTime,format(ac.UpdatedOn,'dd/MM/yyyy')UpdatedOnDate,format(ac.UpdatedOn,'hh:mm tt')UpdatedOnTime,
        //              ar.Reason,lvStatus.LookupValue CallStatus,ac.NoOfStraw,lv.LookupValue RequestedThrough,case bm.IsSexedSemen when 1 then 'Yes' when 0 then 'No' else null end SexedSemen,
        //              case when (lvStatus.LookupValue <>'Close' and ac.CallStatus <> '') then '' else isnull(lvreq.LookupValue,'Not Checked') end AIRequestStatus,
        //		case when aw.IsActive=@act and suaw.IsActive=@act and isnull(suaw.ExpiryDate,getdate())>=getdate() then 'Active' else 'InActive' end [AiWorkerStatus]
        //	,isnull(ac.validateImage,'')validateImage,CAST('https://www.google.com/maps?q=' + ac.Latitude + ',' + ac.Longitude as xml)as ImageLatLong,CAST('https://www.google.com/maps?q=' + ac.ValidateLatitude + ',' + ac.ValidateLongitude as xml)as ValidateLatLong,isnull(sud.NameEng,'') as ValidatedBy,format(ac.ValidatedOn,'dd/MM/yyyy') as ValidatedOn from EmployeeSocietyMapping esm with(nolock)
        //	inner join SystemUser suem with(nolock) on suem.RefId=esm.EmployeeMasterId and suem.SystemUserId=@uid and suem.UserType=@employee
        //	inner join AICall ac with(nolock) on ac.SocietyMasterId=esm.SocietyMasterId {4} and ac.IsActive=1 {0} 
        //          inner join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=ac.AIWorkerMasterId
        //          inner join SystemUser suaw With(nolock) on suaw.RefId=aw.AIWorkerMasterId and suaw.UserType=@wrk
        //	inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId {1}
        //          inner join SystemUser su With(nolock) on su.SystemUserId=ac.CreatedBy
        //          left outer join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId and ac.IsActive=@act 
        //          left outer join EmployeeMaster em with (nolock) on em.EmployeeMasterId=su.RefId
        //          left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
        //          left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
        //          left outer join BreedMaster bdm with(nolock) on bdm.BreedMasterId=ac.BreedMasterId
        //          left outer join AIReason ar with(nolock) on ar.AIReasonId=ac.AIReasonId
        //          left outer join LookupValues lvct with(nolock) on lvct.LookupValuesId=ac.CattleTypeId
        //          left outer join LookupValues lvag with(nolock) on lvag.LookupValuesId=ac.AgeGroupTypeId
        //          left outer join LookupValues lvNoa on lvNoa.LookupValuesId=ac.NoOfAI
        //          left outer join LookupValues lvStatus on lvStatus.LookupValuesId=ac.CallStatus
        //          left outer join LookupValues lvsexsemen on lvsexsemen.LookupValuesId=bm.issexedsemen
        //          left outer join LookupValues lv with(nolock) on lv.LookupValuesId=ac.RequestedThrough
        //          left outer join LookupValues lvreq with(nolock) on lvreq.LookupValuesId=ac.AIRequestStatus
        //          left outer join CattleMaster ct with(nolock) on(CASE WHEN ISNULL(ct.TagNo,'')<>'' then ct.TagNo END)=ac.TagCode
        //	left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
        //	left outer join AIWorkerMaster awr with(nolock) on ac.IsReliver=@act and awr.AIWorkerMasterId=ac.ReliverId
        //	left outer join SystemUser sur with(nolock) on sur.RefId=awr.AIWorkerMasterId and sur.UserType=@wrk

        //          left outer join SystemUser sud with(nolock) on sud.SystemUserId=ac.ValidatedBy and ac.AIRequestStatus!=0
        //          {2} {3}";
        //      private const string AiCallReportRestCountQuery = @"select count(ac.AICallId) from EmployeeSocietyMapping esm with(nolock)
        //	inner join SystemUser suem with(nolock) on suem.RefId=esm.EmployeeMasterId and suem.SystemUserId=@uid and suem.UserType=@employee
        //	inner join AICall ac with(nolock) on ac.SocietyMasterId=esm.SocietyMasterId {4} and ac.IsActive=@act {0} 
        //	inner join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=ac.AIWorkerMasterId
        //          inner join SystemUser suaw With(nolock) on suaw.RefId=ac.AIWorkerMasterId and suaw.UserType=@wrk
        //	inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId {1}
        //          left outer join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId 
        //	left outer join AIWorkerMaster awr with(nolock) on ac.IsReliver=1 and awr.AIWorkerMasterId=ac.ReliverId
        //	left outer join SystemUser sur with(nolock) on sur.RefId=awr.AIWorkerMasterId and sur.UserType=@wrk 
        //left outer  join SystemUser sud with(nolock) on sud.SystemUserId=ac.ValidatedBy and ac.AIRequestStatus!=0 {2} {3}";

        private const string AiCallCattleDetailsByTag = @"select top 1 isnull(isnull(c.AgeGroupTypeId,ac.AgeGroupTypeId),0)AgeGroupTypeId,isnull(isnull(ac.CattleTypeId,c.CattleTypeId),0)CattleTypeId,
            isnull(isnull(ac.BreedMasterId,c.BreedMasterId),0)BreedMasterId,
            (case when isnull(ac.LactationNo,c.LactationNos) is null then -1 when isnull(cl.[Status],@flspd)=@flspd then isnull(ac.LactationNo,c.LactationNos) else isnull(ac.LactationNo,c.LactationNos)+1 end)LactationNo,
            isnull(lvac.LookupValue,'')AiType,isnull(lvat.LookupValue,'')LastNoOfAI,isnull(ac.CallDate,'')LastCallDate,case when isnull(lsm.SocietyCode,'')='' then '' else (lsm.SocietyCode+' - '+lsm.SocietyName) end LastSociety,
            case when isnull(isnull(lfm.FarmerCode,lnfm.FarmerCode),'')='' then '' 
				when isnull(isnull(lfm.FarmerNameGuj,lnfm.FarmerNameGuj),'')<>'' and isnull(lfm.FarmerCode,lnfm.FarmerCode)=isnull(lfm.FarmerNameEng,lnfm.FarmerNameEng)
					then concat(isnull(lfm.FarmerCode,lnfm.FarmerCode),' - ',isnull(lfm.FarmerNameGuj,lnfm.FarmerNameGuj)) 
				else concat(isnull(lfm.FarmerCode,lnfm.FarmerCode),' - ',isnull(lfm.FarmerNameEng,lnfm.FarmerNameEng)) end LastFarmer,isnull(ac.Remarks,'')Remarks,
            isnull((case when cl.CalvingId is null then ac.Cycle when cl.Status=@abrt or cl.Status=@flspd then 1 else (ac.Cycle+1) end),0)Cycle
            from CattleMaster c with(nolock)
            inner join SocietyMaster lcsm with(nolock) on lcsm.SocietyMasterId=c.SocietyMasterId
            	and isnull(c.TagNo,'')<>'' and ltrim(rtrim(c.TagNo))=@tcode
            left outer join FarmerMaster lcfm with(nolock) on lcfm.FarmerMasterId=c.FarmerMasterId and c.IsRegisteredFarmer=1
            left outer join NonRegisteredFarmer lcnfm with(nolock) on lcnfm.NonRegisteredFarmerId=c.FarmerMasterId and c.IsRegisteredFarmer=0
            left outer join (select top 1 * from AICall iac with(nolock) 
            	where iac.TagCode=@tcode and iac.CallStatus=@cstatus and iac.IsActive=@act
            	order by iac.CloseDate desc)ac 
            	on ac.TagCode=c.TagNo
            left outer join SocietyMaster lsm with(nolock) on lsm.SocietyMasterId=ac.SocietyMasterId
            left outer join FarmerMaster lfm with(nolock) on lfm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
            left outer join NonRegisteredFarmer lnfm with(nolock) on lnfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
            left outer join LookupValues lvat on lvat.LookupValuesId=ac.NoOfAI
            left outer join PDEntry p with(nolock) on p.AICallId=ac.AICallId
            left outer join Calving cl with(nolock) on cl.PDEntryId=p.PDEntryId
            left outer join LookupValues lvac on lvac.LookupValuesId=(case when isnull(ac.AICallId,'')='' or isnull(c.CalvingId,'')<>'' or isnull(p.StatusTypeId,0)=@pgnt then @fst 
            	when 10>datediff(day,cast(ac.CloseDate as date),cast(getdate() as date)) then @rpt24 else @rpt end)
            order by ac.AICallId desc,ac.CloseDate desc";
        private const string AiCallCattleDetailsByTagForAiCall = @"select top 1 isnull(c.LastCalvingDate,'')LastCalvingDate,isnull(c.MilkingStatus,0)MilkingStatus,isnull(c.PeakMilkYield,0)PeakMilkYield,isnull(c.SuperiorAnimal,0)SuperiorAnimal,isnull(c.SuperiorAiSireNo,'')SuperiorAiSireNo,
			case when isnull(isnull(c.AgeGroupTypeId,ac.AgeGroupTypeId),0)=@calf and datediff(month,c.DateOfBirth,getdate())>=12 then @heifer 
				when isnull(isnull(c.AgeGroupTypeId,ac.AgeGroupTypeId),0)=@heifer and cl.CalvingId is not null then @adult
				else isnull(isnull(c.AgeGroupTypeId,ac.AgeGroupTypeId),0) end AgeGroupTypeId,isnull(isnull(ac.CattleTypeId,c.CattleTypeId),0)CattleTypeId,
            isnull(isnull(ac.BreedMasterId,c.BreedMasterId),0)BreedMasterId,
            (case when isnull(ac.LactationNo,c.LactationNos) is null then -1 when isnull(cl.[Status],@flspd)=@flspd then isnull(ac.LactationNo,c.LactationNos) else isnull(ac.LactationNo,c.LactationNos)+1 end)LactationNo,
            isnull(lvac.LookupValuesId,0)AiTypeId,isnull(lvac.LookupValue,'')AiType,isnull(lvat.LookupValuesId,0)LastNoOfAIId,isnull(lvat.LookupValue,'')LastNoOfAI,isnull(ac.CallDate,'')LastCallDate,
            case when isnull(lsm.SocietyCode,'')='' then '' else concat(lsm.SocietyCode,' - ',lsm.SocietyName,(case lsm.IsRegisteredSociety when 1 then '' else ' *' end)) end LastSociety,
            case when isnull(isnull(lfm.FarmerCode,lnfm.FarmerCode),'')='' then '' 
				when isnull(isnull(lfm.FarmerNameGuj,lnfm.FarmerNameGuj),'')<>'' and isnull(lfm.FarmerCode,lnfm.FarmerCode)=isnull(lfm.FarmerNameEng,lnfm.FarmerNameEng)
					then concat(isnull(lfm.FarmerCode,lnfm.FarmerCode),' - ',isnull(lfm.FarmerNameGuj,lnfm.FarmerNameGuj)) 
				else concat(isnull(lfm.FarmerCode,lnfm.FarmerCode),' - ',isnull(lfm.FarmerNameEng,lnfm.FarmerNameEng)) end LastFarmer,isnull(ac.Remarks,'')Remarks,
            isnull((case when cl.CalvingId is null then ac.Cycle when cl.Status=@abrt or cl.Status=@flspd then 1 else (ac.Cycle+1) end),0)Cycle,
			lcsm.SocietyMasterId OldSocietyId,concat(lcsm.SocietyCode,' - ',lcsm.SocietyName,(case lcsm.IsRegisteredSociety when 1 then '' else ' *' end))OldSociety,c.IsRegisteredFarmer IsOldRegistered,
			isnull(lcfm.FarmerMasterId,lcnfm.NonRegisteredFarmerId) OldFarmerId,concat(isnull(lcfm.FarmerCode,lcnfm.FarmerCode),' - ',isnull(lcfm.FarmerNameEng,lcnfm.FarmerNameEng),(case c.IsRegisteredFarmer when 1 then '' else ' *' end))OldFarmer,
			c.CattleTypeId OldCattleTypeId,isnull(lvct.LookupValue,'')OldCattleType,isnull(bm.BreedMasterId,0) OldBreedId,isnull(bm.[Name],'')OldBreed,
			(case when atf.AnimalTransferId is not null then @inproc when acc.FarmerMasterId<>c.FarmerMasterId then @dotranf else 0 end)AnimalTransferEvent
            from CattleMaster c with(nolock)
			inner join AICall acc with(nolock) on acc.AICallId=@aicallid
            inner join SocietyMaster lcsm with(nolock) on lcsm.SocietyMasterId=c.SocietyMasterId
            	and isnull(c.TagNo,'')<>'' and ltrim(rtrim(c.TagNo))=@tcode
            left outer join FarmerMaster lcfm with(nolock) on lcfm.FarmerMasterId=c.FarmerMasterId and c.IsRegisteredFarmer=1
            left outer join NonRegisteredFarmer lcnfm with(nolock) on lcnfm.NonRegisteredFarmerId=c.FarmerMasterId and c.IsRegisteredFarmer=0
			left outer join LookupValues lvct with(nolock) on lvct.LookupValuesId=c.CattleTypeId
			left outer join BreedMaster bm with(nolock) on bm.BreedMasterId=c.BreedMasterId
            left outer join (select top 1 * from AICall iac with(nolock) 
            	where iac.TagCode=@tcode and iac.CallStatus=@cstatus and iac.IsActive=@act
            	order by iac.CloseDate desc)ac 
            	on ac.TagCode=c.TagNo
            left outer join SocietyMaster lsm with(nolock) on lsm.SocietyMasterId=ac.SocietyMasterId
            left outer join FarmerMaster lfm with(nolock) on lfm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
            left outer join NonRegisteredFarmer lnfm with(nolock) on lnfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
            left outer join LookupValues lvat on lvat.LookupValuesId=ac.NoOfAI
            left outer join PDEntry p with(nolock) on p.AICallId=ac.AICallId
            left outer join Calving cl with(nolock) on cl.PDEntryId=p.PDEntryId
            left outer join LookupValues lvac on lvac.LookupValuesId=(case when isnull(ac.AICallId,'')='' or isnull(c.CalvingId,'')<>'' or isnull(p.StatusTypeId,0)=@pgnt then @fst 
            	when 10>datediff(day,cast(ac.CloseDate as date),cast(getdate() as date)) then @rpt24 else @rpt end)
			left outer join AnimalTransfer atf with(nolock) on atf.TagNo=@tcode and atf.ApprovalStatus=@pending
            order by ac.AICallId desc,ac.CloseDate desc";

        private const string BullCorrectionsEmployeeExportQuery = @"select ai.callnumber callnumber, sm.SocietyCode+'-'+(case sm.IsRegisteredSociety when 0 then sm.SocietyName+' *' else sm.SocietyName end) as society, oldbm.BullNo oldbull, newbm.bullno newbull, su.NameEng as createdby, format(bcl.CreatedOn,'dd/MM/yyyy hh:mm tt') createdon
            from bullcorrectionlog bcl inner join aicall ai with(nolock) on bcl.AICallId = ai.AICallId
            left outer join BullMaster oldbm with(nolock) on bcl.oldbullmasterid = oldbm.BullMasterId
            inner join BullMaster newbm with(nolock) on bcl.newbullmasterid = newbm.BullMasterId
            inner join SystemUser su with(nolock) on su.SystemUserId= bcl.CreatedBy
            inner join SocietyMaster sm with(nolock) on ai.SocietyMasterId = sm.SocietyMasterId
            {0}";

        private const string BullCorrectionsEmployeeQuery = @"select ai.callnumber callnumber, sm.SocietyCode+'-'+(case sm.IsRegisteredSociety when 0 then sm.SocietyName+' *' else sm.SocietyName end) as society, oldbm.BullNo oldbull, newbm.bullno newbull, su.NameEng as createdby, format(bcl.CreatedOn,'dd/MM/yyyy hh:mm tt') createdon
            from bullcorrectionlog bcl inner join aicall ai with(nolock) on bcl.AICallId = ai.AICallId
            left outer join BullMaster oldbm with(nolock) on bcl.oldbullmasterid = oldbm.BullMasterId
            inner join BullMaster newbm with(nolock) on bcl.newbullmasterid = newbm.BullMasterId
            inner join SystemUser su with(nolock) on su.SystemUserId= bcl.CreatedBy
            inner join SocietyMaster sm with(nolock) on ai.SocietyMasterId = sm.SocietyMasterId
            {0}";

        private const string BullCorrectionsRestExportQuery = @"select ai.callnumber callnumber, sm.SocietyCode+'-'+(case sm.IsRegisteredSociety when 0 then sm.SocietyName+' *' else sm.SocietyName end) as society, oldbm.BullNo oldbull, newbm.bullno newbull, su.NameEng as createdby, format(bcl.CreatedOn,'dd/MM/yyyy hh:mm tt') createdon
            from bullcorrectionlog bcl inner join aicall ai with(nolock) on bcl.AICallId = ai.AICallId
            left outer join BullMaster oldbm with(nolock) on bcl.oldbullmasterid = oldbm.BullMasterId
            inner join BullMaster newbm with(nolock) on bcl.newbullmasterid = newbm.BullMasterId
            inner join SystemUser su with(nolock) on su.SystemUserId= bcl.CreatedBy
            inner join SocietyMaster sm with(nolock) on ai.SocietyMasterId = sm.SocietyMasterId
            {0}";

        private const string BullCorrectionsRestQuery = @"select ai.callnumber callnumber, sm.SocietyCode+'-'+(case sm.IsRegisteredSociety when 0 then sm.SocietyName+' *' else sm.SocietyName end) as society, oldbm.BullNo oldbull, newbm.bullno newbull, su.NameEng as createdby, format(bcl.CreatedOn,'dd/MM/yyyy hh:mm tt') createdon
            from bullcorrectionlog bcl inner join aicall ai with(nolock) on bcl.AICallId = ai.AICallId
            left outer join BullMaster oldbm with(nolock) on bcl.oldbullmasterid = oldbm.BullMasterId
            inner join BullMaster newbm with(nolock) on bcl.newbullmasterid = newbm.BullMasterId
            inner join SystemUser su with(nolock) on su.SystemUserId= bcl.CreatedBy
            inner join SocietyMaster sm with(nolock) on ai.SocietyMasterId = sm.SocietyMasterId
            {0}";

        private const string BullCorrectionsAIWorkerQuery = @"select ai.callnumber callnumber, sm.SocietyCode+'-'+(case sm.IsRegisteredSociety when 0 then sm.SocietyName+' *' else sm.SocietyName end) as society, oldbm.BullNo oldbull, newbm.bullno newbull, su.NameEng as createdby, format(bcl.CreatedOn,'dd/MM/yyyy hh:mm tt') createdon
            from bullcorrectionlog bcl inner join aicall ai with(nolock) on bcl.AICallId = ai.AICallId
            left outer join BullMaster oldbm with(nolock) on bcl.oldbullmasterid = oldbm.BullMasterId
            inner join BullMaster newbm with(nolock) on bcl.newbullmasterid = newbm.BullMasterId
            inner join SystemUser su with(nolock) on su.SystemUserId= bcl.CreatedBy
            inner join SocietyMaster sm with(nolock) on ai.SocietyMasterId = sm.SocietyMasterId
            {0}";

        public const string AICallsByTagCodeQuery = @"select ac.AICallId,format(ac.CallDate,'dd/MM/yyyy')CallDate,format(ac.CallDate,'hh:mm tt')CallTime,ac.CallNumber,lvcs.LookupValue as CallStatus,
                    lvct.LookupValue as CattleType,ac.ContactName,isnull(ac.TagCode,'')TagCode,isnull(ln.LookupValue,'')NDDBType,format(ac.UpdatedOn,'dd/MM/yyyy')UpdatedOnDate,format(ac.UpdatedOn,'hh:mm tt')UpdatedOnTime,
                     isnull(em.AgentCode,'')AgentCode,isnull(sur.NameEng,'')EmployeeName,isnull(case ac.IsReliver when 1 then awr.AIWorkerCode else aw.AIWorkerCode end,'')AiWorkerCode,isnull(case ac.IsReliver when 1 then concat(sur.NameEng,' (Reliver of ',su.NameEng,')') else su.NameEng end,'') AiWorkerName,cast(ac.ContactNo as varchar(256)) as ContactNo
                    ,sm.SocietyCode, sm.SocietyName Society, isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,case when isnull(isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj),'')<>'' and isnull(fm.FarmerCode,nfm.FarmerCode)=isnull(fm.FarmerNameEng,nfm.FarmerNameEng)
				    then isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) else isnull(fm.FarmerNameEng,nfm.FarmerNameEng) end Farmer,isnull(lvag.LookupValue,'') as AgeGroup
                    ,ac.LactationNo,isnull(bm.BullNo,'')BullNo, ac.TotalAI,isnull(lvNoa.LookupValue,'')NoOfAI,ac.NoOfStraw,format(ac.CloseDate,'dd/MM/yyyy')CloseDate,format(ac.CloseDate,'hh:mm tt')CloseTime,cast(isnull(r.Reason,'') as varchar(256)) as Reason
                    ,isnull(lv.LookupValue,'') as RequestedThrough,case bm.IsSexedSemen when 1 then 'Yes' when 0 then 'No' else null end SexedSemen,
                    case when (lvStatus.LookupValue <>'Close' and ac.CallStatus <> '') then '' else isnull(lvreq.LookupValue,'Not Checked') end AIRequestStatus
                    from AICall ac
                    inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId
                    inner join LookupValues lvcs on ac.CallStatus=lvcs.LookupValuesId and ac.TagCode=@tCode and ac.Cycle = @cycle and ac.CallStatus=@cstatus
                    inner join LookupValues lvct on ac.CattleTypeId=lvct.LookupValuesId
                    inner join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=ac.AIWorkerMasterId
                    inner join SystemUser su with(nolock) on su.RefId=aw.AIWorkerMasterId and su.UserType=@utype
                    left outer join AIReason r with(nolock) on r.AIReasonId=ac.AIReasonId
                    left outer join SystemUser sur with(nolock) on sur.RefId=ac.CreatedBy and sur.UserType=@utype
                    left outer join EmployeeMaster em with (nolock) on em.EmployeeMasterId=sur.RefId
                    left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
                    left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
                    left outer join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
                    left outer join CattleMaster ct with(nolock) on(CASE WHEN ISNULL(ct.TagNo,'')<>'' then ct.TagNo END)=ac.TagCode
			        left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
                    left outer join LookupValues lvNoa on lvNoa.LookupValuesId=ac.NoOfAI
                    left outer join LookupValues lvag with(nolock) on lvag.LookupValuesId=ac.AgeGroupTypeId
                    left outer join LookupValues lv with(nolock) on lv.LookupValuesId=ac.RequestedThrough
                    left outer join LookupValues lvStatus on lvStatus.LookupValuesId=ac.CallStatus
					left outer join LookupValues lvreq with(nolock) on lvreq.LookupValuesId=ac.AIRequestStatus
					left outer join AIWorkerMaster awr with(nolock) on ac.IsReliver=@act and awr.AIWorkerMasterId=ac.AIWorkerMasterId";

        public const string GetTagCodeByFarmerSocNddbQuery = @"select isnull(ct.TagNo,'')TagNo,isnull(ln.LookupValue,'NDDB')TagType,ct.NDDBTypeId,isnull(ac.AnimalName,'')AnimalName, sm.SocietyCode, sm.SocietyName Society, isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,
                          case when isnull(isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj),'')<>'' and isnull(fm.FarmerCode,nfm.FarmerCode)=isnull(fm.FarmerNameEng,nfm.FarmerNameEng)  
                          then isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) else isnull(fm.FarmerNameEng,nfm.FarmerNameEng) end Farmer
                          from CattleMaster ct
                          inner join AICall ac with(nolock) on ac.TagCode=ct.TagNo
                          inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ct.SocietyMasterId 
						  inner join LookupValues lvct on ct.CattleTypeId=lvct.LookupValuesId 
                          left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ct.FarmerMasterId and ct.IsRegisteredFarmer=1
                          left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ct.FarmerMasterId and ct.IsRegisteredFarmer=0
						  left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
                          where  ct.SocietyMasterId=@societyid and 
						  isnull(fm.FarmerMasterId,nfm.NonRegisteredFarmerId)=@farmerid 
						  and isnull(ct.TagNo,'')<>'' and ( ct.NDDBTypeId IS NULL or ct.NDDBTypeId=155 or ct.NDDBTypeId=0)";

        public const string GetTagCodeByFarmerSocNonNddbQuery = @"select isnull(ct.TagNo,'')TagNo,isnull(ln.LookupValue,'')TagType,ct.NDDBTypeId,isnull(ac.AnimalName,'')AnimalName, sm.SocietyCode, sm.SocietyName Society, isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,
                          case when isnull(isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj),'')<>'' and isnull(fm.FarmerCode,nfm.FarmerCode)=isnull(fm.FarmerNameEng,nfm.FarmerNameEng)  
                          then isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) else isnull(fm.FarmerNameEng,nfm.FarmerNameEng) end Farmer
                          from CattleMaster ct 
                          inner join AICall ac with(nolock) on ac.TagCode=ct.TagNo
                          inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ct.SocietyMasterId 
						  inner join LookupValues lvct on ct.CattleTypeId=lvct.LookupValuesId 
                          left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ct.FarmerMasterId and ct.IsRegisteredFarmer=1
                          left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ct.FarmerMasterId and ct.IsRegisteredFarmer=0
						  left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
                          where  ct.SocietyMasterId=@societyid and isnull(fm.FarmerMasterId,nfm.NonRegisteredFarmerId)=@farmerid 
						  and isnull(ct.TagNo,'')<>'' and ct.NDDBTypeId=156";

        public const string GetTagCodeBySocNddbQuery = @"select isnull(ct.TagNo,'')TagNo,isnull(ln.LookupValue,'NDDB')TagType,ct.NDDBTypeId,isnull(cd.AnimalName,'')AnimalName, sm.SocietyCode, sm.SocietyName Society, isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,
                          case when isnull(isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj),'')<>'' and isnull(fm.FarmerCode,nfm.FarmerCode)=isnull(fm.FarmerNameEng,nfm.FarmerNameEng)  
                          then isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) else isnull(fm.FarmerNameEng,nfm.FarmerNameEng) end Farmer
                          from CattleMaster ct
                          left join AICall ac with(nolock) on ac.TagCode=ct.TagNo
                          inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ct.SocietyMasterId 
						  inner join LookupValues lvct on ct.CattleTypeId=lvct.LookupValuesId 
                          left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ct.FarmerMasterId and ct.IsRegisteredFarmer=1
                          left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ct.FarmerMasterId and ct.IsRegisteredFarmer=0
						  left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
                           inner join CampDetail cd on cd.CattleMasterId=ct.CattleMasterId
                          where  ct.SocietyMasterId=@societyid and isnull(ct.TagNo,'')<>'' and ( ct.NDDBTypeId IS NULL or ct.NDDBTypeId=155 or ct.NDDBTypeId=0)";

        public const string GetTagCodeBySocNonNddbQuery = @"select isnull(ct.TagNo,'')TagNo,isnull(ln.LookupValue,'')TagType,ct.NDDBTypeId,isnull(cd.AnimalName,'')AnimalName, sm.SocietyCode, sm.SocietyName Society, isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,
                          case when isnull(isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj),'')<>'' and isnull(fm.FarmerCode,nfm.FarmerCode)=isnull(fm.FarmerNameEng,nfm.FarmerNameEng)  
                          then isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) else isnull(fm.FarmerNameEng,nfm.FarmerNameEng) end Farmer
                          from CattleMaster ct 
                          left join AICall ac with(nolock) on ac.TagCode=ct.TagNo
                          inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ct.SocietyMasterId 
						  inner join LookupValues lvct on ct.CattleTypeId=lvct.LookupValuesId 
                          left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ct.FarmerMasterId and ct.IsRegisteredFarmer=1
                          left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ct.FarmerMasterId and ct.IsRegisteredFarmer=0
						  left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
                          inner join CampDetail cd on cd.CattleMasterId=ct.CattleMasterId                          
                          where  ct.SocietyMasterId=@societyid and isnull(ct.TagNo,'')<>'' and ct.NDDBTypeId=156";

        #endregion

        #region Service Implementation
        public ApiResponse GetAIReason()
        {
            ApiResponse apiResponse;
            List<AIReasonModel> lstReason;
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoAiReason = new Repository<AIReasonModel>(connection);
                lstReason = _repoAiReason.ReadAll(status: RecordStatusEnum.Active, orderBy: "Reason").ToList();
                if (lstReason == null)
                    apiResponse = new ApiResponse()
                    {
                        Message = _culture.GetString("msg_ReasonNotFound"),
                        StatusCode = StatusCodes.Status404NotFound
                    };
                else
                    apiResponse = new ApiResponse()
                    {
                        Data = lstReason,
                        StatusCode = StatusCodes.Status200OK
                    };
            }
            return apiResponse;
        }

        public ApiResponse GetAll(Pagination pagination, string searchBy, string searchCol, Enums.CallStatus status)
        {
            long callnumber = 0;
            if (!string.IsNullOrEmpty(searchCol) && !long.TryParse(searchBy, out callnumber))
            {
                return new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = _culture.GetString("msg_NoAiCallFound")
                };
            }
            return Get(pagination, status,
                string.IsNullOrWhiteSpace(searchBy)
                ? "" : string.IsNullOrWhiteSpace(searchCol)
                ? @"where ac.CallNumber like concat('%',@srcBy,'%') or 
                    sm.SocietyCode like concat('%',@srcBy,'%') or sm.SocietyName like concat('%',@srcBy,'%') or 
                    isnull(fm.FarmerCode,nfm.FarmerCode) like concat('%',@srcBy,'%') or 
					isnull(fm.FarmerNameEng,nfm.FarmerNameEng) like concat('%',@srcBy,'%') or 
                    isnull(fm.FarmerNameEng,nfm.FarmerNameEng) like concat('%',@srcBy,'%') or 
                    lv.LookupValue like concat('%',@srcBy,'%') or 
                    su.NameEng like concat('%',@srcBy,'%') or su.NameGuj like concat('%',@srcBy,'%') or ac.TagCode=@srcBy"
                    : long.TryParse(searchBy, out callnumber) ? @"where " + searchCol + " = @srcBy" : "",
                new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                new Parameter("cStatus", System.Data.DbType.Int32, (int)status),
                new Parameter("uTyp", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                new Parameter("uId", System.Data.DbType.Int64, Convert.ToInt64(_currentUser?.Info?.Id)),
                new Parameter("srcBy", System.Data.DbType.String, searchBy?.Trim()));
        }

        public ApiResponse GetForDevice(Pagination pagination, Enums.CallStatus status,
            string societyCode, string searchBy, DateTime? date, int? isSexedSemen = null)
        {
            return Get(pagination, status,
                $@"where {(!societyCode.Equals("0") ? "sm.SocietyCode=isnull(@code,sm.SocietyCode) and " : "")}
                {(isSexedSemen.HasValue && isSexedSemen.Value >= 0 ? " bm.IsSexedSemen=@isSexedSemen and" : "")}
                (isnull(fm.FarmerCode,nfm.FarmerCode) like concat('%',isnull(@srcBy,isnull(fm.FarmerCode,nfm.FarmerCode)),'%') or 
                isnull(fm.FarmerNameEng,nfm.FarmerNameEng) like concat('%',isnull(@srcBy,isnull(fm.FarmerNameEng,nfm.FarmerNameEng)),'%') or 
                isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) like concat('%',isnull(@srcBy,isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj)),'%') or 
                cast(ac.CallNumber as varchar(20))=isnull(@srcBy,cast(ac.CallNumber as varchar(20))) or ac.ContactNo=isnull(@srcby,ac.ContactNo) or                 
                ac.TagCode=isnull(@srcBy,ac.TagCode)){(date.HasValue ? " and ac.CallDate between @from and @to" : "")}",
                new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                new Parameter("cStatus", System.Data.DbType.Int32, (int)status),
                new Parameter("uTyp", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                new Parameter("uId", System.Data.DbType.Int64, Convert.ToInt64(_currentUser?.Info?.Id)),
                new Parameter("code", System.Data.DbType.AnsiString, societyCode),
                new Parameter("srcBy", System.Data.DbType.String, string.IsNullOrWhiteSpace(searchBy) || searchBy == "0"
                    ? null : searchBy?.Trim()),
                new Parameter("from", System.Data.DbType.DateTime, date?.Date),
                new Parameter("to", System.Data.DbType.DateTime, date?.Date.AddDays(1).AddMilliseconds(-2)),
                new Parameter("isSexedSemen", System.Data.DbType.Boolean, isSexedSemen));
        }

        public ApiResponse Add(AICallCrudModel aiModel, bool internalcall = true, bool callFromFarm365 = false)
        {
            if (!string.IsNullOrWhiteSpace(aiModel.TagCode) && !aiModel.TagCode.VerifyTagNo())
                return BadRequest(callFromFarm365 ? "msg_InvalidTag" : $"Invalid Tag #{aiModel.TagCode}");

            if (internalcall && (string.IsNullOrWhiteSpace(aiModel.SocietyCode) || !aiModel.SocietyCode.Trim().TrimEnd(' ', '*').All(char.IsDigit)))
                return BadRequest($"Invalid Society Code {aiModel.SocietyCode}");

            if (internalcall && (string.IsNullOrWhiteSpace(aiModel.FarmerCode) || !aiModel.FarmerCode.Trim().TrimEnd(' ', '*').All(char.IsDigit)))
                return BadRequest($"Invalid Farmer Code {aiModel.FarmerCode}");

            aiModel.RequestedThrough = aiModel.RequestedThrough ?? (int)Enums.RequestedThrough.Call;
            ApiResponse apiResponse = default(ApiResponse);
            AICallModel inserted = default(AICallModel);

            var times = new List<KeyValuePair<string, TimeSpan>>();
            var watch = new System.Diagnostics.Stopwatch();
            watch.Start();
            var start = watch.Elapsed;

            bool _proceed = true;
            // CattleMasterModel objCattleMaster;
            ReTaggingModel objReTagging;
            using (var connection = Tenant.GetConnection(_httpContext))
            {


                if (_retagging.IsCurrentTagNoExists(aiModel.TagCode))
                {
                    apiResponse = new ApiResponse
                    {
                        Message = _culture.GetString("msg_LastTagNoExist"),
                        StatusCode = StatusCodes.Status409Conflict
                    };
                }
                else if (_retagging.IsNewTagPendingForApproval(aiModel.TagCode))
                {
                    apiResponse = new ApiResponse
                    {
                        Message = _culture.GetString("msg_RetaggingPending"),
                        StatusCode = StatusCodes.Status409Conflict
                    };
                }

                else if (inserted == null)
                {
                    _repoAiCall = new Repository<AICallModel>(connection);
                    CodeName<int, int> validation = ValidateAiCallEntry(_repoAiCall, aiModel);
                    times.Add(new KeyValuePair<string, TimeSpan>("Validation Check", watch.Elapsed));
                    switch (validation.Code)
                    {
                        case (int)Enums.AiCallValidation.Dead:
                            apiResponse = BadRequest(callFromFarm365 ? "msg_AnimalIsDead" : "Animal is Dead/Sold. AI Can't Be Perform");
                            break;
                        case (int)Enums.AiCallValidation.CalvingPending:
                            apiResponse = BadRequest(callFromFarm365 ? "msg_AnimalIsPregnant" : "Animal is Pregnant. Perform Calving First");
                            break;
                        case (int)Enums.AiCallValidation.RecentCalving:
                            apiResponse = BadRequest(callFromFarm365 ? "msg_CalvingPerformed" : "Calving Performed Recently On Animal. Wait 45 Days to Perform AI");
                            break;
                        case (int)Enums.AiCallValidation.NewBornCalf:
                            apiResponse = BadRequest(callFromFarm365 ? "msg_CalfNotMatureForAi" : string.Format("Calf With Tag #{0} Not Mature Enough For AI", aiModel.TagCode));
                            break;
                        default:
                            if (!internalcall && (!aiModel.SocietyMasterId.HasValue || 0 == aiModel.SocietyMasterId
                                || !aiModel.FarmerMasterId.HasValue || 0 == aiModel.FarmerMasterId))
                            {
                                _proceed = false;
                                Log.Error($"AI Request({(Enums.RequestedThrough)(aiModel.RequestedThrough ?? (int)Enums.RequestedThrough.NA)}): {JsonConvert.SerializeObject(aiModel)}");
                                apiResponse = BadRequest(callFromFarm365 ? "msg_SomethingWentWrong" : "Society or Farmer Missing in Request");
                            }
                            else
                            {
                                _repoAiCall.BeginTransaction();
                                if (internalcall)
                                {
                                    _repoSociety = new Repository<SocietyMasterModel>(_repoAiCall.Transaction);
                                    _repoFarmer = new Repository<FarmerMasterModel>(_repoAiCall.Transaction);
                                    _repoNonFarmer = new Repository<NonRegisteredFarmerMasterModel>(_repoAiCall.Transaction);
                                    _repoCattleMaster = new Repository<CattleMasterModel>(_repoAiCall.Transaction);
                                }

                                #region AI Worker Call Entry
                                try
                                {
                                    if (internalcall)
                                    {
                                        aiModel.SocietyMasterId = AddSociety(aiModel.SocietyCode, aiModel.SocietyName, _repoSociety)?.SocietyMasterId;

                                        if (aiModel.IsRegisteredFarmer)
                                            aiModel.FarmerMasterId = AddFarmer(aiModel.FarmerCode, aiModel.FarmerNameEng, aiModel.FarmerNameGuj,
                                                aiModel.SocietyMasterId, _repoFarmer, aiModel.RequestedThrough)?.FarmerMasterId;
                                        else
                                            aiModel.FarmerMasterId = GetNonRegisteredFarmer(aiModel?.SocietyMasterId, aiModel.FarmerCode, _repoNonFarmer)
                                                ?.FarmerMasterId;

                                        times.Add(new KeyValuePair<string, TimeSpan>("AddUpdate Society-Farmer", watch.Elapsed));
                                    }

                                    #region Add AI Call
                                    string sqlQuery = @"insert into AiCall(CallNumber,SocietyMasterId,FarmerMasterId,IsRegisteredFarmer,TagCode,
                            	ContactName,ContactNo,[Address],CallDate,CattleTypeId,BreedMasterId,AIWorkerMasterId,IsReliver,ReliverId,CallStatus,Remarks,Cycle,CreatedBy,RequestedThrough,DigitalTag)
                            output Inserted.AICallId,Inserted.CallNumber
                            values(dbo.getCallNUmber(),@SocId,@FarId,@IsRegFarmer,@Tag,@ContName,@ContNo,@Add,@CallDate,@CatTypeId,@BrdMstId,
                            	@AIWorkId,@IsRlvr,@RlvrId,@callSts,@Rmks,@cycle,@crtBy,@request,@digitalTag)";

                                    inserted = _repoAiCall.ReadAllQuery(sqlQuery,
                                        new
                                        {
                                            SocId = aiModel.SocietyMasterId,
                                            FarId = aiModel.FarmerMasterId,
                                            IsRegFarmer = aiModel.IsRegisteredFarmer,
                                            Tag = aiModel.TagCode,
                                            ContName = aiModel.ContactName,
                                            ContNo = aiModel.ContactNo,
                                            Add = aiModel.Address,
                                            CatTypeId = aiModel.CattleTypeId,
                                            BrdMstId = aiModel.BreedMasterId,
                                            AIWorkId = aiModel.AIWorkerMasterId,
                                            IsRlvr = aiModel.IsReliver,
                                            RlvrId = aiModel.ReliverId,
                                            callSts = (int)Enums.CallStatus.Open,
                                            Rmks = aiModel.Remarks,
                                            cycle = GetCycle(_repoAiCall, aiModel.TagCode),
                                            crtBy = _currentUser?.Info?.Id ?? (long)Enums.DefaultUser.Admin,
                                            request = aiModel.RequestedThrough,
                                            digitalTag = aiModel.DigitalTag,
                                            CallDate = aiModel.CallDate
                                            //,aiRequestStatus = aiModel.AIRequestStatus
                                        }).FirstOrDefault();
                                    #endregion

                                    #region Add In Cattle Master
                                    AddUpdateCattle(_repoCattleMaster, aiModel, aiModel.FarmerMasterId, aiModel.SocietyMasterId);
                                    #endregion

                                    _repoAiCall.Commit();
                                    times.Add(new KeyValuePair<string, TimeSpan>("Register Call Commit", watch.Elapsed));
                                    apiResponse = new ApiResponse
                                    {
                                        StatusCode = StatusCodes.Status200OK,
                                        Message = callFromFarm365 ? "msg_AiRequestEventSuccess" : string.Format("Call Registered with #{0}", inserted.CallNumber),
                                        Data = inserted.CallNumber
                                    };
                                }
                                catch (Exception ex)
                                {
                                    _proceed = false;
                                    _repoAiCall.Rollback();
                                    times.Add(new KeyValuePair<string, TimeSpan>("Register Call Rollback", watch.Elapsed));
                                    Log.Error(ex, $"Register Call: {aiModel.ContactNo} | Request Through: {aiModel.RequestedThrough} | Tag: {aiModel.TagCode}");
                                    apiResponse = new ApiResponse
                                    {
                                        StatusCode = StatusCodes.Status400BadRequest,
                                        Message = ex.Message
                                    };
                                }
                                #endregion
                            }

                            #region Send SMS to AI Worker
                            if (_proceed && 0 < inserted?.AICallId)
                            {
                                apiResponse = SendNotificationOnRegister(inserted,
                                    callFromFarm365 ? "msg_AiRequestEventSuccess" : string.Format("Call Registered with Ticket #{0}", inserted.CallNumber),
                                    new string[] { "aiworkercontactno" }, "Register");
                                apiResponse.Data = inserted.CallNumber;
                            }

                            times.Add(new KeyValuePair<string, TimeSpan>("Send Notification", watch.Elapsed));
                            #endregion
                            break;
                    }
                }


            }

            watch.Stop();
            times.Add(new KeyValuePair<string, TimeSpan>("Total Time", watch.Elapsed - start));
            Log.Error($"Timing Measurement: {Newtonsoft.Json.JsonConvert.SerializeObject(times)}");
            return apiResponse;
        }

        public ApiResponse GetById(long AiCallId)
        {
            Log.Error("Method Start time" + DateTime.Now.ToString());
            ApiResponse response = default(ApiResponse);
            AICallCrudModel result;
            SystemSettingsModel result1;
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoAiCall = new Repository<AICallModel>(connection);
                _repoSystemSetting = new Repository<SystemSettingsModel>(connection);
              
                Log.Error("Sql Start time" + DateTime.Now.ToString());
                string strQuery = @"select  ac.AICallId,case sm.IsRegisteredSociety when 1 then sm.SocietyCode else sm.SocietyCode+' *' end SocietyCode,
					case sm.IsRegisteredSociety when 1 then sm.SocietyName else sm.SocietyName+' *' end SocietyName,
					isnull(fm.FarmerCode,nfm.FarmerCode+' *')FarmerCode,isnull(fm.FarmerNameEng,nfm.FarmerNameEng+' *')FarmerNameEng,
					ac.CallNumber,ac.SocietyMasterId,ac.FarmerMasterId,ac.IsRegisteredFarmer,isnull(ac.TagCode,'')TagCode, 
                    isnull(ac.ContactNo,'')ContactNo,isnull(ac.ContactName,'')ContactName,isnull(ac.LactationNo,'')LactationNo, 
                    ac.NoOfAI,ac.AIWorkerMasterId,ac.IsReliver,ac.ReliverId,isnull(ac.[Address],'')[Address],ac.CallDate,isnull(ac.CloseDate,'')CloseDate,ac.CallStatus, 
                    isnull(ac.Remarks,'')Remarks,ac.Cycle,isnull(ac.AgeGroupTypeId,0)AgeGroupTypeId,isnull(lvag.LookupValue,'')AgeGroup,isnull(ac.CattleTypeId,0)CattleTypeId,
                    isnull(ac.BreedMasterId,'')BreedMasterId,isnull(ac.AIReasonId,0)AIReasonId, 
                    isnull(ac.BullMasterId,'')BullMasterId,isnull(BullNo,'')BullNo,isnull(ac.Latitude,'')Latitude,isnull(ac.Longitude,'')Longitude,
                    isnull(lvac.LookupValuesId,0)AiTypeId,isnull(lvac.LookupValue,'')AiType,isnull(lac.NoOfAI,0)LastNoOfAIId,isnull(lvlat.LookupValue,'')LastNoOfAI,isnull(lac.CallDate,'')LastCallDate,
					isnull(ac.TotalAI,0)TotalAI,case when isnull(lsm.SocietyCode,'')='' then '' else (lsm.SocietyCode+' - '+lsm.SocietyName) end LastSociety,
                    isnull(ac.AIRequestStatus,0) AIRequestStatus,
					case when isnull(isnull(lfm.FarmerCode,lnfm.FarmerCode),'')='' then '' 
						when isnull(lfm.FarmerCode,'')<>'' then (lfm.FarmerCode+' - '+lfm.FarmerNameEng) 
						else (lnfm.FarmerCode+' - '+lnfm.FarmerNameEng) end LastFarmer,isnull(ac.NoOfStraw,0)NoOfStraw,bm.IsSexedSemen,
                    ac.CreatedBy,ac.CreatedOn,ac.UpdatedBy,ac.UpdatedOn,ac.IsActive,ac.VersionNo,isnull(lntypeCM.CultureValue,'')TagType,   
                    (Case When ac.AICallId=cac.AICallId and p.PDEntryId is null and c.CalvingId is null Then 1 else 0 end)IsEditable,ac.BullImageId,ac.FarmerImageId,ac.TagImageId,ac.IsTagImageEdited,ac.ScannedTagCode
                    ,isnull(ac.validateImage,'')validateImage ,isnull(ac.ValidateLatitude,'')ValidateLatitude,isnull(ac.ValidateLongitude,'')ValidateLongitude,isnull(suaw.NameEng,'')ValidatePersonName,isnull(sur.RoleName,'')ValidatePersonRole,isnull(cm.IsSexedSemenCalf,'')IsSexedSemenCalf 
                    ,isnull(sm.IsDigitalCertificate,0)IsDigitalCertificate,isnull(ac.CertificateValue,0)CertificateValue,isnull(ac.CertificateNumber,'')CertificateNumber
                    from AICall ac with(nolock)
                    left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1 
                    inner join SocietyMaster sm with(nolock) on ac.SocietyMasterId=sm.SocietyMasterId and ac.AICallId=@acallId and ac.IsActive=@act 		
                    left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
          			left outer join BullMaster bm with(nolock) on bm.BullMasterId=ac.BullMasterId
                    left outer join LookupValues lvag with(nolock) on lvag.LookupValuesId=ac.AgeGroupTypeId
                    left outer join CattleMaster ct with(nolock) on ct.TagNo=ac.TagCode  and ac.FarmerMasterId=ct.FarmerMasterId and sm.SocietyMasterId=ct.SocietyMasterId
			        left outer join LookupValues ln with(nolock) on ln.LookupValuesId=ct.NDDBTypeId
                    left outer join CultureKey lntype on lntype.CultureKey = ln.CultureKey
				    left outer join CultureKeyMapping lntypeCM on lntypeCM.CultureKeyId = lntype.CultureKeyId and lntypeCM.CultureId = @cultureId
                    -- left outer join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=ac.AIWorkerMasterId
                    left outer join SystemUser suaw with(nolock) on ac.UpdatedBy=suaw.SystemUserId 
                    left outer join SystemUserRole sur on sur.SystemUserRoleId=suaw.SystemUserRoleId
				    outer apply(select top 1 iac.SocietyMasterId,iac.FarmerMasterId,iac.IsRegisteredFarmer,iac.NoOfAI,iac.CallDate,iac.CloseDate from AICall iac 
						where iac.TagCode=ac.TagCode and iac.AiGroup=ac.AiGroup and iac.TotalAI<ac.TotalAI order by iac.TotalAI desc)lac
					left outer join SocietyMaster lsm with(nolock) on lsm.SocietyMasterId=lac.SocietyMasterId
					left outer join FarmerMaster lfm with(nolock) on lfm.FarmerMasterId=lac.FarmerMasterId and lac.IsRegisteredFarmer=1
					left outer join NonRegisteredFarmer lnfm with(nolock) on lnfm.NonRegisteredFarmerId=lac.FarmerMasterId and lac.IsRegisteredFarmer=0
                    left outer join LookupValues lvlat on lvlat.LookupValuesId=lac.NoOfAI
					outer apply(select top 1 iac.AICallId from AICall iac where iac.TagCode=ac.TagCode and iac.CallStatus=@cstatus order by CloseDate desc)cac
                    left outer join CattleMaster cm with(nolock) on cm.CattleMasterId = ac.CattleMasterId
					left outer join PDEntry p with(nolock) on p.AICallId=ac.AICallId
                    left outer join Calving c with(nolock) on c.PDEntryId=p.PDEntryId
					left outer join LookupValues lvac on lvac.LookupValuesId=(case when ac.CallStatus=@cstatus then ac.NoOfAI 
                        when isnull(c.CalvingId,'')<>'' or isnull(p.StatusTypeId,0)=@pgnt or lac.CloseDate is null then @fst 
						when 10>datediff(day,cast(lac.CloseDate as date),cast(getdate() as date)) then @rpt24 else @rpt end) where ac.AICallId=@acallId";

                result = _repoAiCall.Query<AICallCrudModel, AICallModel>(strQuery,
                    new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                    new Parameter("acallId", System.Data.DbType.Int64, AiCallId),
                    new Parameter("cstatus", System.Data.DbType.Int32, (int)Enums.CallStatus.Close),
                    new Parameter("pgnt", System.Data.DbType.Int32, (int)Enums.PDStatus.Pregnant),
                    new Parameter("fst", System.Data.DbType.Int32, (int)Enums.NoOfAI.FirstAI),
                    new Parameter("rpt24", System.Data.DbType.Int32, (int)Enums.NoOfAI.HrRepeat24),
                    new Parameter("rpt", System.Data.DbType.Int32, (int)Enums.NoOfAI.RepeatAI),
                    new Parameter("cultureId", System.Data.DbType.Int64, HeaderAccessor.Culture)).FirstOrDefault();

                
                result1=_repoSystemSetting.Query<SystemSettingsModel, SystemSettingsModel>("select s.KeyValue,s.KeyName from SystemSettings s where s.KeyName='AllowDigitalCertificate' and s.IsActive=1").FirstOrDefault();

                if(result1.KeyValue=="true" && result.IsDigitalCertificate==true)
                {
                    result.IsDigitalCertificate=true;
                    result.KeyName = result1.KeyName;
                    result.KeyValue= result1.KeyValue;
                }
                else 
                {
                    result.IsDigitalCertificate = false;
                    result.KeyName = result1.KeyName;
                    result.KeyValue = result1.KeyValue;
                }
                Log.Error("Sql ENd" + DateTime.Now.ToString());
            }

            if (null == result)
                return new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = _culture.GetString("msg_RecordNotFound")
                };

            if (!string.IsNullOrEmpty(result.BullImageId))
            {
                Log.Error("BullIMage StartTime" + DateTime.Now.ToString());
                BullImage objBullImageFile = _mongoService.DownloadFile<BullImage>(MongoDB.Bson.ObjectId.Parse(result.BullImageId)).GetAwaiter().GetResult();
                if (objBullImageFile != null)
                {
                    string base64String = Convert.ToBase64String(objBullImageFile.Contents, 0, objBullImageFile.Contents.Length);
                    result.BullImageBase64 = !string.IsNullOrEmpty(base64String) ? base64String : string.Empty;
                }
                Log.Error("BullIMage EndTime" + DateTime.Now.ToString());
            }
            else
                result.BullImageBase64 = string.Empty;


            if (!string.IsNullOrEmpty(result.FarmerImageId))
            {
                Log.Error("FarmerImageId Start time" + DateTime.Now.ToString());
                FarmerImage objFarmerImageFile = _mongoService.DownloadFile<FarmerImage>(MongoDB.Bson.ObjectId.Parse(result.FarmerImageId)).GetAwaiter().GetResult();
                if (objFarmerImageFile != null)
                {
                    string base64String = Convert.ToBase64String(objFarmerImageFile.Contents, 0, objFarmerImageFile.Contents.Length);
                    result.FarmerImageBase64 = !string.IsNullOrEmpty(base64String) ? base64String : string.Empty;
                }
                Log.Error("FarmerImageId EndTime" + DateTime.Now.ToString());
            }
            else
                result.FarmerImageBase64 = string.Empty;

            if (!string.IsNullOrEmpty(result.TagImageId))
            {
                Log.Error("TagImageId SatrtTime" + DateTime.Now.ToString());
                TagImage objTagImageFile = _mongoService.DownloadFileBlob<TagImage>(result.TagImageId).GetAwaiter().GetResult();
                if (objTagImageFile.Contents != null)
                {
                    string base64String = Convert.ToBase64String(objTagImageFile.Contents, 0, objTagImageFile.Contents.Length);
                    result.TagImageBase64 = !string.IsNullOrEmpty(base64String) ? base64String : string.Empty;

                }

                else
                    result.TagImageBase64 = string.Empty;
                Log.Error("TagImageId EndTime" + DateTime.Now.ToString());
            }
            else
                result.TagImageBase64 = string.Empty;
            if (!string.IsNullOrEmpty(result.validateImage))
            {
                Log.Error("validateImage StartTime" + DateTime.Now.ToString());
                ValidateImage objValidateImageFile = _mongoService.DownloadFile<ValidateImage>(MongoDB.Bson.ObjectId.Parse(result.validateImage)).GetAwaiter().GetResult();
                if (objValidateImageFile != null)
                {
                    string base64String = Convert.ToBase64String(objValidateImageFile.Contents, 0, objValidateImageFile.Contents.Length);
                    result.validateImageBase64 = !string.IsNullOrEmpty(base64String) ? base64String : string.Empty;
                }
                else
                    result.validateImageBase64 = string.Empty;
                Log.Error("validateImage EndTime" + DateTime.Now.ToString());
            }
            else
                result.validateImageBase64 = string.Empty;

            if (null == result)
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = _culture.GetString("msg_RecordNotFound")
                };
            else
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status200OK,
                    Data = result
                };
            Log.Error("Method end time" + DateTime.Now.ToString());
            return response;
        }

        public TagVerifiedModel GetByTagNo(string tagNo)
        {
            TagVerifiedModel result = default(TagVerifiedModel);
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoAiCall = new Repository<AICallModel>(connection);
                result = _repoAiCall.Query<TagVerifiedModel, AICallModel>(AiCallCattleDetailsByTag,
                    new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                    new Parameter("tcode", System.Data.DbType.AnsiString, tagNo),
                    new Parameter("cstatus", System.Data.DbType.Int32, (int)Enums.CallStatus.Close),
                    new Parameter("pgnt", System.Data.DbType.Int32, (int)Enums.PDStatus.Pregnant),
                    new Parameter("fst", System.Data.DbType.Int32, (int)Enums.NoOfAI.FirstAI),
                    new Parameter("rpt24", System.Data.DbType.Int32, (int)Enums.NoOfAI.HrRepeat24),
                    new Parameter("rpt", System.Data.DbType.Int32, (int)Enums.NoOfAI.RepeatAI),
                    new Parameter("abrt", System.Data.DbType.Int32, (int)Enums.CalvingStatus.Abortion),
                    new Parameter("flspd", System.Data.DbType.Int32, (int)Enums.CalvingStatus.FalsePD)).FirstOrDefault();
            }

            if (null == result)
                result = new TagVerifiedModel { AiType = "First AI", LactationNo = -1, TagNo = tagNo };

            return result;
        }

        public TagVerifiedModel GetByTagNoForAiCall(string tagNo, long aiCallId)
        {
            TagVerifiedModel result = default(TagVerifiedModel);
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoAiCall = new Repository<AICallModel>(connection);
                result = _repoAiCall.Query<TagVerifiedModel, AICallModel>(AiCallCattleDetailsByTagForAiCall,
                    new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                    new Parameter("tcode", System.Data.DbType.AnsiString, tagNo),
                    new Parameter("aicallid", System.Data.DbType.Int64, aiCallId),
                    new Parameter("cstatus", System.Data.DbType.Int32, (int)Enums.CallStatus.Close),
                    new Parameter("pgnt", System.Data.DbType.Int32, (int)Enums.PDStatus.Pregnant),
                    new Parameter("fst", System.Data.DbType.Int32, (int)Enums.NoOfAI.FirstAI),
                    new Parameter("rpt24", System.Data.DbType.Int32, (int)Enums.NoOfAI.HrRepeat24),
                    new Parameter("rpt", System.Data.DbType.Int32, (int)Enums.NoOfAI.RepeatAI),
                    new Parameter("abrt", System.Data.DbType.Int32, (int)Enums.CalvingStatus.Abortion),
                    new Parameter("flspd", System.Data.DbType.Int32, (int)Enums.CalvingStatus.FalsePD),
                    new Parameter("dotranf", System.Data.DbType.Int32, (int)Enums.AnimalTransferEvent.DoTransfer),
                    new Parameter("inproc", System.Data.DbType.Int32, (int)Enums.AnimalTransferEvent.InProcess),
                    new Parameter("pending", System.Data.DbType.Int32, (int)Enums.AnimalTransferStatus.Pending),
                    new Parameter("calf", System.Data.DbType.Int32, (int)Enums.AgeGroupType.Calf),
                    new Parameter("heifer", System.Data.DbType.Int32, (int)Enums.AgeGroupType.Heifer),
                    new Parameter("adult", System.Data.DbType.Int32, (int)Enums.AgeGroupType.Adult))
                    .FirstOrDefault();
            }

            if (null == result)
                result = new TagVerifiedModel { AiType = "First AI", LactationNo = -1 };

            return result;
        }

        public bool IsCattleDead(string tagNo)
        {
            Enums.CalfStatus status;
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                status = (Enums.CalfStatus)new Repository<CattleMasterModel>(connection)
                    .Query<int>("select isnull([Status],@live) from CattleMaster where TagNo=@tagNo",
                   new { tagNo, live = Enums.CalfStatus.Live });
            }
            return Enums.CalfStatus.Dead == status;
        }

        public async Task<ApiResponse> Update(long AiCallId, AICallCrudModel aiModel, IFormFile bullImage, IFormFile farmerImage, IFormFile tagImage, IFormFile animalImage)
        {
            if (Request.Platform.Android == _platform && (aiModel.NDDBTypeId == (int)Enums.NDDBType.NDDB) && !aiModel.TagCode.VerifyTagNo())
                return BadRequest(string.Format(_culture.GetString("msg_InvalidTag"), aiModel.TagCode));

            else if (Request.Platform.Android == _platform && (aiModel.NDDBTypeId == (int)Enums.NDDBType.NonNDDB) && !aiModel.TagCode.VerifyNonNDDBTagNo())
                return BadRequest(string.Format(_culture.GetString("msg_InvalidTag"), aiModel.TagCode));

            else if (Request.Platform.Android == _platform && (aiModel.NDDBTypeId.IsEmpty() || aiModel.NDDBTypeId.Value == 0) && !aiModel.TagCode.VerifyTagNo())
                return BadRequest(string.Format(_culture.GetString("msg_InvalidTag"), aiModel.TagCode));


            if (Request.Platform.Android == _platform && aiModel.NoOfStraw.HasValue && aiModel.NoOfStraw > 1)
                return BadRequest(string.Format(_culture.GetString("msg_MaxNoofStraw"), 1));

            ApiResponse apiResponse;
            ReTaggingModel objReTagging;

            bool aiWorkerChanged = false;
            AICallModel aICallModel_Old = default(AICallModel);
            bool _proceed = false;
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                //Repository<ReTaggingModel> _repoRetagging = new Repository<ReTaggingModel>(connection);

                //objReTagging = _repoRetagging.ReadOne(criteria: "(isnull(CurrentTagNo,'')<>'' and CurrentTagNo=@tNo)",
                //   parameters: new { tNo = aiModel.TagCode });
                //if (objReTagging != null)
                if (_retagging.IsCurrentTagNoExists(aiModel.TagCode))
                {
                    apiResponse = new ApiResponse
                    {
                        Message = _culture.GetString("msg_LastTagNoExist"),//"Cattle Exist with Tag #{0}",
                        StatusCode = StatusCodes.Status409Conflict
                    };
                }
                else if (_retagging.IsNewTagPendingForApproval(aiModel.TagCode))
                {
                    apiResponse = new ApiResponse
                    {
                        Message = _culture.GetString("msg_RetaggingPending"),
                        StatusCode = StatusCodes.Status409Conflict
                    };
                }
                else
                {
                    _repoAiCall = new Repository<AICallModel>(connection);
                    CodeName<int, int> validation = ValidateAiCallEntry(_repoAiCall, aiModel, Request.Platform.Android == _platform);
                    switch (validation.Code)
                    {
                        case (int)Enums.AiCallValidation.Dead:
                            apiResponse = BadRequest(_culture.GetString("msg_AnimalIsDead"));
                            break;
                        case (int)Enums.AiCallValidation.CalvingPending:
                            apiResponse = BadRequest(_culture.GetString("msg_AnimalIsPregnant"));
                            break;
                        case (int)Enums.AiCallValidation.RecentCalving:
                            apiResponse = BadRequest(_culture.GetString("msg_CalvingPerformed"));
                            break;
                        case (int)Enums.AiCallValidation.NewBornCalf:
                            apiResponse = BadRequest(string.Format(_culture.GetString("msg_CalfNotMatureForAi"), aiModel.TagCode));
                            break;
                        case (int)Enums.AiCallValidation.NoOfStrawRequired:
                            apiResponse = BadRequest(string.Format(_culture.GetString("msg_NoofStrawRequired")));
                            break;
                        //case (int)Enums.AiCallValidation.NoOfStrawExceed:
                        //    apiResponse = BadRequest(string.Format(_culture.GetString("msg_MaxNoofStraw"), validation.Name));
                        //    break;
                        default:
                            _repoAiCall.BeginTransaction();
                            _repoSociety = new Repository<SocietyMasterModel>(_repoAiCall.Transaction);
                            _repoFarmer = new Repository<FarmerMasterModel>(_repoAiCall.Transaction);
                            _repoNonFarmer = new Repository<NonRegisteredFarmerMasterModel>(_repoAiCall.Transaction);
                            _repoCattleMaster = new Repository<CattleMasterModel>(_repoAiCall.Transaction);

                            aICallModel_Old = _repoAiCall.ReadOne(aiModel.AICallId);
                            aiWorkerChanged = aiModel.AIWorkerMasterId != aICallModel_Old.AIWorkerMasterId;

                            #region AI Worker Call Entry
                            try
                            {
                                aiModel.SocietyMasterId = AddSociety(aiModel.SocietyCode, aiModel.SocietyName, _repoSociety)?.SocietyMasterId;
                                //if (aiModel.IsRegisteredFarmer)
                                //    aiModel.FarmerMasterId = AddFarmer(aiModel.FarmerCode, aiModel.FarmerNameEng, aiModel.FarmerNameGuj,
                                //        aiModel.SocietyMasterId, _repoFarmer)?.FarmerMasterId;
                                //else
                                //    aiModel.FarmerMasterId = GetNonRegisteredFarmer(aiModel.SocietyMasterId, aiModel.FarmerCode, _repoNonFarmer)
                                //        ?.FarmerMasterId;

                                #region Update AI Call
                                if (Request.Platform.Android == _platform)
                                {
                                    aiModel.CallStatus = (int)Enums.CallStatus.Close;
                                    DateTime? defaultdate = new DateTime(1900, 1, 1);
                                    aiModel.CloseDate = aiModel.CloseDate == defaultdate || aICallModel_Old.CloseDate == defaultdate
                                        ? DateTime.Now : aiModel.CloseDate + DateTime.Now.TimeOfDay;
                                    //aiModel.CloseDate = DateTime.Now;
                                    aiModel.Cycle = GetCycle(_repoAiCall, aiModel.TagCode);
                                    aiModel.NoOfStraw = 1;

                                    CodeName<int, int> tottalaiandgroup = GetTotalAiAndGroup(_repoAiCall, aiModel.TagCode);
                                    aiModel.TotalAI = tottalaiandgroup.Code;
                                    aiModel.AiGroup = tottalaiandgroup.Name;
                                    aiModel.NDDBTypeId = ((aiModel.NDDBTypeId ?? 0L) == 0L ? null : aiModel.NDDBTypeId);
                                    aiModel.CertificateValue = ((aiModel.CertificateValue ?? 0L) == 0L ? null : aiModel.CertificateValue);
                                    aiModel.CertificateNumber = string.IsNullOrWhiteSpace(aiModel.CertificateNumber) ? null : aiModel.CertificateNumber;
                                    aiModel.AnimalName = aiModel.AnimalName;
                                    aiModel.AgeGroupTypeId = (aiModel.AgeGroupTypeId ?? 0) == 0 || aiModel.AgeGroupTypeId == (int)Enums.AgeGroupType.Calf || aiModel.AgeGroupTypeId == (int)Enums.AgeGroupType.Heifer ? GetCattleAgeGroupTypeId(_repoAiCall, aiModel.TagCode) : aiModel.AgeGroupTypeId;
                                }
                                else
                                {
                                    DateTime? defaultdate = new DateTime(1900, 1, 1);
                                    aiModel.CallStatus = aICallModel_Old.CallStatus;
                                    aiModel.CloseDate = aiModel.CloseDate == defaultdate || aICallModel_Old.CloseDate == defaultdate
                                        ? null : aICallModel_Old.CloseDate;
                                    aiModel.AgeGroupTypeId = (aICallModel_Old.AgeGroupTypeId ?? 0) == 0 || aICallModel_Old.AgeGroupTypeId == (int)Enums.AgeGroupType.Calf || aiModel.AgeGroupTypeId == (int)Enums.AgeGroupType.Heifer ? GetCattleAgeGroupTypeId(_repoAiCall, aiModel.TagCode) : aICallModel_Old.AgeGroupTypeId;
                                    aiModel.LactationNo = aICallModel_Old.LactationNo;
                                    aiModel.Cycle = aICallModel_Old.Cycle;
                                    aiModel.TotalAI = aICallModel_Old.TotalAI;
                                    aiModel.AiGroup = aICallModel_Old.AiGroup;
                                    aiModel.SemenStockAllocationId = aICallModel_Old.SemenStockAllocationId;
                                    aiModel.NoOfStraw = aICallModel_Old.NoOfStraw;
                                }
                                aiModel.AutoRemind = aICallModel_Old.AutoRemind;
                                aiModel.IsReliver = aICallModel_Old.IsReliver;
                                aiModel.ReliverId = aICallModel_Old.ReliverId;
                                aiModel.RequestedThrough = aICallModel_Old.RequestedThrough;
                                aiModel.AIRequestStatus = aICallModel_Old.AIRequestStatus;
                                aiModel.BullImageId = aICallModel_Old.BullImageId;
                                aiModel.FarmerImageId = aICallModel_Old.FarmerImageId;
                                aiModel.TagImageId = aICallModel_Old.TagImageId;
                                aiModel.IsTagImageEdited = aICallModel_Old.IsTagImageEdited;
                                aiModel.ScannedTagCode = aICallModel_Old.ScannedTagCode;
                                aiModel.AnimalImageId = aICallModel_Old.AnimalImageId;

                                aiModel.CreatedBy = aICallModel_Old.CreatedBy;
                                aiModel.CreatedOn = aICallModel_Old.CreatedOn;
                                aiModel.VersionNo = aICallModel_Old.VersionNo;

                                aICallModel_Old = aiModel.GetMapped(aICallModel_Old);
                                aICallModel_Old.AIReasonId = ((aiModel.AIReasonId ?? 0L) == 0L ? null : aiModel.AIReasonId);
                                aICallModel_Old.BullMasterId = ((aiModel.BullMasterId ?? 0L) == 0L ? null : aiModel.BullMasterId);
                                aICallModel_Old.UpdatedBy = _currentUser?.Info?.Id;
                                aICallModel_Old.UpdatedOn = DateTime.Now;
                                aICallModel_Old.IsActive = true;
                                aICallModel_Old.Longitude = string.IsNullOrWhiteSpace(aiModel.Longitude) ? null : aiModel.Longitude;
                                aICallModel_Old.Latitude = string.IsNullOrWhiteSpace(aiModel.Latitude) ? null : aiModel.Latitude;
                                aICallModel_Old.NoOfAI = Request.Platform.Android == _platform
                                    ? _repoAiCall.NoOfAI(aiModel.TagCode ?? aICallModel_Old.TagCode)
                                    : aICallModel_Old.NoOfAI;

                                if (Request.Platform.Android == _platform)
                                {
                                    aICallModel_Old.BullImageId = InsertBullImage(bullImage).GetAwaiter().GetResult();
                                    aICallModel_Old.FarmerImageId = InsertFarmerImage(farmerImage).GetAwaiter().GetResult();
                                    aICallModel_Old.TagImageId = InsertTagImage(tagImage).GetAwaiter().GetResult();
                                    aICallModel_Old.IsTagImageEdited = aiModel.IsTagImageEdited;
                                    aICallModel_Old.ScannedTagCode = aiModel.ScannedTagCode;
                                    aICallModel_Old.AnimalImageId = InsertAnimalImage(animalImage).GetAwaiter().GetResult();
                                }

                                aICallModel_Old.CattleMasterId = CattleMasterIdByTagCode(_repoCattleMaster, aiModel.TagCode);
                                if (aICallModel_Old.CattleMasterId == null || aICallModel_Old.CattleMasterId == 0)
                                {
                                    #region Add In Cattle Master
                                    AddUpdateCattle(_repoCattleMaster, aICallModel_Old,
                                        aICallModel_Old.FarmerMasterId, aICallModel_Old.SocietyMasterId,
                                        Request.Platform.Android == _platform ? aiModel : null);
                                    #endregion
                                    aICallModel_Old.CattleMasterId = CattleMasterIdByTagCode(_repoCattleMaster, aiModel.TagCode); ;
                                    _repoAiCall.Update(aICallModel_Old);
                                }
                                else
                                {
                                    _repoAiCall.Update(aICallModel_Old);
                                    #region Update In Cattle Master
                                    AddUpdateCattle(_repoCattleMaster, aICallModel_Old,
                                        aICallModel_Old.FarmerMasterId, aICallModel_Old.SocietyMasterId,
                                        Request.Platform.Android == _platform ? aiModel : null);
                                    #endregion
                                }
                                #endregion

                                _repoAiCall.Commit();
                                if (aiModel.CertificateNumber != null)
                                {
                                 bool apiresult = await Task.FromResult(CouponUser(new CouponUserModel() { device_id = aiModel.deviceId, ref_no = aiModel.CallNumber, coupon_code = aiModel.CertificateNumber })).Result;
                                   
                                }

                                _proceed = !_proceed;
                                apiResponse = new ApiResponse
                                {
                                    StatusCode = StatusCodes.Status200OK,
                                    Message = string.Format(_culture.GetString("msg_ChangesSavedToTicket"), aICallModel_Old.CallNumber)
                                };
                            }
                            catch (Exception ex)
                            {
                                _proceed = false;
                                _repoAiCall.Rollback();
                                Log.Error(ex, $"Platform: {_platform} | Tag: {aiModel.TagCode}");
                                apiResponse = new ApiResponse
                                {
                                    StatusCode = StatusCodes.Status400BadRequest,
                                    Message = _culture.GetString("msg_SomethingWentWrong")
                                };
                            }
                            #endregion

                            //if (!_proceed)
                            //{
                            //    #region Send SMS to Farmer & AI Worker
                            //    string message = string.Format(_culture.GetString("msg_ChangesSavedToTicket"), aICallModel_Old?.CallNumber);
                            //    TemplateDetailModel objTemplateDetail = _generalMaster.GetTemplateDetailById((int)Enums.Template.AfterCompletionOfAI, (int)Enums.Culture.Gujarati);
                            //    var test= new Repository<AICallModel>(connection);
                            //    test.BeginTransaction();
                            //    if ((int)Enums.CallStatus.Close == aiModel.CallStatus)

                            //        apiResponse = SendNotification<ISmsServiceProvider, AICallModel>(test, message,
                            //            objTemplateDetail.Message,
                            //            new string[] { "contactno" },
                            //            Enums.AIAppSMSType.AfterCompletionOfAI,
                            //            string.Format("Ticket #{0}", aICallModel_Old?.CallNumber),
                            //            AiCallCompleteTemplateQuery, objTemplateDetail.TemplateNo,
                            //            new Parameter("uType", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                            //            new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                            //            new Parameter("acid", System.Data.DbType.Int64, aICallModel_Old.AICallId),
                            //            new Parameter("culture", System.Data.DbType.Int32, (int)Tenant.GetTenant(_httpContext).Culture));
                            //    else if (aiWorkerChanged)
                            //        apiResponse = SendNotificationOnRegister(aICallModel_Old, message,
                            //            new string[] { "aiworkercontactno" }, "Change in");
                            //    test.Commit();
                            //    #endregion

                            //    #region Sync Ai Event to Pep
                            //    if ((int)Enums.CallStatus.Close == aICallModel_Old.CallStatus)
                            //        RunInBackground(()
                            //            => _pep.FeedEvent(Models.PepSystem.Enums.AnimalEvent.FeedAiEvent, aICallModel_Old.AICallId, Tenant.GetTenant(_httpContext)));
                            //    #endregion

                            //    #region Campaign Notification
                            //    Campaign campaign = Tenant.GetTenant(_httpContext).CurrentCampaign;
                            //    if (null != campaign && (int)Enums.CallStatus.Close == aICallModel_Old.CallStatus && DateTime.Today <= campaign.Expire)
                            //        RunInBackground(() => Task.Run(() => SendNotification<ISmsServiceProvider>(
                            //            campaign.Template, 0,
                            //            new List<CodeName<string, string>> { new CodeName<string, string> { Name = "contactno", Code = aICallModel_Old.ContactNo } },
                            //            new string[] { "contactno" },
                            //            Enums.AIAppSMSType.AfterCompletionOfAI,
                            //            string.Format("Campaign for Ticket #{0}", aICallModel_Old?.CallNumber))));
                            //    #endregion
                            //}
                            break;
                    }
                }
            }

            if (_proceed)
            {
                #region Sync Ai Event to Pep
                Log.Error($"NOT AN ERROR :: Sync Ai Event to Pep Started for AICallId:{aICallModel_Old.AICallId}");
                if ((int)Enums.CallStatus.Close == aiModel.CallStatus || (int)Enums.CallStatus.Close == aICallModel_Old.CallStatus)
                {
                    Log.Error($"NOT AN ERROR :: Sync Ai Event to Pep Condition Satisfied for AICallId:{aICallModel_Old.AICallId}");
                    RunInBackground(()
                        => _pep.FeedEvent(Models.PepSystem.Enums.AnimalEvent.FeedAiEvent, aICallModel_Old.AICallId, Tenant.GetTenant(_httpContext)));
                }
                Log.Error($"NOT AN ERROR :: Sync Ai Event to Pep Completed for AICallId:{aICallModel_Old.AICallId}");
                #endregion


                using (var connection = Tenant.GetConnection(_httpContext))
                {
                    #region Send SMS to Farmer & AI Worker
                    string message = string.Format(_culture.GetString("msg_ChangesSavedToTicket"), aICallModel_Old?.CallNumber);
                    TemplateDetailModel objTemplateDetail = _generalMaster.GetTemplateDetailById((int)Enums.Template.AfterCompletionOfAI, (int)Enums.Culture.Gujarati);
                    //  var test = new Repository<AICallModel>(connection);
                    //test.BeginTransaction();
                    if ((int)Enums.CallStatus.Close == aiModel.CallStatus)

                        apiResponse = SendNotification<ISmsServiceProvider, AICallModel>(new Repository<AICallModel>(connection), message,
                            objTemplateDetail.Message,
                            new string[] { "contactno" },
                            Enums.AIAppSMSType.AfterCompletionOfAI,
                            string.Format("Ticket #{0}", aICallModel_Old?.CallNumber),
                            AiCallCompleteTemplateQuery, objTemplateDetail.TemplateNo,
                            new Parameter("uType", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                            new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                            new Parameter("acid", System.Data.DbType.Int64, aICallModel_Old.AICallId),
                            new Parameter("culture", System.Data.DbType.Int32, (int)Tenant.GetTenant(_httpContext).Culture));
                    else if (aiWorkerChanged)
                        apiResponse = SendNotificationOnRegister(aICallModel_Old, message,
                            new string[] { "aiworkercontactno" }, "Change in");
                    //  test.Commit();
                    #endregion
                }

                #region Campaign Notification
                Campaign campaign = Tenant.GetTenant(_httpContext).CurrentCampaign;
                if (null != campaign && (int)Enums.CallStatus.Close == aICallModel_Old.CallStatus && DateTime.Today <= campaign.Expire)
                    RunInBackground(() => Task.Run(() => SendNotification<ISmsServiceProvider>(
                        campaign.Template, 0,
                        new List<CodeName<string, string>> { new CodeName<string, string> { Name = "contactno", Code = aICallModel_Old.ContactNo } },
                        new string[] { "contactno" },
                        Enums.AIAppSMSType.AfterCompletionOfAI,
                        string.Format("Campaign for Ticket #{0}", aICallModel_Old?.CallNumber))));
                #endregion
            }
            return apiResponse;
        }

        public ApiResponse GetAllByTagCode(Pagination pagination, string tagCode)
        {
            ApiResponse response;
            Pagination<FarmerCallHistoryModel> pgData;
            pagination.SortBy = string.IsNullOrWhiteSpace(pagination.SortBy) ? "ac.AICallId desc" : pagination.SortBy.Trim();
            string strQuery = string.Empty;
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoAiCall = new Repository<AICallModel>(connection);
                strQuery = $@"select ac.AICallId,ac.CallDate,ac.CallNumber,lvcs.LookupValue as CallStatus,
                    lvct.LookupValue as CattlesSpecies,ac.ContactName,
                    case ac.IsReliver when 1 then concat(sur.NameEng,' (Reliver of ',su.NameEng,')') else su.NameEng end AIWorkerName
                    from AICall ac
                    inner join LookupValues lvcs on ac.CallStatus=lvcs.LookupValuesId and ac.TagCode=@tCode
                    inner join LookupValues lvct on ac.CattleTypeId=lvct.LookupValuesId
                    inner join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=ac.AIWorkerMasterId
                    inner join SystemUser su with(nolock) on su.RefId=aw.AIWorkerMasterId and su.UserType=@utype
                    left outer join SystemUser sur with(nolock) on sur.RefId=ac.ReliverId and sur.UserType=@utype";

                pgData = _repoAiCall.Query<FarmerCallHistoryModel, AICallModel>
                    (strQuery, pagination.SortBy,
                   pagination.PageNo, pagination.RecordsPerPage,
                   new Parameter("tCode", System.Data.DbType.String, tagCode),
                   new Parameter("utype", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker));

            }
            if (null == pgData?.Data || 0 >= pgData?.Data.Count())
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = "No Record Found"
                };
            else
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status200OK,
                    Data = pgData
                };
            return response;
        }

        public ApiResponse GetAllByTagCode(Pagination pagination, string tagCode, int cycle)
        {
            ApiResponse response;
            Pagination<AICAllReportModel> pgData;
            pagination.SortBy = string.IsNullOrWhiteSpace(pagination.SortBy) ? "ac.AICallId desc" : pagination.SortBy.Trim();
            string strQuery = string.Empty;
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoAiCall = new Repository<AICallModel>(connection);
                strQuery = AICallsByTagCodeQuery;

                pgData = _repoAiCall.Query<AICAllReportModel, AICallModel>(
                   strQuery, pagination.SortBy,
                   pagination.PageNo, pagination.RecordsPerPage,
                   new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                   new Parameter("tCode", System.Data.DbType.String, tagCode),
                   new Parameter("utype", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                    new Parameter("cycle", System.Data.DbType.Int32, cycle),
                    new Parameter("cstatus", System.Data.DbType.Int32, (int)Enums.CallStatus.Close));

            }
            if (null == pgData?.Data || 0 >= pgData?.Data.Count())
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = "No Record Found"
                };
            else
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status200OK,
                    Data = pgData
                };
            return response;
        }

        public byte[] GetAllByTagCodeExport(string tagCode, int cycle, string sortBy, string name)
        {
            string orderByClause = " ac.CallDate desc";
            string strQuery = AICallsByTagCodeQuery;

            List<Parameter> parameters = new List<Parameter>()
                {
                new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
               new Parameter("tCode", System.Data.DbType.String, tagCode),
               new Parameter("utype", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                new Parameter("cycle", System.Data.DbType.Int32, cycle),
                new Parameter("cstatus", System.Data.DbType.Int32, (int)Enums.CallStatus.Close) };

            return DataToExport<AICAllReportModelWithotTagType, AICallModel>(strQuery + (string.IsNullOrWhiteSpace(sortBy) ? " order by " + orderByClause : $" order by {sortBy}"),
                     parameters.ToArray()).ToExcel(name);
        }
        public byte[] GetAllByTagCodeExportAllowNddb(string tagCode, int cycle, string sortBy, bool nddbtype, string name)
        {
            string orderByClause = " ac.CallDate desc";
            string strQuery = AICallsByTagCodeQuery;

            List<Parameter> parameters = new List<Parameter>()
                {
                new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
               new Parameter("tCode", System.Data.DbType.String, tagCode),
               new Parameter("utype", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                new Parameter("cycle", System.Data.DbType.Int32, cycle),
                new Parameter("cstatus", System.Data.DbType.Int32, (int)Enums.CallStatus.Close) };

            return DataToExport<AICAllReportModel, AICallModel>(strQuery + (string.IsNullOrWhiteSpace(sortBy) ? " order by " + orderByClause : $" order by {sortBy}"),
                     parameters.ToArray()).ToExcel(name);
        }

        public ApiResponse AICallCancel(long AiCallId, long? reasonId)
        {
            ApiResponse apiResponse = default(ApiResponse);
            AICallModel aICallModel;
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoAiCall = new Repository<AICallModel>(connection);
                aICallModel = _repoAiCall.ReadOne(AiCallId);
                if (aICallModel == null)
                    apiResponse = new ApiResponse()
                    {
                        Message = _culture.GetString("msg_CallDeatilsNotFound"),
                        StatusCode = StatusCodes.Status404NotFound
                    };
                else
                {
                    aICallModel.CallStatus = (int)Enums.CallStatus.Cancel;
                    aICallModel.AIReasonId = reasonId;
                    aICallModel.UpdatedBy = _currentUser?.Info?.Id;
                    _repoAiCall.Update(aICallModel);

                    TemplateDetailModel objTemplateDetail = _generalMaster.GetTemplateDetailById((int)Enums.Template.ManualCancellation, (int)Enums.Culture.Gujarati);

                    apiResponse = SendNotification<ISmsServiceProvider, AICallModel>(_repoAiCall,
                        string.Format(_culture.GetString("msg_CallCancel"), aICallModel.CallNumber), objTemplateDetail?.Message,
                        new string[] { "contactno" },
                        Enums.AIAppSMSType.ManualCancellation,
                        string.Format("Manual Cancel Ticket #{0}", aICallModel.CallNumber),
                        @"select unpvt.FieldName as Name,unpvt.FieldValue as Code 
                        from (select cast(ac.ContactNo as varchar(256)) as ContactNo, cast(s.MobileNo as varchar(256)) as AIWorkerContactNo,
                        	cast(isnull(r.Reason,'') as varchar(256)) as Reason
                            from aicall ac with(nolock)
                            inner join SystemUser s on s.RefId=ac.AIWorkerMasterId and s.UserType=@uType and s.IsActive=@act 
                        		and ac.AICallId=@acid and ac.IsActive=@act
                            inner join AIReason r on r.AIReasonId=ac.AIReasonId
                        ) p unpivot (FieldValue for FieldName in (ContactNo,AIWorkerContactNo,Reason)
                        )AS unpvt", objTemplateDetail.TemplateNo,
                        new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                        new Parameter("acid", System.Data.DbType.Int64, AiCallId),
                        new Parameter("uType", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker));
                }
            }
            return apiResponse;
        }

        public ApiResponse SendReminder(long AiCallId)
        {
            ApiResponse response;
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoAiCall = new Repository<AICallModel>(connection);
                string callnumber = _repoAiCall.ReadOne(AiCallId)?.CallNumber;
                if (null == callnumber || string.Empty == callnumber)
                    response = new ApiResponse
                    {
                        Message = "Call Details Not Found",
                        StatusCode = StatusCodes.Status404NotFound
                    };
                else
                {
                    TemplateDetailModel objTemplateDetail = _generalMaster.GetTemplateDetailById((int)Enums.Template.ManualReminder, (int)Enums.Culture.Gujarati);
                    response = SendNotification<ISmsServiceProvider, AICallModel>(_repoAiCall,
                        string.Format("Reminder for Ticket #{0} Sent", callnumber), objTemplateDetail?.Message,
                        new string[] { "contactno", "aiworkercontactno" },
                        Enums.AIAppSMSType.ManualReminder,
                        string.Format("Manual Reminder For Ticket #{0}", callnumber),
                        @"select unpvt.FieldName as Name,unpvt.FieldValue as Code 
                        from (select cast(ac.ContactNo as varchar(50)) as ContactNo,cast(s.MobileNo as Varchar(50)) as AIWorkerContactNo
                        	from aicall ac with(nolock) 
                        	inner join SystemUser s on s.RefId=ac.AIWorkerMasterId and s.UserType=@uType and s.IsActive=@act
                        		and ac.AICallId=@acid and ac.IsActive=@act
                        ) p unpivot (FieldValue for FieldName in (ContactNo,AIWorkerContactNo)
                        )AS unpvt", objTemplateDetail.TemplateNo,
                        new Parameter("uType", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                        new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                        new Parameter("acid", System.Data.DbType.Int64, AiCallId));
                }
            }
            return response;
        }

        public ApiResponse GetFarmerHistoryByContact(Pagination pagination, string contact)
        {
            ApiResponse response;
            Pagination<FarmerHistoryModel> pgData;
            pagination.SortBy = string.IsNullOrWhiteSpace(pagination.SortBy) ? "AICallId desc" : pagination.SortBy.Trim();
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoAiCall = new Repository<AICallModel>(connection);
                pgData = _repoAiCall.Query<FarmerHistoryModel, AICallModel>(
                    @"select max(ac.AICallId)AICallId,sm.SocietyCode,sm.SocietyName,sm.IsRegisteredSociety,isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,
                    isnull(fm.FarmerNameEng,nfm.FarmerNameEng)FarmerName,isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj)FarmerNameGuj,
                    ac.IsRegisteredFarmer,isnull(ac.ContactName,'')ContactName,isnull(ac.[Address],'')[Address]
                    from AICall ac with(nolock)
                    inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId
                    	and ac.IsActive=@act and ac.ContactNo=@contact
                    left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
                    left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
                    group by sm.SocietyCode,sm.SocietyName,sm.IsRegisteredSociety,isnull(fm.FarmerCode,nfm.FarmerCode),isnull(fm.FarmerNameEng,nfm.FarmerNameEng),
                    isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj),ac.IsRegisteredFarmer,isnull(ac.ContactName,''),isnull(ac.[Address],'')",
                   pagination.SortBy, pagination.PageNo, pagination.RecordsPerPage,
                   new Parameter("contact", System.Data.DbType.AnsiString, contact),
                   new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active));
            }

            if (null == pgData?.Data || 0 >= pgData?.Data.Count())
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status204NoContent,
                    Message = "No Farmer History Found"
                };
            else
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status200OK,
                    Data = pgData
                };
            return response;
        }

        public ApiResponse GetCallHistoryByFarmer(Pagination pagination, string societyCode, string farmerCode)
        {
            ApiResponse response;
            Pagination<CallHistoryModel> pgData;
            pagination.SortBy = string.IsNullOrWhiteSpace(pagination.SortBy) ? "AICallId desc" : pagination.SortBy.Trim();
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoAiCall = new Repository<AICallModel>(connection);
                pgData = _repoAiCall.Query<CallHistoryModel, AICallModel>(
                    @"select ac.AICallId,ac.CallNumber,sm.SocietyCode,sm.SocietyName,sm.IsRegisteredSociety,isnull(fm.FarmerCode,nfm.FarmerCode)FarmerCode,
                    isnull(fm.FarmerNameEng,nfm.FarmerNameEng)FarmerName,isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj)FarmerNameGuj,
                    ac.IsRegisteredFarmer,ac.CallDate,isnull(lvcs.LookupValue,'')CallStatus,isnull(ac.ContactName,'')ContactName,isnull(ac.[Address],'')[Address],
                    ac.CattleTypeId,isnull(lvct.LookupValue,'')CattleType,isnull(ac.TagCode,'')TagCode,aw.AIWorkerMasterId,isnull(su.NameEng,'')AIWorkerName
                    from AICall ac with(nolock)
                    inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=ac.SocietyMasterId 
                        and ac.IsActive=@act and ac.CallStatus=@cStatus and sm.SocietyCode=@scode
                    left outer join FarmerMaster fm with(nolock) on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
                    left outer join NonRegisteredFarmer nfm with(nolock) on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0
                    left outer join AIWorkerMaster aw with(nolock) on aw.AIWorkerMasterId=ac.AIWorkerMasterId
                    left outer join SystemUser su with(nolock) on su.RefId=aw.AIWorkerMasterId and su.UserType=@utyp
                    left outer join LookupValues lvcs with(nolock) on lvcs.LookupValuesId=ac.CallStatus
                    left outer join LookupValues lvct with(nolock) on lvct.LookupValuesId=ac.CattleTypeId
                    where isnull(fm.FarmerCode,nfm.FarmerCode)=@fcode",
                   pagination.SortBy, pagination.PageNo, pagination.RecordsPerPage,
                   new Parameter("scode", System.Data.DbType.AnsiString, societyCode),
                   new Parameter("fcode", System.Data.DbType.AnsiString, farmerCode),
                   new Parameter("cStatus", System.Data.DbType.Int16, (int)Enums.CallStatus.Open),
                   new Parameter("utyp", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                   new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active));
            }

            if (null == pgData?.Data || 0 >= pgData?.Data.Count())
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status204NoContent,
                    Message = "No Call History Found"
                };
            else
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status200OK,
                    Data = pgData
                };
            return response;
        }

        public ApiResponse DetectCall()
        {
            ApiResponse response = default(ApiResponse);
            string agentCode = default(string);
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                agentCode = new Repository<EmployeeMasterModel>(connection)
                    .Query<string>(@"select em.AgentCode from EmployeeMaster em with(nolock)
                    inner join SystemUser su with(nolock) on su.RefId=em.EmployeeMasterId 
                    	and su.UserType=@utyp and su.SystemUserId=@uid",
                        new { utyp = (int)Enums.UserType.Employee, uid = _currentUser?.Info?.Id });
            }

            if (string.IsNullOrWhiteSpace(agentCode))
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = "Agent Code Not Found",
                    Data = string.Empty
                };
            else
            {
                AmulServer amulServer = Tenant.GetTenant(_httpContext).AmulServerDetail;
                if (amulServer != null)
                {
                    string activeCall = new Uri(new Uri(amulServer.BaseApi), $"{amulServer.Call}={agentCode}")
                    .Get<string>(OpenApi.Accept.html);

                    response = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status200OK,
                        Data = activeCall.Validate()
                    };
                }
            }
            return response;
        }

        //public ApiResponse AICallReport(Pagination pagination, AICAllReportFilterModel reportFilter)
        //{
        //    pagination.SortBy = string.IsNullOrWhiteSpace(pagination.SortBy) ? "AICallId desc" : pagination.SortBy.Trim();
        //    Pagination<AICAllReportModel> data = GetReport<AICAllReportModel>(reportFilter, pagination);

        //    ApiResponse response;
        //    if (null == data?.Data || 0 >= data?.Data.Count())
        //        response = new ApiResponse
        //        {
        //            StatusCode = StatusCodes.Status404NotFound,
        //            Message = "No AI Calls Found"
        //        };
        //    else
        //        response = new ApiResponse
        //        {
        //            StatusCode = StatusCodes.Status200OK,
        //            Data = data
        //        };
        //    return response;
        //}

        public ApiResponse GetAICallReportData(Pagination pagination, AICAllReportFilterModel reportFilter)
        {
            pagination.SortBy = string.IsNullOrWhiteSpace(pagination.SortBy) ? "AICallId desc" : pagination.SortBy.Trim();
            return ReportResponse(() => GetAIReportData(reportFilter, pagination), "No AI Calls Found");
        }

        public byte[] ExportAICallReportData(string sortBy, AICAllReportFilterModel reportFilter, string name)
        {
            var result = GetAIReportData(reportFilter, sortBy: sortBy);
            List<AIReportModel> AIReportData = new List<AIReportModel>();
            
            if (result.Data != null)
            {
                AIReportData = (List<AIReportModel>)result.Data;
            }

            if(reportFilter.AllowDigitalCertificate)
            {
                var data = AIReportData.ToList().Select(e => new
                {
                    e.CallNumber,
                    e.StrCallDate,
                    e.StrCallTime,
                    e.SocietyCode,
                    e.Society,
                    e.Farmer,
                    e.CattleType,
                    e.Breed,
                    e.TagCode,
                    e.AgeGroup,
                    e.LactationNo,
                    e.BullNo,
                    e.AgentCode,
                    e.EmployeeName,
                    e.AIWorker,
                    e.AIWorkerStatus,
                    e.ContactName,
                    e.ContactNo,
                    e.StrTotalAI,
                    e.NoOfAI,
                    e.StrNoOfStraw,
                    e.StrCloseDate,
                    e.StrCloseTime,
                    e.Reason,
                    e.CallStatus,
                    e.RequestedThrough,
                    e.SexedSemen,
                    e.AIRequestStatus,
                    e.ImageLatLong,
                    e.ValidateLatLong,
                    e.ValidatedBy,
                    e.StrValidatedOn,
                    e.CertificateValue,
                    e.CertificateNumber
                });

                #region Export Exl
                FileInfo file = new FileInfo(Path.Combine(name));
                using (ExcelPackage package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("AI Call Report");

                    int Cell = 1;

                    worksheet.Cells.LoadFromCollection(data, true);
                    worksheet.Cells[Cell, 1].Value = "Ticket#";
                    worksheet.Cells[Cell, 2].Value = "AI Call Date";
                    worksheet.Cells[Cell, 3].Value = "AI Call Time";
                    worksheet.Cells[Cell, 4].Value = "Society Code";
                    worksheet.Cells[Cell, 5].Value = "Society Name";
                    worksheet.Cells[Cell, 6].Value = "Farmer";
                    worksheet.Cells[Cell, 7].Value = "Cattle";
                    worksheet.Cells[Cell, 8].Value = "Breed";
                    worksheet.Cells[Cell, 9].Value = "Tag Number";
                    worksheet.Cells[Cell, 10].Value = "Age Group";
                    worksheet.Cells[Cell, 11].Value = "Lactation";
                    worksheet.Cells[Cell, 12].Value = "Bull No";
                    worksheet.Cells[Cell, 13].Value = "Agent Code";
                    worksheet.Cells[Cell, 14].Value = "User Name";
                    worksheet.Cells[Cell, 15].Value = "AI Worker";
                    worksheet.Cells[Cell, 16].Value = "AI Worker Status";
                    worksheet.Cells[Cell, 17].Value = "Contact Name";
                    worksheet.Cells[Cell, 18].Value = "Contact No";
                    worksheet.Cells[Cell, 19].Value = "No Of AI";
                    worksheet.Cells[Cell, 20].Value = "Type of AI";
                    worksheet.Cells[Cell, 21].Value = "No Of Straw";
                    worksheet.Cells[Cell, 22].Value = "AI Done Date";
                    worksheet.Cells[Cell, 23].Value = "AI Done Time";
                    worksheet.Cells[Cell, 24].Value = "Reason";
                    worksheet.Cells[Cell, 25].Value = "Status";
                    worksheet.Cells[Cell, 26].Value = "Requested Through";
                    worksheet.Cells[Cell, 27].Value = "Sexed Semen";
                    worksheet.Cells[Cell, 28].Value = "Validation";
                    worksheet.Cells[Cell, 29].Value = "Image Lat/Long Data";
                    worksheet.Cells[Cell, 30].Value = "Validate Lat/Long Data";
                    worksheet.Cells[Cell, 31].Value = "Validation Done By";
                    worksheet.Cells[Cell, 32].Value = "Validation Done Date";
                    worksheet.Cells[Cell, 33].Value = "Certificate Value";
                    worksheet.Cells[Cell, 34].Value = "Certificate Number";

                    worksheet.Cells[worksheet.Cells.Address].AutoFitColumns();

                    var range = worksheet.Cells[1, 1, data.Count() + 1, 34];
                    range.Style.Border.Top.Style = range.Style.Border.Bottom.Style
                    = range.Style.Border.Left.Style = range.Style.Border.Right.Style = ExcelBorderStyle.Thin;

                    return package.GetAsByteArray();
                }
                #endregion Export Exl
            }
            else
            {
                var data = AIReportData.ToList().Select(e => new
                {
                    e.CallNumber,
                    e.StrCallDate,
                    e.StrCallTime,
                    e.SocietyCode,
                    e.Society,
                    e.Farmer,
                    e.CattleType,
                    e.Breed,
                    e.TagCode,
                    e.AgeGroup,
                    e.LactationNo,
                    e.BullNo,
                    e.AgentCode,
                    e.EmployeeName,
                    e.AIWorker,
                    e.AIWorkerStatus,
                    e.ContactName,
                    e.ContactNo,
                    e.StrTotalAI,
                    e.NoOfAI,
                    e.StrNoOfStraw,
                    e.StrCloseDate,
                    e.StrCloseTime,
                    e.Reason,
                    e.CallStatus,
                    e.RequestedThrough,
                    e.SexedSemen,
                    e.AIRequestStatus,
                    e.ImageLatLong,
                    e.ValidateLatLong,
                    e.ValidatedBy,
                    e.StrValidatedOn
                });

                #region Export Exl
                FileInfo file = new FileInfo(Path.Combine(name));
                using (ExcelPackage package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("AI Call Report");

                    int Cell = 1;

                    worksheet.Cells.LoadFromCollection(data, true);
                    worksheet.Cells[Cell, 1].Value = "Ticket#";
                    worksheet.Cells[Cell, 2].Value = "AI Call Date";
                    worksheet.Cells[Cell, 3].Value = "AI Call Time";
                    worksheet.Cells[Cell, 4].Value = "Society Code";
                    worksheet.Cells[Cell, 5].Value = "Society Name";
                    worksheet.Cells[Cell, 6].Value = "Farmer";
                    worksheet.Cells[Cell, 7].Value = "Cattle";
                    worksheet.Cells[Cell, 8].Value = "Breed";
                    worksheet.Cells[Cell, 9].Value = "Tag Number";
                    worksheet.Cells[Cell, 10].Value = "Age Group";
                    worksheet.Cells[Cell, 11].Value = "Lactation";
                    worksheet.Cells[Cell, 12].Value = "Bull No";
                    worksheet.Cells[Cell, 13].Value = "Agent Code";
                    worksheet.Cells[Cell, 14].Value = "User Name";
                    worksheet.Cells[Cell, 15].Value = "AI Worker";
                    worksheet.Cells[Cell, 16].Value = "AI Worker Status";
                    worksheet.Cells[Cell, 17].Value = "Contact Name";
                    worksheet.Cells[Cell, 18].Value = "Contact No";
                    worksheet.Cells[Cell, 19].Value = "No Of AI";
                    worksheet.Cells[Cell, 20].Value = "Type of AI";
                    worksheet.Cells[Cell, 21].Value = "No Of Straw";
                    worksheet.Cells[Cell, 22].Value = "AI Done Date";
                    worksheet.Cells[Cell, 23].Value = "AI Done Time";
                    worksheet.Cells[Cell, 24].Value = "Reason";
                    worksheet.Cells[Cell, 25].Value = "Status";
                    worksheet.Cells[Cell, 26].Value = "Requested Through";
                    worksheet.Cells[Cell, 27].Value = "Sexed Semen";
                    worksheet.Cells[Cell, 28].Value = "Validation";
                    worksheet.Cells[Cell, 29].Value = "Image Lat/Long Data";
                    worksheet.Cells[Cell, 30].Value = "Validate Lat/Long Data";
                    worksheet.Cells[Cell, 31].Value = "Validation Done By";
                    worksheet.Cells[Cell, 32].Value = "Validation Done Date";
                   
                    worksheet.Cells[worksheet.Cells.Address].AutoFitColumns();

                    var range = worksheet.Cells[1, 1, data.Count() + 1, 32];
                    range.Style.Border.Top.Style = range.Style.Border.Bottom.Style
                    = range.Style.Border.Left.Style = range.Style.Border.Right.Style = ExcelBorderStyle.Thin;

                    return package.GetAsByteArray();
                }
                #endregion Export Exl
            }


        }

        //public byte[] AICallReportExport(string sortBy, AICAllReportFilterModel reportFilter, string name)
        //   => reportFilter.AllowNonNDDBTag ? GetReport<AICAllExportReportModelAllowNddb>(reportFilter, sortBy: sortBy).Data.ToExcel(name)
        //    : GetReport<AICAllExportReportModel>(reportFilter, sortBy: sortBy).Data.ToExcel(name);

        public ApiResponse GetAISummaryReportData(Pagination pagination, AISummaryReportFilterModel reportFilter)
        {
            pagination.SortBy = string.IsNullOrWhiteSpace(pagination.SortBy) ? "AIWorkerName desc" : pagination.SortBy.Trim();
            return ReportResponse(() => GetAISummaryReportData(reportFilter, pagination), "No AI Summary Found");
        }

        public byte[] ExportAISummaryReportData(string sortBy, AISummaryReportFilterModel reportFilter, string name)
        {
            var result = GetAISummaryReportData(reportFilter, sortBy: sortBy);
            List<AISummaryReportModel> AISummaryReportData = new List<AISummaryReportModel>();
            if (result.Data != null)
            {
                AISummaryReportData = (List<AISummaryReportModel>)result.Data;
            }

            #region Export Exl
            FileInfo file = new FileInfo(Path.Combine(name));
            using (ExcelPackage package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("AI Summary Report");

                int Cell = 2;

                //Local Cow, Buffalo, Cross Breed, Total
                worksheet.Cells["A1:D1"].Merge = true;
                worksheet.Cells["E1:F1"].Merge = true;
                worksheet.Cells["G1:H1"].Merge = true;
                worksheet.Cells["I1:J1"].Merge = true;
                worksheet.Cells["K1:L1"].Merge = true;

                //Merge Column Assign Blank
                worksheet.Cells[1, 1].Value = "";

                //Local Cow Data Header
                worksheet.Cells[1, 5].Value = "Local Cow";
                worksheet.Cells[1, 5].Style.Font.Bold = true;
                worksheet.Cells[1, 5].Style.Font.Size = 12;
                worksheet.Cells[1, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[1, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[1, 5].Style.Fill.BackgroundColor.SetColor(Color.White);
                worksheet.Cells[1, 5].Style.Font.Color.SetColor(Color.Black);

                //Buffalo Data Header
                worksheet.Cells[1, 7].Value = "Buffalo";
                worksheet.Cells[1, 7].Style.Font.Bold = true;
                worksheet.Cells[1, 7].Style.Font.Size = 12;
                worksheet.Cells[1, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[1, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[1, 7].Style.Fill.BackgroundColor.SetColor(Color.White);
                worksheet.Cells[1, 7].Style.Font.Color.SetColor(Color.Black);

                //Cross Breed Data Header
                worksheet.Cells[1, 9].Value = "Cross Breed";
                worksheet.Cells[1, 9].Style.Font.Bold = true;
                worksheet.Cells[1, 9].Style.Font.Size = 12;
                worksheet.Cells[1, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[1, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[1, 9].Style.Fill.BackgroundColor.SetColor(Color.White);
                worksheet.Cells[1, 9].Style.Font.Color.SetColor(Color.Black);

                //Total Data Header
                worksheet.Cells[1, 11].Value = "Total";
                worksheet.Cells[1, 11].Style.Font.Bold = true;
                worksheet.Cells[1, 11].Style.Font.Size = 12;
                worksheet.Cells[1, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[1, 11].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[1, 11].Style.Fill.BackgroundColor.SetColor(Color.White);
                worksheet.Cells[1, 11].Style.Font.Color.SetColor(Color.Black);

                //Final Bind Data Header
                worksheet.Cells[Cell, 1].Value = "Society Code";
                worksheet.Cells[Cell, 2].Value = "Society Name";
                worksheet.Cells[Cell, 3].Value = "AI Worker Name";
                worksheet.Cells[Cell, 4].Value = "AI Worker Status";
                worksheet.Cells[Cell, 5].Value = "Animal";
                worksheet.Cells[Cell, 6].Value = "No Of AI";
                worksheet.Cells[Cell, 7].Value = "Animal";
                worksheet.Cells[Cell, 8].Value = "No Of AI";
                worksheet.Cells[Cell, 9].Value = "Animal";
                worksheet.Cells[Cell, 10].Value = "No Of AI";
                worksheet.Cells[Cell, 11].Value = "Animal";
                worksheet.Cells[Cell, 12].Value = "No Of AI";

                //Bind Data from SP Response
                for (int index = 2; index <= AISummaryReportData.Count + 1; index++)
                {
                    worksheet.Cells[index + 1, 1].Value = AISummaryReportData[index - 2].SocietyCode;
                    worksheet.Cells[index + 1, 2].Value = AISummaryReportData[index - 2].SocietyName;
                    worksheet.Cells[index + 1, 3].Value = AISummaryReportData[index - 2].AIWorker;
                    worksheet.Cells[index + 1, 4].Value = AISummaryReportData[index - 2].AIWorkerStatus;
                    worksheet.Cells[index + 1, 5].Value = AISummaryReportData[index - 2].LocalAnimal;
                    worksheet.Cells[index + 1, 6].Value = AISummaryReportData[index - 2].LocalNoOfAI;
                    worksheet.Cells[index + 1, 7].Value = AISummaryReportData[index - 2].BuffaloAnimal;
                    worksheet.Cells[index + 1, 8].Value = AISummaryReportData[index - 2].BuffaloNoOfAI;
                    worksheet.Cells[index + 1, 9].Value = AISummaryReportData[index - 2].CrossAnimal;
                    worksheet.Cells[index + 1, 10].Value = AISummaryReportData[index - 2].CrossNoOfAI;
                    worksheet.Cells[index + 1, 11].Value = AISummaryReportData[index - 2].TotalAnimal;
                    worksheet.Cells[index + 1, 12].Value = AISummaryReportData[index - 2].TotalNoOfAI;
                }
                worksheet.Cells[worksheet.Cells.Address].AutoFitColumns();

                var range = worksheet.Cells[1, 1, AISummaryReportData.Count() + 2, 12];
                range.Style.Border.Top.Style = range.Style.Border.Bottom.Style
                = range.Style.Border.Left.Style = range.Style.Border.Right.Style = ExcelBorderStyle.Thin;

                return package.GetAsByteArray();
            }
            #endregion Export Exl
        }

        private Pagination<AISummaryReportModel> GetAISummaryReportData(AISummaryReportFilterModel reportFilter,
           Pagination pagination = default(Pagination), string sortBy = default(string))
        {
            Pagination<AISummaryReportModel> AISummaryModeldata;

            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoAISummaryReportData = new Repository<AISummaryReportModel>(connection);
                var AISummaryReportModelObj = new List<AISummaryReportModel>();

                IList<SqlParameter> sqlParameters = new List<SqlParameter>();
                SqlParameter parameter;
                DataTable dt = new DataTable();

                dt.Columns.Add("ID", typeof(int));
                foreach (var id in reportFilter.SocietyCodes)
                {
                    dt.Rows.Add(id);
                }
                parameter = new SqlParameter("@SocietyMasterIDs", SqlDbType.Structured);
                parameter.TypeName = "dbo.IntList";
                parameter.Value = dt;
                sqlParameters.Add(parameter);

                dt = new DataTable();
                dt.Columns.Add("ID", typeof(int));
                if (reportFilter.AIWorkerMasterIds != null)
                {
                    foreach (var id in reportFilter.AIWorkerMasterIds)
                    {
                        dt.Rows.Add(id);
                    }
                }
                parameter = new SqlParameter("@AIWorkerMasterIDs", SqlDbType.Structured);
                parameter.TypeName = "dbo.IntList";
                parameter.Value = dt;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@FromDate", SqlDbType.Date);
                parameter.Value = reportFilter.FromDate;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@ToDate", SqlDbType.Date);
                parameter.Value = reportFilter.ToDate;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@SystemUserRoleID", SqlDbType.Int);
                parameter.Value = _currentUser?.Info?.RoleId;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@SystemUserId", SqlDbType.BigInt);
                parameter.Value = _currentUser?.Info?.Id;
                sqlParameters.Add(parameter);

                if (default(Pagination) == pagination)
                {
                    parameter = new SqlParameter("@PageNo", SqlDbType.Int);
                    parameter.Value = 0;
                    sqlParameters.Add(parameter);

                    parameter = new SqlParameter("@PageSize", SqlDbType.Int);
                    parameter.Value = 0;
                    sqlParameters.Add(parameter);
                }
                else
                {
                    parameter = new SqlParameter("@PageNo", SqlDbType.Int);
                    parameter.Value = pagination.PageNo;
                    sqlParameters.Add(parameter);

                    parameter = new SqlParameter("@PageSize", SqlDbType.Int);
                    parameter.Value = pagination.RecordsPerPage;
                    sqlParameters.Add(parameter);
                }

                AISummaryReportModelObj = _repoAISummaryReportData.ExecuteStoredProcedure("SP_GET_AI_Summary", sqlParameters).ToList();

                AISummaryModeldata = default(Pagination) == pagination ? new Pagination<AISummaryReportModel>()
                {
                    Data = AISummaryReportModelObj
                }
                :
                new Pagination<AISummaryReportModel>
                {
                    Data = AISummaryReportModelObj,
                    PageNo = pagination.PageNo,
                    RecordsPerPage = pagination.RecordsPerPage,
                    SortBy = pagination.SortBy,
                    TotalRecords = AISummaryReportModelObj.Count() > 0 ? AISummaryReportModelObj[0].TTotal : 0,
                };
            }
            return AISummaryModeldata;
        }

        private Pagination<AIReportModel> GetAIReportData(AICAllReportFilterModel reportFilter,
           Pagination pagination = default(Pagination), string sortBy = default(string))
        {
            Pagination<AIReportModel> AIModeldata;

            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoAIReportData = new Repository<AIReportModel>(connection);
                var AIReportModelObj = new List<AIReportModel>();

                IList<SqlParameter> sqlParameters = new List<SqlParameter>();
                SqlParameter parameter;
                DataTable dt = new DataTable();

                dt.Columns.Add("ID", typeof(int));
                foreach (var id in reportFilter.SocietyCodes)
                {
                    dt.Rows.Add(id);
                }
                parameter = new SqlParameter("@SocietyMasterIDs", SqlDbType.Structured);
                parameter.TypeName = "dbo.IntList";
                parameter.Value = dt;
                sqlParameters.Add(parameter);

                dt = new DataTable();
                dt.Columns.Add("ID", typeof(int));
                if (reportFilter.AIWorkerMasterIds != null)
                {
                    foreach (var id in reportFilter.AIWorkerMasterIds)
                    {
                        dt.Rows.Add(id);
                    }
                }
                parameter = new SqlParameter("@AIWorkerMasterIDs", SqlDbType.Structured);
                parameter.TypeName = "dbo.IntList";
                parameter.Value = dt;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@FromDate", SqlDbType.Date);
                parameter.Value = reportFilter.FromDate;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@ToDate", SqlDbType.Date);
                parameter.Value = reportFilter.ToDate;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@CTypeID", SqlDbType.Int);
                parameter.Value = reportFilter.CattleType;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@NoOfAI", SqlDbType.Int);
                parameter.Value = reportFilter.NoOfAI;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@CallStatus", SqlDbType.Int);
                parameter.Value = reportFilter.CallStatus;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@IsSexedSemen", SqlDbType.Int);
                if (reportFilter.OptionYesNo.ToString().ToLower() == "yes")
                {
                    parameter.Value = 1;
                }
                else if (reportFilter.OptionYesNo.ToString().ToLower() == "no")
                {
                    parameter.Value = 0;
                }
                else
                {
                    parameter.Value = -1;

                }
                sqlParameters.Add(parameter);

                dt = new DataTable();
                dt.Columns.Add("ID", typeof(int));
                if (reportFilter.BullMasterIds != null)
                {
                    foreach (var id in reportFilter.BullMasterIds)
                    {
                        dt.Rows.Add(id);
                    }
                }
                parameter = new SqlParameter("@BullMasterIDs", SqlDbType.Structured);
                parameter.TypeName = "dbo.IntList";
                parameter.Value = dt;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@AIRequestStatusID", SqlDbType.Int);
                parameter.Value = reportFilter.RequestStatus;
                sqlParameters.Add(parameter);

                dt = new DataTable();
                dt.Columns.Add("ID", typeof(int));
                if (reportFilter.ValidationDoneBy != null)
                {
                    foreach (var id in reportFilter.ValidationDoneBy)
                    {
                        dt.Rows.Add(id);
                    }
                }
                parameter = new SqlParameter("@VDoneBySUserIDs", SqlDbType.Structured);
                parameter.TypeName = "dbo.IntList";
                parameter.Value = dt;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@SystemUserRoleID", SqlDbType.Int);
                parameter.Value = _currentUser?.Info?.RoleId;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@SystemUserId", SqlDbType.BigInt);
                parameter.Value = _currentUser?.Info?.Id;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@DateRangeFilter", SqlDbType.Int);
                parameter.Value = reportFilter.DateRangeFilter;
                sqlParameters.Add(parameter);

                if (default(Pagination) == pagination)
                {
                    parameter = new SqlParameter("@PageNo", SqlDbType.Int);
                    parameter.Value = 0;
                    sqlParameters.Add(parameter);

                    parameter = new SqlParameter("@PageSize", SqlDbType.Int);
                    parameter.Value = 0;
                    sqlParameters.Add(parameter);
                }
                else
                {
                    parameter = new SqlParameter("@PageNo", SqlDbType.Int);
                    parameter.Value = pagination.PageNo;
                    sqlParameters.Add(parameter);

                    parameter = new SqlParameter("@PageSize", SqlDbType.Int);
                    parameter.Value = pagination.RecordsPerPage;
                    sqlParameters.Add(parameter);
                }

                AIReportModelObj = _repoAIReportData.ExecuteStoredProcedure("SP_GET_AICall", sqlParameters, 900).ToList();

                AIModeldata = default(Pagination) == pagination ? new Pagination<AIReportModel>()
                {
                    Data = AIReportModelObj
                }
                :
                new Pagination<AIReportModel>
                {
                    Data = AIReportModelObj,
                    PageNo = pagination.PageNo,
                    RecordsPerPage = pagination.RecordsPerPage,
                    SortBy = pagination.SortBy,
                    TotalRecords = AIReportModelObj.Count() > 0 ? AIReportModelObj[0].TTotal : 0,
                };
            }
            return AIModeldata;
        }

        public byte[] BullCorrectionReportExport(string sortBy, string searchBy, string name)
        {
            string orderByClause = "bcl.CreatedOn desc";
            bool isDateFilter = DateTime.TryParse(searchBy, out DateTime dateFilter);

            string strQuery = Enums.SystemUserRole.AIWorker == _currentUser?.Role()
                ? string.Format(BullCorrectionsAIWorkerQuery, GetBullCorrectionsFilter(string.IsNullOrWhiteSpace(searchBy?.Trim()), isDateFilter))
                : GetQueryForBullCorrectionsByDesignation(string.IsNullOrWhiteSpace(searchBy?.Trim()), true, isDateFilter);


            List<Parameter> parameters = new List<Parameter>()
                {
                    new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                    new Parameter("openstatus", System.Data.DbType.Int32, (int)Enums.StockStatus.Open),
                    new Parameter("employee", System.Data.DbType.Int32, (int)Enums.UserType.Employee),
                    new Parameter("uTyp", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                    new Parameter("uId", System.Data.DbType.Int64, _currentUser?.Info?.Id.ToInt64()),
                    new Parameter("srcBy", System.Data.DbType.String, searchBy?.Trim()),
                    new Parameter("status", System.Data.DbType.Int32, (int)Enums.StockStatus.Open)
                };
            if (isDateFilter)
            {
                parameters.Add(new Parameter("from", System.Data.DbType.DateTime, dateFilter));
                parameters.Add(new Parameter("to", System.Data.DbType.DateTime, dateFilter.AddMinutes(1).AddSeconds(-1)));
            }

            return DataToExport<BullCorrectionExportModel, AICallModel>(strQuery + (string.IsNullOrWhiteSpace(sortBy) ? "order by " + orderByClause : $"order by {sortBy}"),
                 parameters.ToArray()).ToExcel(name);


        }

        public byte[] ExportData(Enums.CallStatus status, string sortBy, string searchBy, string name)
        {
            string strQuery = Enums.SystemUserRole.AIWorker == _currentUser?.Role()
                ? AiCallWorkerExportQuery
                : GetQueryByDesignation(true);

            return DataToExport<AICAllReportModel, AICallModel>(string.Format(strQuery,
                0 == status ? "" : "and ac.CallStatus=@cStatus",
                string.IsNullOrWhiteSpace(searchBy) ? "" : @"where ac.CallNumber like concat('%',@srcBy,'%') or 
	                sm.SocietyCode like concat('%',@srcBy,'%') or sm.SocietyName like concat('%',@srcBy,'%') or 
	                isnull(fm.FarmerCode,nfm.FarmerCode) like concat('%',@srcBy,'%') or 
	                isnull(fm.FarmerNameEng,nfm.FarmerNameEng) like concat('%',@srcBy,'%') or 
	                isnull(fm.FarmerNameGuj,nfm.FarmerNameGuj) like concat('%',@srcBy,'%') or 
	                su.NameEng like concat('%',@srcBy,'%') or su.NameGuj like concat('%',@srcBy,'%') or ac.TagCode=@srcBy",
                string.IsNullOrWhiteSpace(sortBy) ? "order by AICallId desc" : $"order by {sortBy}"),
                new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                new Parameter("cStatus", System.Data.DbType.Int32, (int)status),
                new Parameter("Close", System.Data.DbType.Int32, (int)Enums.CallStatus.Close),
                new Parameter("uTyp", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                new Parameter("uId", System.Data.DbType.Int64, Convert.ToInt64(_currentUser?.Info?.Id)),
                new Parameter("srcBy", System.Data.DbType.String, searchBy?.Trim())).ToExcel(name);
        }

        public ApiResponse Delete(long aiCallId)
        {
            ApiResponse response = default(ApiResponse);

            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoAiCall = new Repository<AICallModel>(connection);

                if (!_repoAiCall.Query<bool>(@"select case when SemenStockAllocationId is not null then 0 else 1 end 
                    from AICall ac with(nolock) where AICallId=@aiCallId", new { aiCallId }))
                    response = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status409Conflict,
                        Message = "This AiCall can't be delete as stock has been utilized in it"
                    };
                else if (!_repoAiCall.Query<bool>(@"select (case when ac.Callstatus=@closeCallStatusId then (case when ac.AICallId=lac.AICallId and p.PDEntryId is null and c.CalvingId is null Then 1 else 0 end) 
                    	when ac.CallStatus=@openCallStatusId then (case when isnull(ac.TagCode,'')='' then 1 
							when isnull(ac.TagCode,'')<>'' and p.PDEntryId is null and c.CalvingId is null then 1 end)end)IsDelete 
                    from AICall ac with(nolock)
					outer apply(select top 1 iac.AICallId from AICall iac where iac.TagCode=ac.TagCode and iac.CallStatus=ac.CallStatus order by CloseDate desc)lac
                    left outer join PDEntry p with(nolock) on p.AICallId=ac.AICallId
                    left outer join Calving c with(nolock) on c.PDEntryId=p.PDEntryId
                    left outer join SemenStockAllocation ssa with(nolock) on ssa.SemenStockAllocationId=ac.SemenStockAllocationId
                    where ac.AiCallId=@aiCallId and ac.IsActive=@act",
                    new { aiCallId, act = RecordStatusEnum.Active, closeCallStatusId = (int)Enums.CallStatus.Close, openCallStatusId = (int)Enums.CallStatus.Open }))
                    response = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status409Conflict,
                        Message = "This AiCall can't be delete as event already performed on cattle"
                    };
                else
                {
                    _repoAiCall.Delete(aiCallId, _currentUser?.Info?.Id);
                    response = new ApiResponse()
                    {
                        Message = "AI Call Deleted Successfully",
                        StatusCode = StatusCodes.Status200OK
                    };
                }
            }
            return response;
        }

        public long GetSocietyIdOfSocietyCode(string societyCode)
        {
            using (var connection = Tenant.GetConnection(_httpContext)) // Ritesh - Tenant Support
            {
                _repoAiCall = new Repository<AICallModel>(connection);
                string query = @"select societymasterid from SocietyMaster where SocietyCode=@SocietyCode";

                return _repoAiCall.Query<long>(query, new { SocietyCode = societyCode });
            }
        }

        public long GetSocietyIdOfAICall(long aiCallId)
        {
            using (var connection = Tenant.GetConnection(_httpContext)) // Ritesh - Tenant Support
            {
                _repoAiCall = new Repository<AICallModel>(connection);
                string query = @"select societymasterid from AICall where AICallId=@AICallId";

                return _repoAiCall.Query<long>(query, new { AICallId = aiCallId });
            }
        }

        public long GetSocietyIdOfCallNumber(long callNumber)
        {
            using (var connection = Tenant.GetConnection(_httpContext)) // Ritesh - Tenant Support
            {
                _repoAiCall = new Repository<AICallModel>(connection);
                string query = @"select societymasterid from AICall where CallNumber = @CallNumber";

                return _repoAiCall.Query<long>(query, new { CallNumber = callNumber });
            }
        }
        #endregion

        #region Third Party Services
        public ApiResponse AiRequestForCvcc(AiRequestCvccModel data, IAmcsIntegration amcs)
        {
            if (!Enum.TryParse(data.CattleType?.Trim(), true, out Enums.CattleType cattleType))
                return new ApiResponse
                {
                    StatusCode = StatusCodes.Status400BadRequest,
                    Message = "Invalid Cattle Type"
                };

            if (Models.PepSystem.Enums.FarmerType.NA == data.FarmerType)
                return new ApiResponse
                {
                    StatusCode = StatusCodes.Status400BadRequest,
                    Message = "Farmer type is not match with your farmer code"
                };

            ApiResponse response = null;
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoNonFarmer = new Repository<NonRegisteredFarmerMasterModel>(connection);

                CvccAppVerifiedSocietyAndAiWorker verifiedData = _repoNonFarmer.Query<CvccAppVerifiedSocietyAndAiWorker, NonRegisteredFarmerMasterModel>(
                    @"select sm.SocietyMasterId,sm.IsRegisteredSociety,aw.AIWorkerMasterId,aw.IsReliver,aw.ReliverId
                    from SocietyMaster sm with(nolock)
                    outer apply(select distinct aw.AIWorkerMasterId,case when p.ReliverId is null then 0 else 1 end IsReliver,p.ReliverId
                    	from AIWorkerMaster aw with (nolock)
                    	inner join AIWorkerSocietyMapping aws with(nolock) on aws.AIWorkerMasterId=aw.AIWorkerMasterId 
                    		and aw.AIWorkerCode=@acode and aws.SocietyMasterId=sm.SocietyMasterId and aw.IsActive=@act
                    	inner join SystemUser su with (nolock) on su.RefId=aw.AIWorkerMasterId and su.UserType=@utyp and isnull(su.ExpiryDate,getdate())>=getdate()
                    	left outer join Presence p on p.RefId=su.SystemUserId and p.UserType=@uTyp and getdate() between p.FromDate and p.ToDate)aw
                    where sm.SocietyCode=@code and sm.IsActive=@act",
                    new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                    new Parameter("code", System.Data.DbType.AnsiString, data.SocietyCode?.Trim()),
                    new Parameter("acode", System.Data.DbType.AnsiString, data.AiWorkerCode?.Trim()),
                    new Parameter("utyp", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker)).FirstOrDefault();

                if (null == verifiedData)
                    response = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status400BadRequest,
                        Message = "Society Not Found"
                    };
                else if (!verifiedData.AIWorkerMasterId.HasValue || default(long) == verifiedData.AIWorkerMasterId)
                    response = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status400BadRequest,
                        Message = "Ai Worker Not Associate With Society"
                    };

                if (null == response)
                {
                    List<CvccAppVerifiedFarmer> result = amcs.GetFarmers(data.SocietyCode?.Trim(), data.FarmerCode?.Trim())
                        ?.Select(s => s.GetMapped<CvccAppVerifiedFarmer, AmcsFarmer>()).ToList();

                    int.TryParse(data.FarmerCode?.Trim(), out int fcode);

                    result = result.Concat(_repoNonFarmer.Query<CvccAppVerifiedFarmer, NonRegisteredFarmerMasterModel>(
                    $@"select fr.FarmerMasterId,fr.FarmerCode Code,fr.FarmerNameEng [Name],'{Models.PepSystem.Enums.FarmerType.Amcs}' [Type],'' Mobile
                    from FarmerMaster fr with(nolock)
                    inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=fr.SocietyMasterId 
                    	and sm.SocietyMasterId=@societyId and fr.IsActive=@act and cast(fr.FarmerCode as int)=@fcode 
                    union all
                    select fr.NonRegisteredFarmerId FarmerMasterId,fr.FarmerCode Code,fr.FarmerNameEng [Name],'{Models.PepSystem.Enums.FarmerType.NonAmcs}' [Type],isnull(fr.MobileNo,'')Mobile
                    from NonRegisteredFarmer fr with(nolock)
                    inner join SocietyMaster sm with(nolock) on sm.SocietyMasterId=fr.SocietyMasterId 
                    	and sm.SocietyMasterId=@societyId and fr.IsActive=@act and cast(fr.FarmerCode as int)=@fcode",
                    new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                    new Parameter("fcode", System.Data.DbType.Int32, fcode),
                    new Parameter("societyId", System.Data.DbType.Int64, verifiedData.SocietyMasterId)))
                    .ToLookup(lu => lu.Code)
                    .Select(s => s.Aggregate((amc, amulai) => new CvccAppVerifiedFarmer
                    {
                        FarmerMasterId = amc.FarmerMasterId ?? amulai.FarmerMasterId,
                        Code = amc.Code,
                        Name = amc.Name,
                        NameLocal = amc.NameLocal,
                        Type = amc.Type ?? amulai.Type,
                        Mobile = amc.Mobile ?? amulai.Mobile
                    }))
                    ?.Where(f => f.Type == data.FarmerType.ToString())?.ToList();

                    if (!result.Any())
                        response = new ApiResponse
                        {
                            StatusCode = StatusCodes.Status400BadRequest,
                            Message = "Farmers Not Found"
                        };
                    else if (1 < result.Count)
                        response = new ApiResponse
                        {
                            StatusCode = StatusCodes.Status400BadRequest,
                            Message = "Multiple Farmers Found With Same Farmer Code"
                        };
                    else
                    {
                        AICallCrudModel request = verifiedData.GetMapped<AICallCrudModel, CvccAppVerifiedSocietyAndAiWorker>();
                        request.FarmerMasterId = result[0].FarmerMasterId;
                        request.IsRegisteredFarmer = Models.PepSystem.Enums.FarmerType.Amcs == data.FarmerType;

                        if (request.IsRegisteredFarmer)
                            request.FarmerMasterId = AddFarmer(result[0].Code, result[0].Name ?? string.Empty, result[0].NameLocal ?? string.Empty,
                                verifiedData.SocietyMasterId, new Repository<FarmerMasterModel>(connection), (int)Enums.RequestedThrough.CVCC)?.FarmerMasterId;

                        request.ContactNo = data.ContactNo?.Trim();
                        request.CattleTypeId = (int)cattleType;
                        request.SocietyCode = data.SocietyCode?.Trim();
                        request.FarmerCode = data.FarmerCode?.Trim();
                        request.Address = data.Address?.Trim();
                        request.Remarks = data.Remarks?.Trim();
                        request.CallDate = DateTime.Now;
                        request.CallStatus = (int)Enums.CallStatus.Open;
                        request.RequestedThrough = (int)Enums.RequestedThrough.CVCC;
                        request.DigitalTag = data.DigitalTag;
                        response = Add(request, false);
                    }
                }
            }

            return response;
        }

        public ApiResponse<string> GetLastFarmerAddress(string mobileno)
        {
            string address;
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                address = new Repository<AICallModel>(connection)
                    .Query<string>(@"select top 1 Address from AICall with(nolock) 
                    where ContactNo=@mobileno and Address is not null
                    order by CallDate desc", new { mobileno });
            }

            return new ApiResponse<string>
            {
                StatusCode = string.IsNullOrWhiteSpace(address) ? StatusCodes.Status204NoContent : StatusCodes.Status200OK,
                Data = address ?? string.Empty
            };
        }
        public List<DigitalAiCallBookingModelVm> GetDigitalAiCallBooking(DateTime fromDate, DateTime toDate
          , bool isDigitalTag)
        {
            List<DigitalAiCallBookingModelVm> address;
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                string qquery = @"select ac.TagCode as Tag
	                                ,lvac.LookupValue as RequestType
	                                ,convert(nvarchar(16),ac.CloseDate,29) as AiCompletionDate
	                                ,isnull(convert(nvarchar(16),pd.CheckedDate,29),'') as PdCompletionDate
	                                ,isnull(lv.LookupValue,'') as PdStatus
	                                ,isnull(convert(nvarchar(16),c.DoneDate,29),'') as CalvingDate
	                                ,case when (c.Status = 63) then isnull(convert(nvarchar(16),c.DoneDate,29),'') else '' end AbortionDate
	                                ,isnull(fm.FarmerCode,nfm.FarmerCode)as FarmerCode
	                                ,sm.SocietyCode
                                from AICall ac left join PDEntry pd on ac.AICallId = pd.AICallId
                                left join Calving c on c.PDEntryId = pd.PDEntryId
                                left join LookupValues lv on lv.LookupValuesId = pd.StatusTypeId
                                left join LookupValues lvac on lvac.LookupValuesId = ac.RequestedThrough
                                left join FarmerMaster fm on fm.FarmerMasterId=ac.FarmerMasterId and ac.IsRegisteredFarmer=1
                                left join NonRegisteredFarmer nfm on nfm.NonRegisteredFarmerId=ac.FarmerMasterId and ac.IsRegisteredFarmer=0   
                                left join SocietyMaster sm on sm.SocietyMasterId = ac.SocietyMasterId
                                where ac.CloseDate between @fromDate and @toDate and ac.DigitalTag=@digitalTag";
                address = new Repository<DigitalAiCallBookingModel>(connection)
                    .Query<DigitalAiCallBookingModelVm, DigitalAiCallBookingModel>(qquery,
                new Parameter("digitalTag", System.Data.DbType.Boolean, isDigitalTag),
                new Parameter("fromDate", DbType.DateTime, fromDate),
                new Parameter("toDate", DbType.DateTime, toDate.AddDays(1).AddMilliseconds(-2))
                );
            }


            return address;
        }

        public ApiResponse AiRequestForFarm365(AiRequestModel data)
        {
            var result = data.GetMapped<AICallCrudModel, AiRequestModel>();
            result.IsRegisteredSociety = result.IsRegisteredFarmer = true;
            result.FarmerNameGuj = result.FarmerNameEng;
            result.ReliverId = 0 == (result.ReliverId ?? 0) ? null : result.ReliverId;
            result.CallDate = DateTime.Now;
            result.CallStatus = (int)Enums.CallStatus.Open;
            result.RequestedThrough = (int)Enums.RequestedThrough.Farm365;
            return Add(result, callFromFarm365: true);
        }

        public ApiResponse<List<CodeName<int, string>>> AiRequestCount(string mobileno)
        {
            List<AICallModel> data;
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                data = new Repository<AICallModel>(connection)
                    .ReadAll(columns: "CallStatus", criteria: "ContactNo=@mobileno and CallStatus<>@autocancel and IsActive=@act",
                    parameters: new { mobileno, autocancel = Enums.CallStatus.AutoCancel, act = RecordStatusEnum.Active }).ToList();
            }

            return new ApiResponse<List<CodeName<int, string>>>
            {
                StatusCode = StatusCodes.Status200OK,
                Data = _generalMaster.GetLookupValuesById((int)Enums.LookupType.CallStatus,
                    (Enums.Culture)Convert.ToInt32(_header.Culture))
                    ?.Where(f => (int)Enums.CallStatus.AutoCancel != f.LookupValuesId)
                    ?.GroupJoin(data, master => master.LookupValuesId, call => call.CallStatus,
                        (x, y) => new { Master = x, Call = y })
                    ?.OrderBy(o => o.Master.LookupValuesId)
                    ?.Select(s => new CodeName<int, string>
                    {
                        Name = s.Master.LookupValue,
                        Code = s.Call?.Count() ?? 0
                    })?.ToList()
            };
        }

        public ApiResponse<Pagination<AiRequestListModel>> GetAllAiRequest(Pagination pagination,
            string mobileno, Enums.CallStatus status, string search)
        {
            Pagination<AiRequestListModel> pg;
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                string query = $@"select ac.AICallId,ac.CallNumber,ac.CallDate,ac.CallStatus,ac.CloseDate,ac.UpdatedOn CancelDate,ac.CattleTypeId,
                    ac.IsReliver,su.NameEng Worker,sur.NameEng Reliver
                    from AICall ac with(nolock)
                    inner join SystemUser su with(nolock) on su.RefId=ac.AIWorkerMasterId and su.UserType=@utyp
                    	and ac.ContactNo=@mobileno and ac.IsActive=@act {(Enums.CallStatus.All == status ? "and ac.CallStatus<>@autocancel" : "and ac.CallStatus=@status")}
                    left outer join SystemUser sur with(nolock) on sur.RefId=ac.ReliverId and sur.UserType=@utyp and ac.IsReliver=@act";

                long ticket = 0; Enums.CattleType cattle = 0;
                if (!string.IsNullOrWhiteSpace(search))
                {
                    query += Environment.NewLine + @"where su.NameEng like concat('%',@search,'%') or sur.NameEng like concat('%',@search,'%') or 
                    	ac.CallNumber=@ticket or ac.CattleTypeId=@cattle";
                    long.TryParse(search, out ticket);
                    Enum.TryParse(search, true, out cattle);
                }

                pg = new Repository<AICallModel>(connection).Query<AiRequestListModel, AICallModel>(
                    query, pagination.SortBy, pagination.PageNo, pagination.RecordsPerPage,
                    new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                    new Parameter("mobileno", System.Data.DbType.AnsiString, mobileno),
                    new Parameter("status", System.Data.DbType.Int32, (int)status),
                    new Parameter("autocancel", System.Data.DbType.Int32, (int)Enums.CallStatus.AutoCancel),
                    new Parameter("utyp", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                    new Parameter("search", System.Data.DbType.AnsiString, search),
                    new Parameter("ticket", System.Data.DbType.Int64, ticket),
                    new Parameter("cattle", System.Data.DbType.Int32, (int)cattle));
            }

            return new ApiResponse<Pagination<AiRequestListModel>>
            {
                StatusCode = (pg?.Data?.Any() ?? false) ? StatusCodes.Status200OK : StatusCodes.Status204NoContent,
                Data = pg
            };
        }

        public ApiResponse ValidateandUpdateAIRequest(RequestStatusModel aICallRequestStatusModel)
        {
            ApiResponse apiResponse = default(ApiResponse);

            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoAiCall = new Repository<AICallModel>(connection);
                AICallModel aICallModel = _repoAiCall.ReadOne(aICallRequestStatusModel?.Id);
                if (aICallModel == null)
                {
                    apiResponse = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status404NotFound,
                        Message = _culture.GetString("msg_ReasonNotFound")
                    };
                }
                else
                {
                    aICallModel.UpdatedBy = _currentUser?.Info?.Id;
                    aICallModel.UpdatedOn = DateTime.Now;
                    aICallModel.IsActive = true;
                    aICallModel.AIRequestStatus = aICallRequestStatusModel?.RequestStatusId;
                    aICallModel.Longitude = string.IsNullOrWhiteSpace(aICallRequestStatusModel.Longitude) ? aICallModel.Longitude : aICallRequestStatusModel.Longitude;
                    aICallModel.Latitude = string.IsNullOrWhiteSpace(aICallRequestStatusModel.Latitude) ? aICallModel.Latitude : aICallRequestStatusModel.Latitude;
                    aICallModel.ValidatedOn = DateTime.Now;
                    aICallModel.ValidatedBy = (long?)(_currentUser?.Info?.Id);
                    _repoAiCall.Update(aICallModel);

                    apiResponse = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status200OK,
                        Message = string.Format(_culture.GetString("msg_RequestStatus"), (Enums.RequestStatus)aICallModel.AIRequestStatus)
                    };
                }
            }
            return apiResponse;
        }

        public ApiResponse ValidateandUpdateAIRequest(RequestStatusModel aICallRequestStatusModel, IFormFile validateImage)
        {
            ApiResponse apiResponse = default(ApiResponse);

            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoAiCall = new Repository<AICallModel>(connection);
                AICallModel aICallModel = _repoAiCall.ReadOne(aICallRequestStatusModel?.Id);
                if (aICallModel == null)
                {
                    apiResponse = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status404NotFound,
                        Message = _culture.GetString("msg_ReasonNotFound")
                    };
                }
                else
                {
                    aICallModel.UpdatedBy = _currentUser?.Info?.Id;
                    aICallModel.UpdatedOn = DateTime.Now;
                    aICallModel.IsActive = true;
                    aICallModel.AIRequestStatus = aICallRequestStatusModel?.RequestStatusId;
                    aICallModel.ValidateLongitude = aICallRequestStatusModel.Longitude;
                    aICallModel.ValidateLatitude = aICallRequestStatusModel.Latitude;
                    aICallModel.validateImage = InsertValidateImage(validateImage).GetAwaiter().GetResult();
                    aICallModel.ValidatedOn = DateTime.Now;
                    aICallModel.ValidatedBy = Convert.ToInt64(_currentUser?.Info?.Id);
                    _repoAiCall.Update(aICallModel);

                    apiResponse = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status200OK,
                        Message = string.Format(_culture.GetString("msg_RequestStatus"), (Enums.RequestStatus)aICallModel.AIRequestStatus)
                    };
                }
            }
            return apiResponse;
        }

        public ApiResponse GetAllBullCorrections(Pagination pagination, string searchBy)
        {
            ApiResponse response;
            Pagination<BullCorrectionListModel> pgData;
            string orderByClause = "bcl.CreatedOn desc";
            pagination.SortBy = string.IsNullOrWhiteSpace(pagination.SortBy) ? orderByClause : pagination.SortBy.Trim();
            bool isDateFilter = DateTime.TryParse(searchBy, out DateTime dateFilter);

            string strQuery = Enums.SystemUserRole.AIWorker == _currentUser?.Role()
                ? string.Format(BullCorrectionsAIWorkerQuery, GetBullCorrectionsFilter(string.IsNullOrWhiteSpace(searchBy?.Trim()), isDateFilter))
                : GetQueryForBullCorrectionsByDesignation(string.IsNullOrWhiteSpace(searchBy?.Trim()), false, isDateFilter);

            using (var connection = Tenant.GetConnection(_httpContext))
            {
                List<Parameter> parameters = new List<Parameter>()
                {
                    new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                    new Parameter("openstatus", System.Data.DbType.Int32, (int)Enums.StockStatus.Open),
                    new Parameter("employee", System.Data.DbType.Int32, (int)Enums.UserType.Employee),
                    new Parameter("uTyp", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                    new Parameter("uId", System.Data.DbType.Int64, _currentUser?.Info?.Id.ToInt64()),
                    new Parameter("srcBy", System.Data.DbType.String, searchBy?.Trim()),
                    new Parameter("status", System.Data.DbType.Int32, (int)Enums.StockStatus.Open)
                };
                if (isDateFilter)
                {
                    parameters.Add(new Parameter("from", System.Data.DbType.DateTime, dateFilter));
                    parameters.Add(new Parameter("to", System.Data.DbType.DateTime, dateFilter.AddMinutes(1).AddSeconds(-1)));
                }

                pgData = new Repository<AICallModel>(connection)
                    .Query<BullCorrectionListModel, AICallModel>(strQuery,
                    pagination.SortBy, pagination.PageNo, pagination.RecordsPerPage, parameters.ToArray());
            }

            if (null == pgData?.Data || 0 >= pgData?.Data.Count())
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = "No Bull Correction details found"
                };
            else
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status200OK,
                    Data = pgData
                };
            return response;
        }

        public ApiResponse GetByCallNumber(long callNumber)
        {
            ApiResponse response;
            List<BullCorrectionListModel> result = new List<BullCorrectionListModel>();
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoAiCall = new Repository<AICallModel>(connection);

                string query = $@"select ai.callnumber callnumber, sm.societycode,sm.societyname, bm.bullno OldBull, bm.Species from 
                    AICall ai left outer join SocietyMaster sm with(nolock) on ai.SocietyMasterId = sm.SocietyMasterId
                    left outer join BullMaster bm with(nolock) on bm.BullMasterId = ai.BullMasterId 
                    where ai.CallNumber like concat('%',@callNumber,'%') and ai.IsActive = @act";
                result = _repoAiCall.Query<BullCorrectionListModel, AICallModel>(query,
                    new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                    new Parameter("callNumber", System.Data.DbType.String, callNumber)).ToList();
            }

            if (null == result)
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = "No AI Call found"
                };
            else
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status200OK,
                    Data = result
                };
            return response;
        }

        public ApiResponse AddBullCorrection(BullCorrectionModel bullCorrectionModel)
        {

            using (var connection = Tenant.GetConnection(_httpContext))
            {
                var aiCallRepo = new Repository<AICallModel>(connection);
                var bullCorrectionRepo = new Repository<BullCorrectionLogModel>(connection);
                try
                {

                    var aiCallEntry = aiCallRepo.ReadOne(criteria: "CallNumber = @callNumber",
                    parameters: new { callNumber = bullCorrectionModel.CallNumber });
                    var repoSA = new Repository<SemenStockAllocationModel>(connection);
                    var newStockAllocation = repoSA.Query<long>(@"select ssa.SemenStockAllocationId
                    from  (select ssa.SemenStockAllocationId,ssa.ClosingQty from SemenStockAllocation ssa with(nolock)
                    	inner join SemenStockInward ssi with(nolock) on ssi.SemenStockInwardId=ssa.SemenStockInwardId 
                    	and ssa.AIWorkerMasterId=@aiWorkerMasterId and ssi.BullMasterId=@newBullMasterId and ssa.Status=@status AND ssa.IsActive=@act)ssa
                    outer apply (select sum(isnull(ac.NoOfStraw,0))NoOfStraw from AICall ac with(nolock) where ac.SemenStockAllocationId=ssa.SemenStockAllocationId 
                    	and (case ac.IsReliver when 1 then ac.ReliverId else ac.AIWorkerMasterId end)=@aiWorkerMasterId and ac.IsActive=@act
                    	group by ac.SemenStockAllocationId)ssu
                    outer apply (select sum(isnull(ssw.WastageQty,0))WastageQty from SemenStockWastage ssw with(nolock) where ssw.SemenStockAllocationId=ssa.SemenStockAllocationId 
                    	and ssw.IsActive=@act and ssw.AIWorkerMasterId=@aiWorkerMasterId group by ssw.SemenStockAllocationId)ssw where isnull(ssa.ClosingQty,0)-(isnull(ssu.NoOfStraw,0)+isnull(ssw.WastageQty,0)) > 0",
                        new
                        {
                            act = RecordStatusEnum.Active,
                            newBullMasterId = bullCorrectionModel.NewBullMasterId,
                            status = Enums.StockStatus.Open,
                            aiWorkerMasterId = aiCallEntry.AIWorkerMasterId,
                        });

                    if (newStockAllocation == 0)
                    {
                        return new ApiResponse
                        {
                            StatusCode = StatusCodes.Status404NotFound,
                            Message = "Stock is not found for this bull"
                        };
                    }
                    BullCorrectionLogModel correctionModel = new BullCorrectionLogModel();
                    correctionModel.AICallId = aiCallEntry.AICallId;
                    correctionModel.NewBullMasterId = bullCorrectionModel.NewBullMasterId;
                    correctionModel.OldBullMasterId = aiCallEntry.BullMasterId;
                    correctionModel.OldSemenStockAllocationId = aiCallEntry.SemenStockAllocationId;
                    correctionModel.NewSemenStockAllocationId = newStockAllocation;
                    correctionModel.CreatedBy = _currentUser?.Info?.Id;
                    correctionModel.CreatedOn = DateTime.Now;

                    aiCallEntry.SemenStockAllocationId = newStockAllocation;
                    aiCallEntry.BullMasterId = bullCorrectionModel.NewBullMasterId;
                    aiCallEntry.UpdatedBy = _currentUser?.Info?.Id;
                    aiCallEntry.UpdatedOn = DateTime.Now;
                    aiCallRepo.BeginTransaction();
                    aiCallRepo.Update(aiCallEntry);


                    bullCorrectionRepo.Transaction = aiCallRepo.Transaction;
                    bullCorrectionRepo.Add(correctionModel);

                    bullCorrectionRepo.Commit();

                    return new ApiResponse
                    {
                        Message = "Bull correction done successfully",
                        StatusCode = StatusCodes.Status200OK
                    };
                }
                catch (Exception ex)
                {
                    bullCorrectionRepo.Rollback();
                    return new ApiResponse
                    {
                        Message = "Something went wrong. Please Contact Admin",
                        StatusCode = StatusCodes.Status400BadRequest
                    };
                }
            }

        }
        #endregion

        #region Private Method
        private long CattleMasterIdByTagCode(Repository<CattleMasterModel> repository, string tagNo)
        {
            string strQuery = @"select CattleMasterId from CattleMaster where TagNo = @tag";
            return repository.Query<long>(strQuery, new { tag = tagNo });
        }
        private void AddUpdateCattle(Repository<CattleMasterModel> repository, AICallModel aiModel,
            long? farmerId, long? societyId, AICallCrudModel aidata = default(AICallCrudModel))
        {
            switch (!string.IsNullOrWhiteSpace(aiModel.TagCode))
            {
                case true:
                    CattleMasterModel objCattleMaster = repository.ReadOne(
                        criteria: "isnull(TagNo,'')<>'' and ltrim(rtrim(TagNo))=@tNo and IsActive=@act",
                        parameters: new { tNo = aiModel.TagCode.Trim(), act = (int)RecordStatusEnum.Active });
                    if (objCattleMaster == null)
                    {
                        objCattleMaster = new CattleMasterModel
                        {
                            TagNo = aiModel.TagCode,
                            CattleTypeId = 0 == (aiModel.CattleTypeId ?? 0) ? null : aiModel.CattleTypeId,
                            BreedMasterId = 0L == (aiModel.BreedMasterId ?? 0L) ? null : aiModel.BreedMasterId,
                            AgeGroupTypeId = 0 == (aiModel.AgeGroupTypeId ?? 0) ? null : aiModel.AgeGroupTypeId,
                            LactationNos = -1 == (aiModel.LactationNo ?? -1) ? null : aiModel.LactationNo,
                            FarmerMasterId = farmerId,
                            IsRegisteredFarmer = aiModel.IsRegisteredFarmer,
                            SocietyMasterId = societyId,
                            Gender = (int)Enums.Gender.Female,
                            Status = (int)Enums.CalfStatus.Live,
                            DateOfBirth = 0 == (aiModel.CattleTypeId ?? 0)
                                ? null : CalculateCattleDateOfBirth(aiModel.CattleTypeId.Value, aiModel.LactationNo ?? 0),
                            EntryMode = (int)Enums.EntryMode.Auto,
                            CreatedBy = _currentUser?.Info?.Id,
                            RegistrationDate = DateTime.Now
                        };

                        if (default(AICallCrudModel) != aidata)
                        {
                            objCattleMaster.LastCalvingDate = aidata.LastCalvingDate;
                            objCattleMaster.MilkingStatus = 0 == (aidata.MilkingStatus ?? 0) ? null : aidata.MilkingStatus;
                            objCattleMaster.PeakMilkYield = 0 == (aidata.PeakMilkYield ?? 0) ? null : aidata.PeakMilkYield;
                            objCattleMaster.SuperiorAnimal = 0 == (aidata.SuperiorAnimal ?? 0) ? null : aidata.SuperiorAnimal;
                            objCattleMaster.SuperiorAiSireNo = aidata.SuperiorAiSireNo;
                            objCattleMaster.NDDBTypeId = aidata.NDDBTypeId;
                        }

                        repository.Add(objCattleMaster);
                    }
                    else
                    {
                        objCattleMaster.CattleTypeId = 0 == (aiModel.CattleTypeId ?? 0)
                            ? objCattleMaster.CattleTypeId : aiModel.CattleTypeId;
                        objCattleMaster.BreedMasterId = 0L == (aiModel.BreedMasterId ?? 0L)
                            ? objCattleMaster.BreedMasterId : aiModel.BreedMasterId;
                        if ((int)Enums.CallStatus.Close == aiModel.CallStatus)
                        {
                            objCattleMaster.AgeGroupTypeId = 0 == (aiModel.AgeGroupTypeId ?? 0)
                               ? objCattleMaster.AgeGroupTypeId : aiModel.AgeGroupTypeId;
                            objCattleMaster.LactationNos = aiModel.LactationNo;
                            objCattleMaster.FarmerMasterId = farmerId;
                            objCattleMaster.IsRegisteredFarmer = aiModel.IsRegisteredFarmer;
                            objCattleMaster.SocietyMasterId = societyId;
                            if (null == objCattleMaster.DateOfBirth)
                                objCattleMaster.DateOfBirth = 0 == (aiModel.CattleTypeId ?? 0)
                                ? objCattleMaster.DateOfBirth : CalculateCattleDateOfBirth(aiModel.CattleTypeId.Value, aiModel.LactationNo ?? 0);
                            objCattleMaster.EntryMode = (int)Enums.EntryMode.Auto;
                            objCattleMaster.UpdatedBy = _currentUser?.Info?.Id;
                        }

                        if (default(AICallCrudModel) != aidata)
                        {
                            if (!objCattleMaster.LastCalvingDate.HasValue || objCattleMaster.LastCalvingDate == DateTime.MinValue)
                                objCattleMaster.LastCalvingDate = aidata.LastCalvingDate;
                            if (!objCattleMaster.MilkingStatus.HasValue || objCattleMaster.MilkingStatus == 0)
                                objCattleMaster.MilkingStatus = aidata.MilkingStatus;
                            if (aidata.PeakMilkYield.HasValue && aidata.PeakMilkYield != 0)
                                objCattleMaster.PeakMilkYield = aidata.PeakMilkYield;
                            if (aidata.SuperiorAnimal.HasValue && aidata.SuperiorAnimal != 0)
                                objCattleMaster.SuperiorAnimal = aidata.SuperiorAnimal;
                            if (!string.IsNullOrWhiteSpace(aidata.SuperiorAiSireNo))
                                objCattleMaster.SuperiorAiSireNo = aidata.SuperiorAiSireNo;
                            objCattleMaster.NDDBTypeId = aidata.NDDBTypeId;
                        }
                        repository.Update(objCattleMaster);
                    }
                    break;
                default:
                    break;
            }
        }

        private DateTime? CalculateCattleDateOfBirth(int type, int lactationno)
            => DateTime.Today.AddYears(-(lactationno + ((int)Enums.CattleType.Cow == type ? 3 : 4)));

        private ApiResponse Get(Pagination pagination, Enums.CallStatus status, string filter,
            params Parameter[] parameters)
        {
            ApiResponse response;
            Pagination<AICallListModel> pgData;
            pagination.SortBy = string.IsNullOrWhiteSpace(pagination.SortBy) ? "AICallId desc" : pagination.SortBy.Trim();

            string strQuery = Enums.SystemUserRole.AIWorker == _currentUser?.Role()
                ? AiCallWorkerQuery
                : GetQueryByDesignation();

            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoAiCall = new Repository<AICallModel>(connection);
                pgData = _repoAiCall.Query<AICallListModel, AICallModel>(
                   string.Format(strQuery, 0 == status ? "" : "and ac.CallStatus=@cStatus", filter),
                   pagination.SortBy, pagination.PageNo, pagination.RecordsPerPage,
                   parameters);
            }

            if (null == pgData?.Data || 0 >= pgData?.Data.Count())
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = _culture.GetString("msg_NoAiCallFound")
                };
            else
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status200OK,
                    Data = pgData
                };
            return response;
        }

        private int GetCycle(Repository<AICallModel> repository, string tag)
        {
            int result = default(int);
            if (string.IsNullOrWhiteSpace(tag))
                result = 0;
            else
                result = repository.Query<int>(
                    @"select top 1 case when c.Status=@abrt or c.Status=@flspd then 1 else (ac.Cycle+1) end as Cycle
                    from AICall ac
                    inner join PDEntry p with(nolock) on p.AICallId=ac.AICallId
                    inner join Calving c with(nolock) on c.PDEntryId=p.PDEntryId
                    where ac.TagCode=@tag order by c.DoneDate desc",
                    new
                    {
                        tag,
                        abrt = Enums.CalvingStatus.Abortion,
                        flspd = Enums.CalvingStatus.FalsePD
                    });
            return result;
        }
        private int GetCattleAgeGroupTypeId(Repository<AICallModel> repository, string tag)
        {
            int result;
            int retAGType = (int)Enums.AgeGroupType.Heifer;
            if (string.IsNullOrWhiteSpace(tag))
                result = 0;
            else
                result = repository.Query<int>(
                    @"select top 1 c. CalvingId from AICall ac
                    inner join PDEntry p with(nolock) on p.AICallId=ac.AICallId
                    inner join Calving c with(nolock) on c.PDEntryId=p.PDEntryId
                    where ac.TagCode=@tag order by c.DoneDate desc",
                    new { tag }
                    );
            if (result != 0 && result != null)
            {
                retAGType = (int)Enums.AgeGroupType.Adult;
            }
            return retAGType;

        }

        private CodeName<int, int> GetTotalAiAndGroup(Repository<AICallModel> repository, string tag)
        {
            return repository.Query<CodeName<int, int>, AICallModel>(
                @"select top 1 case when cl.CalvingId is not null then 1 else isnull(TotalAI,0)+1 end Code,
                case when cl.CalvingId is not null then isnull(AiGroup,0)+1 else 1 end [Name]
                from AICall ac with(nolock)
                left outer join PDEntry pd with(nolock) on pd.AICallId=ac.AICallId
                left outer join Calving cl with(nolock) on cl.PDEntryId=pd.PDEntryId
                where ac.TagCode=@tag and ac.CallStatus=@close order by ac.CloseDate desc",
                new Parameter("tag", System.Data.DbType.AnsiString, tag),
                new Parameter("close", System.Data.DbType.Int32, (int)Enums.CallStatus.Close))
                ?.FirstOrDefault() ?? new CodeName<int, int> { Code = 1, Name = 1 };
        }

        private ApiResponse SendNotificationOnRegister(AICallModel model, string message, string[] contactfields, string ops)
        {
            TenantDetail tenant = Tenant.GetTenant(_httpContext);
            TemplateDetailModel objTemplateDetail = _generalMaster.GetTemplateDetailById((int)Enums.Template.OnAIRegistration, (int)Enums.Culture.Gujarati);
            return SendNotification<ISmsServiceProvider, AICallModel>(_repoAiCall, message,
                objTemplateDetail?.Message,
                contactfields,
                Enums.AIAppSMSType.OnAIRegistration,
                string.Format("{0} Ticket #{1}", ops, model.CallNumber),
                AiCallRegistrationTemplateQuery, objTemplateDetail?.TemplateNo ?? 0,
                new Parameter("uType", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
                new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                new Parameter("cow", System.Data.DbType.Int32, (int)Enums.CattleType.Cow),
                new Parameter("acid", System.Data.DbType.Int64, model.AICallId),
                new Parameter("culture", System.Data.DbType.Int32, (int)tenant.Culture));
        }

        private string GetQueryByDesignation(bool isExport = false)
        {
            string result = default(string);
            switch (_currentUser.Designation())
            {
                case Enums.SystemUserDesignation.SuperAdmin:
                case Enums.SystemUserDesignation.Employee:
                    result = isExport ? AiCallEmployeeExportQuery : AiCallEmployeeQuery;
                    break;
                default:
                    result = (isExport ? AiCallRestExportQuery : AiCallRestQuery)
                        .Replace("[UserType]", $"{(int)Enums.UserType.Employee}");
                    break;
            }
            return result;
        }

        private CodeName<int, int> ValidateAiCallEntry(Repository<AICallModel> repository, AICallCrudModel model, bool closecheck = false)
        {
            CodeName<int, int> result = new CodeName<int, int>
            {
                Code = (int)Enums.AiCallValidation.Valid,
                Name = 0
            };

            if (!string.IsNullOrWhiteSpace(model.TagCode))
                result = repository.Query<CodeName<int, int>, AICallModel>(@"declare @flag bit=0,@totalstraw int=0
                select @flag=(case when DATEDIFF(DAY,DateOfBirth,GETDATE())<279 then 1 else 0 end) from CattleMaster
				where isnull(TagNo,'')<>'' and TagNo=@tagno and [Status] = @cflive

				if (@flag=1)
				begin
					select @newBornCalf Code,@totalstraw [Name]
				end
				else
				begin    
                    select @flag=1 from CattleMaster
                    where isnull(TagNo,'')<>'' and TagNo=@tagno and [Status] in (@cfdead,@cfsold)
                    
                    if (@flag=1)
                    begin
                    	select @dead Code,@totalstraw [Name]
                    end
                    else
                    begin
                    	select top 1 @flag=(case when p.StatusTypeId=@pstatus and c.CalvingId is null then 1 else 0 end) from AICall ac with(nolock)
                    	inner join PDEntry p with(nolock) on p.AICallId=ac.AICallId and ac.IsActive=@act
                    		and isnull(ac.TagCode,'')<>'' and ac.TagCode=@tagno
                    	left outer join Calving c with(nolock) on c.PDEntryId=p.PDEntryId
                    	order by p.CheckedDate desc
                    	
                    	if (@flag=1)
                    	begin
							select @clpending Code,@totalstraw [Name]
                    	end
						else
						begin
							select top 1 @flag=(case when c.[Status]<>@flspd and c.[Status]<>@abrt and datediff(day,c.DoneDate,getdate())<=45 then 1 else 0 end) from AICall ac with(nolock)
							inner join PDEntry p with(nolock) on p.AICallId=ac.AICallId and ac.IsActive=@act
								and isnull(ac.TagCode,'')<>'' and ac.TagCode=@tagno
							inner join Calving c with(nolock) on c.PDEntryId=p.PDEntryId
							order by c.DoneDate desc

							if (@flag=1)
                    		begin
                    			select @rntcalving Code,@totalstraw [Name]
                    		end
							else if (@closecheck=0)
							begin
								select @valid Code,@totalstraw [Name]
							end
							else
                    		begin
								if (@noofstraw<=0)
								begin
									select @strawreq Code,@totalstraw [Name]
								end
								else
								begin
									select @totalstraw=(ssa.ClosingQty-(isnull(ac.NoOfStraw,0)+isnull(ssw.WastageQty,0))) from SemenStockAllocation ssa with(nolock)
									inner join SemenStockInward ssi with(nolock) on ssi.SemenStockInwardId=ssa.SemenStockInwardId 
										and ssa.SemenStockAllocationId=@semenStockAllocationId and ssa.IsActive=@act and ssi.IsActive=@act
									left outer join (select ac.SemenStockAllocationId,isnull(sum(ac.NoOfStraw),0)NoOfStraw from AICall ac with(nolock) 
										where ac.SemenStockAllocationId=@semenStockAllocationId and ac.IsActive=@act
										group by ac.SemenStockAllocationId)ac on ac.SemenStockAllocationId=ssa.SemenStockAllocationId
									left outer join (select ssw.SemenStockAllocationId,isnull(sum(ssw.WastageQty),0)WastageQty from SemenStockWastage ssw with(nolock) 
										where ssw.SemenStockAllocationId=@semenStockAllocationId and ssw.IsActive=@act
										group by ssw.SemenStockAllocationId)ssw on ssw.SemenStockAllocationId=ssa.SemenStockAllocationId
                    				
									if (@totalstraw-@noofstraw < 0)
									begin
										select @strawexd Code,@totalstraw [Name]
									end
									else
									begin
										select @valid Code,@totalstraw [Name]
									end
								end
                    		end
						end
                    end
                end",
                    new Parameter("tagno", System.Data.DbType.AnsiString, model.TagCode),
                    new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
                    new Parameter("@cfdead", System.Data.DbType.Int32, (int)Enums.CalfStatus.Dead),
                    new Parameter("@cfsold", System.Data.DbType.Int32, (int)Enums.CalfStatus.Sold),
                    new Parameter("@cflive", System.Data.DbType.Int32, (int)Enums.CalfStatus.Live),
                    new Parameter("pstatus", System.Data.DbType.Int32, (int)Enums.PDStatus.Pregnant),
                    new Parameter("valid", System.Data.DbType.Int32, (int)Enums.AiCallValidation.Valid),
                    new Parameter("dead", System.Data.DbType.Int32, (int)Enums.AiCallValidation.Dead),
                    new Parameter("clpending", System.Data.DbType.Int32, (int)Enums.AiCallValidation.CalvingPending),
                    new Parameter("rntcalving", System.Data.DbType.Int32, (int)Enums.AiCallValidation.RecentCalving),
                    new Parameter("newBornCalf", System.Data.DbType.Int32, (int)Enums.AiCallValidation.NewBornCalf),
                    new Parameter("abrt", System.Data.DbType.Int32, (int)Enums.CalvingStatus.Abortion),
                    new Parameter("flspd", System.Data.DbType.Int32, (int)Enums.CalvingStatus.FalsePD),
                    new Parameter("closecheck", System.Data.DbType.Boolean, closecheck),
                    new Parameter("semenStockAllocationId", System.Data.DbType.Int64, model.SemenStockAllocationId),
                    new Parameter("noofstraw", System.Data.DbType.Int32, model.NoOfStraw ?? 0),
                    new Parameter("strawreq", System.Data.DbType.Int32, (int)Enums.AiCallValidation.NoOfStrawRequired),
                    new Parameter("strawexd", System.Data.DbType.Int32, (int)Enums.AiCallValidation.NoOfStrawExceed)).FirstOrDefault();

            return result;
        }

        //private Pagination<TReport> GetReport<TReport>(AICAllReportFilterModel reportFilter,
        // Pagination pagination = default(Pagination), string sortBy = default(string)) where TReport : class, new()
        //{
        //    Pagination<TReport> pgData;
        //    List<Parameter> societies = reportFilter.SocietyCodes?.Select((s, i)
        //           => new Parameter($"@sc{i}", System.Data.DbType.AnsiString, s.TrimEnd(' ', '*')))
        //           ?.ToList() ?? new List<Parameter>();
        //    List<Parameter> aiworkers = reportFilter.AIWorkerMasterIds?.Select((a, i)
        //          => new Parameter($"@aw{i}", System.Data.DbType.Int64, a))
        //          ?.ToList() ?? new List<Parameter>();

        //    List<Parameter> bulls = reportFilter.BullMasterIds?.Select((b, i)
        //          => new Parameter($"@b{i}", System.Data.DbType.Int64, b))
        //          ?.ToList() ?? new List<Parameter>();

        //    List<Parameter> doneby = reportFilter.ValidationDoneBy?.Select((d, i)
        //    => new Parameter($"@doneby{i}", System.Data.DbType.Int64, d))
        //    ?.ToList() ?? new List<Parameter>();

        //    List<Parameter> parameters = new List<Parameter>
        //    {
        //        new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
        //        new Parameter("uId", System.Data.DbType.Int64, Convert.ToInt64(_currentUser?.Info?.Id)),
        //        new Parameter("FromDate", System.Data.DbType.DateTime, reportFilter.FromDate.Date),
        //        new Parameter("ToDate", System.Data.DbType.DateTime, reportFilter.ToDate.Date.AddDays(1).AddMilliseconds(-2)),
        //        new Parameter("Close", System.Data.DbType.Int32, (int)Enums.CallStatus.Close),
        //        new Parameter("uType", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
        //        new Parameter("CattleType", System.Data.DbType.Int32, (int)reportFilter.CattleType),
        //        new Parameter("NoOfAI", System.Data.DbType.Int32, (int)reportFilter.NoOfAI),
        //        new Parameter("CallStatus", System.Data.DbType.Int32, (int)reportFilter.CallStatus),
        //        new Parameter("employee", System.Data.DbType.Int32, (int)Enums.UserType.Employee),
        //        new Parameter("doc", System.Data.DbType.Int32, (int)Enums.SystemUserRole.Doctor),
        //        new Parameter("sup", System.Data.DbType.Int32, (int)Enums.SystemUserRole.Supervisor),
        //        new Parameter("wrk", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
        //        new Parameter("OptionYesNo", System.Data.DbType.Int32,reportFilter.OptionYesNo.ToString() == "Yes" ? 1: 0),
        //        new Parameter("RequestStatus", System.Data.DbType.Int32,(int)reportFilter.RequestStatus),
        //    };
        //    parameters.AddRange(societies);
        //    parameters.AddRange(aiworkers);
        //    parameters.AddRange(bulls);
        //    parameters.AddRange(doneby);

        //    using (var connection = Tenant.GetConnection(_httpContext))
        //    {
        //        _repoAiCall = new Repository<AICallModel>(connection);
        //        pgData = default(Pagination) == pagination
        //            ? new Pagination<TReport>
        //            {
        //                Data = _repoAiCall.Query<TReport, AICallModel>(
        //                    GetReportQuery(societies, aiworkers, bulls, doneby, reportFilter, Order(sortBy, "AICallId desc"), true),
        //                    parameters.ToArray())
        //            }
        //            : _repoAiCall.Query<TReport, AICallModel>(
        //                GetReportQuery(societies, aiworkers, bulls, doneby, reportFilter, string.Empty),
        //                GetReportCountQuery(societies, bulls, doneby, reportFilter),
        //                pagination.SortBy, pagination.PageNo, pagination.RecordsPerPage, parameters.ToArray());
        //    }
        //    return pgData;
        //}

        //private Pagination<AISummaryReportModel> GetSummaryReport(AISummaryReportFilterModel reportFilter,
        //    Pagination pagination = default(Pagination), string sortBy = default(string))
        //{
        //    Pagination<AISummaryReportModel> pgData;
        //    List<Parameter> societies = reportFilter.SocietyCodes?.Select((s, i)
        //           => new Parameter($"@sc{i}", System.Data.DbType.AnsiString, s.TrimEnd(' ', '*')))
        //           ?.ToList() ?? new List<Parameter>();
        //    List<Parameter> aiworkers = reportFilter.AIWorkerMasterIds?.Select((a, i)
        //           => new Parameter($"@aw{i}", System.Data.DbType.Int64, a))
        //           ?.ToList() ?? new List<Parameter>();
        //    List<Parameter> parameters = new List<Parameter>
        //    {
        //        new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
        //        new Parameter("uId", System.Data.DbType.Int64, Convert.ToInt64(_currentUser?.Info?.Id)),
        //        new Parameter("cStatus", System.Data.DbType.Int32, (int)Enums.CallStatus.Close),
        //        new Parameter("uType", System.Data.DbType.Int32, (int)Enums.UserType.AIWorker),
        //        new Parameter("employee", System.Data.DbType.Int32, (int)Enums.UserType.Employee),
        //        new Parameter("FromDate", System.Data.DbType.Date, reportFilter.FromDate.Date),
        //        new Parameter("ToDate", System.Data.DbType.Date, reportFilter.ToDate.Date.AddDays(1).AddMilliseconds(-2))
        //    };
        //    parameters.AddRange(societies);
        //    parameters.AddRange(aiworkers);

        //    using (var connection = Tenant.GetConnection(_httpContext))
        //    {
        //        _repoAiCall = new Repository<AICallModel>(connection);
        //        pgData = default(Pagination) == pagination
        //            ? new Pagination<AISummaryReportModel>
        //            {
        //                Data = _repoAiCall.Query<AISummaryReportModel, AICallModel>(
        //                    GetSummaryReportQuery(aiworkers, societies, Order(sortBy, "AIWorkerName")),
        //                    parameters.ToArray())
        //            }
        //            : _repoAiCall.Query<AISummaryReportModel, AICallModel>(GetSummaryReportQuery(aiworkers, societies, string.Empty),
        //                pagination.SortBy, pagination.PageNo, pagination.RecordsPerPage, parameters.ToArray());
        //    }
        //    return pgData;
        //}

        //private string GetReportQuery(List<Parameter> societies, List<Parameter> aiworkers, List<Parameter> bulls, List<Parameter> doneby, AICAllReportFilterModel filter, string sortBy, bool isExport = false)
        //{
        //    string query = Enums.SystemUserRole.AIWorker == _currentUser?.Role()
        //       ? AiCallReportWorkerQuery
        //       : GetReportQueryByDesignation(isExport, filter.AllowNonNDDBTag);

        //    return string.Format(query,
        //        GetReportFilterQuery(filter),
        //        GetReportSocietyFilterQuery(societies),
        //         GetBullFilter(bulls, filter.OptionYesNo != Enums.OptionYesNo.NA),
        //        GetValidateByFilter(doneby, filter),
        //        GetDateRangeFilter(filter));
        //}
        //private string GetReportCountQuery(List<Parameter> societies, List<Parameter> bulls, List<Parameter> doneby, AICAllReportFilterModel filter)
        //{
        //    filter.AIWorkerMasterIdFlagCount = 1;
        //    string query = Enums.SystemUserRole.AIWorker == _currentUser?.Role()
        //        ? AiCallReportWorkerCountQuery
        //        : GetReportCountQueryByDesignation();

        //    return string.Format(query,
        //        GetReportFilterQuery(filter),
        //        GetReportSocietyFilterQuery(societies),
        //      GetBullFilter(bulls, filter.OptionYesNo != Enums.OptionYesNo.NA),
        //        GetValidateByFilter(doneby, filter),
        //        GetDateRangeFilter(filter));
        //}

        //private string GetReportQueryByDesignation(bool isExport, bool? AllowNDDBType)
        //{
        //    string result = default(string);
        //    switch (_currentUser.Designation())
        //    {
        //        case Enums.SystemUserDesignation.SuperAdmin:
        //        case Enums.SystemUserDesignation.Employee:
        //            result = isExport ? AiCallReportExportEmployeeQuery : AiCallReportEmployeeQuery;
        //            break;
        //        default:
        //            result = isExport ? AiCallReportExportRestQuery : AiCallReportRestQuery;
        //            break;
        //    }
        //    return result;
        //}

        //private string GetReportCountQueryByDesignation()
        //{
        //    string result = default(string);
        //    switch (_currentUser.Designation())
        //    {
        //        case Enums.SystemUserDesignation.SuperAdmin:
        //        case Enums.SystemUserDesignation.Employee:
        //            result = AiCallReportEmployeeCountQuery;
        //            break;
        //        default:
        //            result = AiCallReportRestCountQuery;
        //            break;
        //    }
        //    return result;
        //}

        //private string GetReportFilterQuery(AICAllReportFilterModel filter)
        //{
        //    string filterquery = string.Empty;
        //    string aiIds = string.Join(",", filter.AIWorkerMasterIds);
        //    string doneby = string.Empty;
        //    if (filter.AIWorkerMasterIds.Length != 0)
        //        filterquery += $@" and ac.AIWorkerMasterId IN ({aiIds}) ";
        //    if (filter.CattleType > 0)
        //        filterquery += "and ac.CattleTypeId=@CattleType";
        //    if (filter.NoOfAI > 0)
        //        filterquery += " and ac.NoOfAI=@NoOfAI";
        //    if (filter.CallStatus > 0)
        //        filterquery += "and ac.CallStatus=@CallStatus";
        //    if ((filter.CallStatus == Enums.CallStatus.Close || filter.CallStatus == Enums.CallStatus.All) && (int)filter.RequestStatus > 0)
        //        filterquery += $" and isnull(ac.AIRequestStatus,{(int)Enums.RequestStatus.NotChecked})=@RequestStatus";

        //    return filterquery;
        //}
        //private string GetDateRangeFilter(AICAllReportFilterModel filter)
        //{
        //    if (filter.DateRangeFilter == 0)
        //    {
        //        return $"and CONVERT(date, ac.ValidatedOn) between CONVERT(date,@FromDate) and CONVERT(date,@ToDate)";
        //    }
        //    return $"and CONVERT(date, ac.CallDate) between CONVERT(date,@FromDate) and CONVERT(date,@ToDate)";
        //}
        //private string GetReportSocietyFilterQuery(List<Parameter> societies)
        //    => (societies?.Any() ?? false) ? $"and sm.SocietyCode in ({string.Join(',', societies.Select(s => s.Key))})" : string.Empty;
        //private string GetBullFilter(List<Parameter> data, bool isSexedSemen)
        //{
        //    if (data?.Any() ?? false)
        //    {
        //        if (isSexedSemen)
        //            return $"where bm.BullMasterId in ({string.Join(',', data.Select(b => b.Key))}) and bm.IsSexedSemen=@OptionYesNo";
        //        else
        //            return $"where bm.BullMasterId in ({string.Join(',', data.Select(b => b.Key))})";
        //    }
        //    else if (isSexedSemen)
        //        return "where bm.IsSexedSemen=@OptionYesNo";

        //    return string.Empty;
        //}
        //private string GetValidateByFilter(List<Parameter> doneby, AICAllReportFilterModel filter)
        //{
        //    if (doneby?.Any() ?? false)
        //    {
        //        if (filter.OptionYesNo != Enums.OptionYesNo.NA || filter.BullMasterIds.Length != 0)
        //        {
        //            return $"and ac.ValidatedBy in ({string.Join(',', doneby.Select(b => b.Key))}) and ac.AIRequestStatus!=0";
        //        }
        //        return $"where ac.ValidatedBy in ({string.Join(',', doneby.Select(b => b.Key))}) and ac.AIRequestStatus!=0";
        //    }
        //    return string.Empty;
        //}

        //private string GetSummaryReportQuery(List<Parameter> aiworkers, List<Parameter> societies, string sortBy)
        //{
        //    string query = Enums.SystemUserRole.AIWorker == _currentUser?.Role()
        //        ? AiSummaryReportWorkerQuery
        //        : GetSummaryReportQueryByDesignation();
        //    string result = string.Empty;
        //    bool flag = false;
        //    if (aiworkers.Any())
        //    {
        //        result = $"where y.AIWorkerMasterId in ({string.Join(',', aiworkers.Select(s => s.Key))})";
        //        flag = true;
        //    }

        //    if (societies.Any())
        //        result += $"{(flag ? " and" : "where")} y.SocietyCode in ({string.Join(',', societies.Select(s => s.Key))})";

        //    return string.Format(query, result, sortBy);
        //}
        //private string GetSummaryReportQueryByDesignation()
        //{
        //    string result = default(string);
        //    switch (_currentUser.Designation())
        //    {
        //        case Enums.SystemUserDesignation.SuperAdmin:
        //        case Enums.SystemUserDesignation.Employee:
        //            result = AiSummaryReportEmployeeQuery;
        //            break;
        //        default:
        //            result = AiSummaryReportRestQuery;
        //            break;
        //    }
        //    return result;
        //}

        private ApiResponse ReportResponse<TReport>(Func<Pagination<TReport>> data, string nodatamessage)
        {
            ApiResponse response = default(ApiResponse);
            Pagination<TReport> pgData = data();
            if (null == pgData?.Data || 0 >= pgData?.Data.Count())
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = nodatamessage
                };
            else
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status200OK,
                    Data = pgData
                };
            return response;
        }

        private ApiResponse BadRequest(string message)
            => new ApiResponse
            {
                StatusCode = StatusCodes.Status400BadRequest,
                Message = message
            };

        private async Task<byte[]> GetBytes(IFormFile formFile)
        {
            using (var memoryStream = new MemoryStream())
            {
                await formFile.CopyToAsync(memoryStream);
                return memoryStream.ToArray();
            }
        }

        private async Task<string> InsertBullImage(IFormFile bullImage)
        {
            if (null == bullImage)
                return string.Empty;
            try
            {
                var bytes = await GetBytes(bullImage);
                BullImage objBullImageFile = new BullImage
                {
                    FileName = bullImage.FileName,
                    FileSize = bullImage.Length,
                    FileType = Path.GetExtension(bullImage.FileName),
                    Contents = bytes,
                    CreatedOn = DateTime.Now
                };
                var result = await _mongoService.UploadFile<BullImage>(objBullImageFile);
                Log.Error("Bullimage FileSize-->" + objBullImageFile.FileSize);
                Log.Error("Bullimage id-->" + result.ToString());
                return result.ToString();
            }
            catch (Exception ex)
            {
                Log.Error(ex, "InsertBullImage-->");
                throw;
            }
        }

        private async Task<string> InsertFarmerImage(IFormFile farmerImage)
        {
            if (null == farmerImage)
                return string.Empty;
            try
            {
                var bytes = await GetBytes(farmerImage);
                FarmerImage objFarmerImageFile = new FarmerImage();
                objFarmerImageFile.FileName = farmerImage.FileName;
                objFarmerImageFile.FileSize = farmerImage.Length;
                objFarmerImageFile.FileType = Path.GetExtension(farmerImage.FileName);
                objFarmerImageFile.Contents = bytes;
                objFarmerImageFile.CreatedOn = DateTime.Now;
                // string filepath = $"{Path.GetTempPath()}{farmerImage.FileName}_{Guid.NewGuid()}.{objFarmerImageFile.FileType}";
                //Log.Error($"fiepath ----- {filepath}");
                //File.WriteAllBytes(filepath, bytes);
                var result = await _mongoService.UploadFile<FarmerImage>(objFarmerImageFile);
                Log.Error("Farmerimage FileSize-->" + objFarmerImageFile.FileSize);
                Log.Error("farmerimage id-->" + result.ToString());
                return result.ToString();
            }
            catch (Exception ex)
            {
                Log.Error(ex, "InsertFarmerImage-->");
                throw;
            }
        }

        private async Task<string> InsertTagImage(IFormFile tagImage)
        {
            if (null == tagImage)
                return string.Empty;
            try
            {
                var bytes = await GetBytes(tagImage);
                TagImage objTagImageFile = new TagImage();
                objTagImageFile.FileName = tagImage.FileName;
                objTagImageFile.FileSize = tagImage.Length;
                objTagImageFile.FileType = tagImage.ContentType;
                objTagImageFile.Contents = bytes;
                objTagImageFile.CreatedOn = DateTime.Now;
                string result = await _mongoService.UploadFileBlob<TagImage>(objTagImageFile);
                Log.Error("Tagimage FileSize-->" + objTagImageFile.FileSize);
                Log.Error("Tagimage id-->" + result);
                return result;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "InsertTagImage-->");
                throw;
            }
        }

        private async Task<string> InsertValidateImage(IFormFile validateImage)
        {
            if (null == validateImage)
                return string.Empty;
            try
            {
                var bytes = await GetBytes(validateImage);
                ValidateImage objBullImageFile = new ValidateImage
                {
                    FileName = validateImage.FileName,
                    FileSize = validateImage.Length,
                    FileType = Path.GetExtension(validateImage.FileName),
                    Contents = bytes,
                    CreatedOn = DateTime.Now
                };
                var result = await _mongoService.UploadFile<ValidateImage>(objBullImageFile);
                Log.Error("Validateimage FileSize-->" + objBullImageFile.FileSize);
                Log.Error("Validateimage id-->" + result.ToString());
                return result.ToString();
            }
            catch (Exception ex)
            {
                Log.Error(ex, "InsertValidateImage-->");
                throw;
            }
        }

        private async Task<string> InsertAnimalImage(IFormFile animalImage)
        {
            if (null == animalImage)
                return string.Empty;
            try
            {
                var bytes = await GetBytes(animalImage);
                AnimalImage objAnimalImageFile = new AnimalImage();
                objAnimalImageFile.FileName = animalImage.FileName;
                objAnimalImageFile.FileSize = animalImage.Length;
                objAnimalImageFile.FileType = animalImage.ContentType;
                objAnimalImageFile.Contents = bytes;
                objAnimalImageFile.CreatedOn = DateTime.Now;
                string result = await _mongoService.UploadFileBlob<AnimalImage>(objAnimalImageFile);
                Log.Error("Animalimage FileSize-->" + objAnimalImageFile.FileSize);
                Log.Error("Animalimage id-->" + result);
                return result;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "InsertAnimalImage-->");
                throw;
            }
        }

        private string GetBullCorrectionsFilter(bool isEmpty, bool isDateFilter)
        {
            switch (isDateFilter)
            {
                case true:
                    return "and bcl.CreatedOn between @from and @to";
                default:
                    return isEmpty
                        ? string.Empty
                        : @"and ( 
                        sm.SocietyCode=@srcBy or sm.SocietyName like concat('%',@srcBy,'%') or 
                        oldbm.BullNo like concat('%',@srcBy,'%') or
                        ai.callnumber like concat('%',@srcBy,'%') or
                        newbm.BullNo like concat('%',@srcBy,'%') or
                        su.NameEng like concat('%',@srcBy,'%') or su.NameGuj like concat('%',@srcBy,'%'))";
            }
        }

        private string GetQueryForBullCorrectionsByDesignation(bool emptyFilter, bool isExport = false, bool isDateFilter = false)
        {
            string result;
            switch (_currentUser.Designation())
            {
                case Enums.SystemUserDesignation.SuperAdmin:
                case Enums.SystemUserDesignation.Employee:
                    if (isExport)
                        result = string.Format(BullCorrectionsEmployeeExportQuery, GetBullCorrectionsFilter(emptyFilter, isDateFilter));
                    else
                        result = string.Format(BullCorrectionsEmployeeQuery, GetBullCorrectionsFilter(emptyFilter, isDateFilter));
                    break;
                default:
                    if (isExport)
                        result = string.Format(BullCorrectionsRestExportQuery, GetBullCorrectionsFilter(emptyFilter, isDateFilter));
                    else
                        result = string.Format(BullCorrectionsRestQuery, GetBullCorrectionsFilter(emptyFilter, isDateFilter));
                    break;
            }
            return result;
        }

        #endregion

        #region GetTagCode By Farmer and Society in ActiveAI

        public ApiResponse GetTagCodeByFarmerSoc(int societyid, int farmerid, int? nddbtypeid)
        {

            ApiResponse response;
            string query = "";
            List<TagCodeActiveAIModel> result = new List<TagCodeActiveAIModel>();
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoCattleMaster = new Repository<CattleMasterModel>(connection);
                if (nddbtypeid.IsEmpty() || nddbtypeid == (int)Enums.NDDBType.NDDB || nddbtypeid == 0)
                {
                    query = GetTagCodeByFarmerSocNddbQuery;

                }
                else if (nddbtypeid == (int)Enums.NDDBType.NonNDDB)
                {
                    query = GetTagCodeByFarmerSocNonNddbQuery;
                }
                result = _repoCattleMaster.Query<TagCodeActiveAIModel, CattleMasterModel>(query,
                 new Parameter("societyid", System.Data.DbType.Int32, societyid),
                 new Parameter("farmerid", System.Data.DbType.Int32, farmerid)).ToList();
            }

            if (null == result)
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = "No Tag Code found"
                };
            else
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status200OK,
                    Data = result
                };
            return response;
        }


        public ApiResponse GetTagCodeByNddbTypeSoc(int societyid, int? nddbtypeid)
        {
            ApiResponse response;
            string query = "";
            List<TagCodeActiveAIModel> result = new List<TagCodeActiveAIModel>();
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoCattleMaster = new Repository<CattleMasterModel>(connection);
                if (nddbtypeid.IsEmpty() || nddbtypeid == (int)Enums.NDDBType.NDDB || nddbtypeid == 0)
                {
                    query = GetTagCodeBySocNddbQuery;

                }
                else if (nddbtypeid == (int)Enums.NDDBType.NonNDDB)
                {
                    query = GetTagCodeBySocNonNddbQuery;
                }
                result = _repoCattleMaster.Query<TagCodeActiveAIModel, CattleMasterModel>(query,
                 new Parameter("societyid", System.Data.DbType.Int32, societyid)).ToList();
            }

            if (null == result)
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = "No Tag Code found"
                };
            else
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status200OK,
                    Data = result
                };
            return response;
        }

        public ApiResponse GetAIData(int SocietyCode, List<string> FarmerCodes, DateTime FromDate, DateTime ToDate)
        {
            var Region = Tenant.GetTenant(_httpContext).ShortCode;

            ApiResponse response;
            List<AIDataModel> aIDataModels = new List<AIDataModel>();

            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repoAIData = new Repository<AIDataModel>(connection);

                var AIDataModelObj = new List<AIDataModel>();

                IList<SqlParameter> sqlParameters = new List<SqlParameter>();
                SqlParameter parameter;
                DataTable dt = new DataTable();

                parameter = new SqlParameter("@Region", SqlDbType.VarChar);
                parameter.Value = Region;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@SocietyCode", SqlDbType.VarChar);
                parameter.Value = SocietyCode.ToString();
                sqlParameters.Add(parameter);

                dt.Columns.Add("ID", typeof(string));
                foreach (var id in FarmerCodes)
                {
                    dt.Rows.Add(id);
                }
                parameter = new SqlParameter("@FarmerCodes", SqlDbType.Structured);
                parameter.TypeName = "dbo.StringList";
                parameter.Value = dt;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@FromDate", SqlDbType.DateTime);
                parameter.Value = FromDate;
                sqlParameters.Add(parameter);

                parameter = new SqlParameter("@ToDate", SqlDbType.DateTime);
                parameter.Value = ToDate;
                sqlParameters.Add(parameter);

                AIDataModelObj = _repoAIData.ExecuteStoredProcedure("SP_Get_AIData", sqlParameters).ToList();

                if (null == AIDataModelObj || 0 >= AIDataModelObj.Count())
                    response = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status404NotFound,
                        Message = "No Record Found",
                        Data = AIDataModelObj
                    };
                else
                    response = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status200OK,
                        Data = AIDataModelObj
                    };
            }
            return response;
        }
        #region GetCouponList
       
         public async Task<ApiResponse> GetCouponList(CouponListModel data)
        {
            ApiResponse response = new ApiResponse();
            DigitalCertificateServerDetail digitalServerOptions = Tenant.GetTenant(_httpContext).DigitalCertificateServerDetail;

            if (digitalServerOptions.Enableflag)
            {
                data.tokenno = digitalServerOptions.TokenNo;

                HttpClient _httpClient = new HttpClient();
                using (var content = new StringContent(JsonConvert.SerializeObject(data), System.Text.Encoding.UTF8, "application/json"))
                {
                    content.Headers.ContentType.CharSet = "";
                    HttpResponseMessage result = await Task.FromResult(_httpClient.PostAsync(digitalServerOptions.CouponList, content).Result);
                    if (result.IsSuccessStatusCode)
                    {
                        string returnValue = result.Content.ReadAsStringAsync().Result;
                        response.Data = JsonConvert.DeserializeObject<CouponResponseModel>(returnValue)?.CouponList;
                        response.StatusCode = StatusCodes.Status200OK;
                    }
                    else
                    {
                        response.Data = null;
                        response.StatusCode = StatusCodes.Status400BadRequest;
                    }
                }
            }
            return response;
        }


        private async Task<bool> CouponUser(CouponUserModel data)
        {
            bool responseResult = false;
            DigitalCertificateServerDetail digitalServerOptions = Tenant.GetTenant(_httpContext).DigitalCertificateServerDetail;

            if (digitalServerOptions.Enableflag)
            {
                data.tokenno = digitalServerOptions.TokenNo;

                HttpClient _httpClient = new HttpClient();
                using (var content = new StringContent(JsonConvert.SerializeObject(data), System.Text.Encoding.UTF8, "application/json"))
                {
                    content.Headers.ContentType.CharSet = "";
                    HttpResponseMessage result = await Task.FromResult(_httpClient.PostAsync(digitalServerOptions.CouponUser, content).Result);
                    if (result.IsSuccessStatusCode)
                    {
                        string returnValue = result.Content.ReadAsStringAsync().Result;
                      //  response.Data = JsonConvert.DeserializeObject<CouponResponseModel>(returnValue);
                        //response.StatusCode = StatusCodes.Status200OK;
                    }
                }
            }
            return responseResult;
        }

        #endregion

        #endregion
    }
}