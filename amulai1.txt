using AI.Models;
using AI.Models.CustomModel;
using Microsoft.AspNetCore.Http;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using Prompt.Infrastructure;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.IO;
using System.Linq;
using Vega;
namespace AI.Services.User
{
    public class User : CommonService, IUser
    {
        private ApiResponse apiResponse;

        private Repository<UserModel> _repouser { get; set; }
        public User(IHttpContextAccessor httpContext, ICurrentUser currentUser) 
            : base(httpContext, currentUser) { }

        public ApiResponse Add(UserModel userModel)
        {
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repouser = new Repository<UserModel>(connection);
                UserModel User = _repouser.ReadOne(userModel.id);

                //UserModel User = (UserModel)_repouser.Add(userModel);
                    
                if (User == null)
                {
                 
                    _repouser.Add(userModel);
                    apiResponse = new ApiResponse()
                    {
                        Message = string.Format("User Saved with #{0}", userModel.id),
                        StatusCode = StatusCodes.Status200OK,
                        // Data = bullModel
                        Data = true
                    };
                }
                else
                {
                    apiResponse = new ApiResponse()
                    {
                        Message = string.Format("User No already exists ", userModel.id),
                        StatusCode = StatusCodes.Status409Conflict,
                        Data = false
                    };
                }
            }
            return apiResponse;
        }

       

        public ApiResponse GetAll()
        {
            throw new NotImplementedException();
        }

        public ApiResponse GetById(long id)
        {
            ApiResponse response = default(ApiResponse);
            UserModel result = new UserModel();
            //string strQuery;
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repouser = new Repository<UserModel>(connection);

                //strQuery = $@"select * from [User]";
                result = _repouser.Query<UserModel, UserModel>($@"select * from Users", new Parameter("id", System.Data.DbType.Int64, id)).FirstOrDefault();
                //result = _repouser.Query<UserModel>("select * from [User] where id = @id", new { id = id });

            }
            
            if (null == result)
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status404NotFound,
                    Message = "No Record Found",
                    Data = result
                };
            else
                response = new ApiResponse
                {
                    StatusCode = StatusCodes.Status200OK,
                    Data = result
                };
            return response;
        }

        public ApiResponse Update(long id, UserModel userModel)
        {

            ApiResponse apiResponse;


            using (var connection = Tenant.GetConnection(_httpContext))
            {
                
              
                _repouser = new Repository<UserModel>(connection);
               UserModel userModel1 = _repouser.ReadOne(
                criteria: "id = @id and IsActive=@act",
                parameters: new { id = id, act = (int)RecordStatusEnum.Active });
                if (userModel1 != null)
                {
                    _repouser.Update(userModel);
                    apiResponse = new ApiResponse()
                    {
                        Message = string.Format("Changes Saved to User #{0}", userModel.id),
                        StatusCode = StatusCodes.Status200OK,
                        // Data = bullModel
                        Data = true
                    };

                }
                else
                {
                    apiResponse = new ApiResponse()
                    {
                        Message = string.Format("user No already exists with #{0}", userModel.id),
                        StatusCode = StatusCodes.Status409Conflict,
                        Data = false
                    };
                }
            }
        
            return apiResponse;

            }
        
            public ApiResponse Delete(long id)
        {
            ApiResponse apiResponse = default(ApiResponse);
            using(var connection = Tenant.GetConnection(_httpContext))
            {
                _repouser = new Repository<UserModel>(connection);
                UserModel User = _repouser.ReadOne(criteria: "id=@id and IsActive=@act", parameters: new { @id = id, act = (int)RecordStatusEnum.Active });
                if (User != null)
                {
                    _repouser.Delete(id, _currentUser?.Info?.Id);
                    apiResponse = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status200OK,
                        Message = "Record deleted successfully",
                        Data = true
                    };

                }
                else
                {
                    apiResponse = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status204NoContent,
                        Message = "user Not Found",
                        Data = false
                    };
                }
            }
            return apiResponse;
        }

        
    }
}
controller-----------------------
using AI.Models;
using System;
using AI.Services.User;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Prompt.Infrastructure;



namespace AI.Web.Controllers.V1
{
    [Route("[controller]")]
    [ApiController, ApiVersion("1.0")]
    public class UserController : BaseController
    {
        public UserController(IUser _repouser)
        {
            User = _repouser;
        }
        /// <summary>
        ///  Add Bull Master
        /// </summary>
        /// <param name="userModel"></param>
        /// <remarks>
        /// Sample request:
        ///
        ///     POST api/User
        ///     
        ///         {
        ///         "id": 2,
        ///         "bullNo": "MR-40164",
        ///         "birthDate": "",
        ///         "bullBreed": "Murrah",
        ///         "semenProductionDate": "",
        ///         "species": 8,
        ///         "pTflag": "",
        ///         "setNo": "",
        ///         "damNo": "340020850787",
        ///         "damLactInKGS": "5098.4",
        ///         "fAt": 7.20,
        ///         "damsDamsLactInKgs": "",
        ///         "sireNo": "340077526043",
        ///         "sireDamsLactinKgs": "4100",
        ///         "bullBirthPlace": "SAG",
        ///         "breedingValue": ""
        ///         }
        /// </remarks>
        /// <response code="400">
        /// BadRequest:
        ///
        ///     {
        ///        "statusCode": 400,
        ///        "message": "something went wrong"
        ///     }
        /// </response>
        /// <response code="409">
        /// Conflict:
        ///
        ///     {
        ///        "statusCode": 409,
        ///        "message": "Bull No Already Exists",
        ///        "Data": null
        ///     }
        /// </response>
        /// <response code="200">
        /// Returns:
        ///
        ///     {
        ///         "statusCode": 200,
        ///         "message": "Record added successfully",
        ///         "data": {
        ///            "UserId" : 1,
        ///            "Name" :vira,
        ///            "dob" :"01/01/0001 12:00 AM"
        ///            "departmentId": 1,
        ///            "isActive": true,
        ///            "companyId"1,
        ///             "createdOn": "01/01/0001 12:00 AM",
        ///             "updatedOn": "01/01/0001 12:00 AM",
        ///             "isActive": true,
        ///             "createdBy": 2,
        ///             "remarks":"test",
        ///             "versionNo": 1
        ///      }
        /// </response>
        /// 
        [HttpPost]
        [ProducesResponseType(StatusCodes.Status409Conflict)]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public IActionResult Add([FromBody] UserModel userModel)
        {
            if (InvalidModel(out ApiResponse response))
                return Ok(response);

            return Ok(User.Add(userModel));
        }

        /// <summary>
        /// Get Bull Master List By Id
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        /// <response code="200">
        /// Returns:
        ///
        ///      {
        ///         "statusCode": 200,
        ///         "message": "Success",
        ///         "data": [{ 
        ///                 "bullMasterId": 552,
        ///                 "semenStation": "SAG",
        ///                 "bullNo": "MR-40165",
        ///                 "bullBreed": "Murrah",
        ///                 "species": "8",
        ///                 "pTflag": "",
        ///                 "setNo": "",
        ///                 "damNo": "",
        ///                 "damLactInKGS": "",
        ///                 "fat": 0,
        ///                 "damsDamsLactInKGS": "",
        ///                 "sireNo": "",
        ///                 "bullBirthPlace": "",
        ///                 "breedingValue": "",
        ///                 "createdOn": "01/01/0001 12:00 AM",
        ///                 "updatedOn": "01/01/0001 12:00 AM",
        ///                 "isActive": false,
        ///                 "versionNo": 1,
        ///                 "remarks":"test",
        ///         }]
        ///     }
        /// </response>
        /// <response code="404">
        /// Returns:
        ///
        ///     {
        ///        "StatusCode": 404,
        ///        "Message": "Record Not Found",
        ///        "Data": null
        ///     }
        ///
        /// </response>
        /// <response code="400">
        /// Returns:
        ///
        ///     {
        ///        "StatusCode": 400,
        ///        "Message": "Invalid Id received",
        ///        "Data": null
        ///     }
        ///
        /// </response>
        [HttpGet("{id:long}")]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public IActionResult GetById(long id)
        {
            if (id == default(long))
                return Ok(new ApiResponse
                {
                    StatusCode = StatusCodes.Status400BadRequest,
                    Message = $"Invalid {nameof(id)} received"
                });

            return Ok(User.GetById(id));
        }
        /// <summary>
        ///  Update User
        /// </summary>
        /// <param name="id"></param>
        /// <param name="userModel"></param>
        /// <remarks>
        /// Sample request:
        ///
        ///     GET api/User/Update/1
        ///     
        ///         {
        ///         "bullMasterId": 552,
        ///         "semenStation": "1",
        ///         "bullNo": "MR-40165",
        ///         "birthDate": "",
        ///         "bullBreed": "7",
        ///         "semenProductionDate": "",
        ///         "species": "8",
        ///         "pTflag": "",
        ///         "setNo": "",
        ///         "damNo": "",
        ///         "damLactInKGS": "",
        ///         "fat": 0,
        ///         "damsDamsLactInKGS": "",
        ///         "sireNo": "",
        ///         "bullBirthPlace": "",
        ///         "breedingValue": "",
        ///             "remarks":"test",
        ///         }
        /// </remarks>
        /// <param></param>
        /// <response code="400">
        /// BadRequest::
        ///
        ///     {
        ///        "statusCode": 400,
        ///        "message": "something went wrong"
        ///     }
        /// </response>
        /// <response code="409">
        /// Conflict:
        ///
        ///     {
        ///        "statusCode": 409,
        ///        "message": "Bull No Already Exists",
        ///        "Data": null
        ///     }
        /// </response>
        /// <response code="200">
        /// Returns:
        ///
        ///     {
        ///        "statusCode": 200,
        ///        "message": "Record updated successfully",
        ///        "data": {
        ///                 "bullMasterId": 552,
        ///                 "semenStation": "1",
        ///                 "bullNo": "MR-40165",
        ///                 "bullBreed": "7",
        ///                 "species": "8",
        ///                 "pTflag": "",
        ///                 "setNo": "",
        ///                 "damNo": "",
        ///                 "damLactInKGS": "",
        ///                 "fat": 0,
        ///                 "damsDamsLactInKGS": "",
        ///                 "sireNo": "",
        ///                 "bullBirthPlace": "",
        ///                 "breedingValue": "",
        ///                 "createdOn": "01/01/0001 12:00 AM",
        ///                 "updatedOn": "01/01/0001 12:00 AM",
        ///                 "isActive": false,
        ///                 "remarks":"test",
        ///                 "versionNo": 1
        ///     }
        /// </response>
        /// 
        [HttpPut("update")]
      
        public IActionResult Update(long id, [FromBody] UserModel userModel)
        {
           return Ok(User.Update(id, userModel));
        }
        /// <summary>
        /// Delete User
        /// </summary>
        /// <remarks>
        /// Sample request:
        /// 
        ///     DELETE /api/User
        ///   
        /// </remarks>
        /// <param name="id"></param>
        /// <returns></returns>
        /// <response code="409">
        /// Data Conflict:
        ///
        ///     {
        ///        "statusCode": 409,
        ///        "message": "Bull Being Used in Other Data"
        ///     }
        /// 
        /// </response>
        /// <response code="200">
        /// Returns:
        ///
        ///     {
        ///        "statusCode": 200,
        ///        "message": "Success",
        ///        "data": null
        ///			  
        ///     }
        /// 
        /// </response>
        /// <response code="400">
        /// Returns:
        ///
        ///     {
        ///        "StatusCode": 400,
        ///        "Message": "Invalid Id received",
        ///        "Data": null
        ///     }
        ///
        /// </response>
        [HttpDelete("{id:long}")]
        [ProducesResponseType(StatusCodes.Status409Conflict)]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public IActionResult Delete(long id)
            => Ok(User.Delete(id));


    }

}
using AI.Models;
using Prompt.Infrastructure;

namespace AI.Services.User
{
    public interface IUser
    {
        ApiResponse Add(UserModel userModel);
        ApiResponse Update(long id,UserModel userModel);
        ApiResponse Delete( long id);
        ApiResponse GetAll();
        ApiResponse GetById(long id);
    }
}
------------------
public ApiResponse GetAll(Pagination pagination, string searchBy, bool isExpired)
{
    ApiResponse response;
    Pagination<BullMasterListModel> pgData;
    pagination.SortBy = string.IsNullOrWhiteSpace(pagination.SortBy) ? "BullMasterId DESC" : pagination.SortBy.Trim();

    using (var connection = Tenant.GetConnection(_httpContext))
    {
        _repoBullMaster = new Repository<BullMasterModel>(connection);
        string strQuery = @"select BM.BullMasterId,ss.Name as SemenStation,BM.BullNo,BM.BirthDate,b.Name as BullBreed,BM.SemenProductionDate,
            LV.LookupValue AS Species,BM.BullBirthPlace, BM.BreedingValue,BM.IsSexedSemen
            from BullMaster BM with(nolock)
            left outer join LookupValues LV with(nolock) on LV.LookupValuesId=BM.Species
            left outer join Semenstation ss with(nolock) on ss.SemenStationId=BM.SemenStationId and ss.IsActive=@act
            left outer join BreedMaster b with(nolock) on b.BreedMAsterId=BM.BreedMasterId and b.IsActive=@act
            where BM.IsActive=@act";

        if (isExpired) strQuery += @" and BM.ExpiryDate<getdate() ";
        else strQuery += @" and isnull(BM.ExpiryDate,getdate())>=getdate() ";

        if (!string.IsNullOrEmpty(searchBy))
            strQuery += @" AND BM.BullNo LIKE concat('%',@srcby,'%') OR b.Name LIKE concat('%',@srcby,'%') OR LV.LookupValue LIKE concat('%',@srcby,'%')";

        pgData = _repoBullMaster.Query<BullMasterListModel, BullMasterModel>(strQuery,
            pagination.SortBy, pagination.PageNo, pagination.RecordsPerPage,
            new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
            new Parameter("srcby", System.Data.DbType.AnsiString, searchBy));
    }
    if (null == pgData?.Data || 0 >= pgData?.Data.Count())
        response = new ApiResponse
        {
            StatusCode = StatusCodes.Status404NotFound,
            Message = "No Record Found",
            Data = pgData
        };
    else
        response = new ApiResponse
        {
            StatusCode = StatusCodes.Status200OK,
            Data = pgData
        };
    return response;
}

public ApiResponse FillBull(int TypeId)
{
    List<CodeName<long, string>> bulls = default(List<CodeName<long, string>>);
    using (var connection = Tenant.GetConnection(_httpContext))
    {
        bulls = new Repository<BullMasterModel>(connection)
            .Query<CodeName<long, string>, BullMasterModel>(
            @"Select BullMasterId Code, BullNo [Name] 
            From BullMaster where IsActive=@act and Species=@typeId order by BullNo",
            new Parameter("act", System.Data.DbType.Boolean, (int)RecordStatusEnum.Active),
              new Parameter("typeId", System.Data.DbType.Int32, TypeId));
    }

    if (bulls?.Any() ?? false)
        return new ApiResponse
        {
            StatusCode = StatusCodes.Status200OK,
            Data = bulls
        };
    else
        return new ApiResponse
        {
            StatusCode = StatusCodes.Status204NoContent,
            Message = "No Bull Found"
        };
}
        