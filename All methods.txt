----------update---------------
// Assuming you have an existing 'companyId' for the company you want to update
int companyIdToUpdate = 123; // Replace with the actual company ID

// Retrieve the existing company model from the repository (_repoComp)
CompanyModel existingCompany = _repoComp.GetById(companyIdToUpdate);

if (existingCompany != null)
{
    // Update properties of the existing company model
    existingCompany.CName = "UpdatedCompanyName";
    existingCompany.Address = "UpdatedCompanyAddress";

    // Assuming you have a new file to update the attachment
    // You can replace this with your logic for obtaining the updated file
    IFormFile updatedFile = /* Logic to get the updated file */;

    byte[] updatedImageData;
    using (MemoryStream ms = new MemoryStream())
    {
        updatedFile.CopyTo(ms);
        updatedImageData = ms.ToArray();
    }

    // Update the FAmodel object for the attachment
    FAmodel existingAttachment = _repoFA.GetByReferenceId(companyIdToUpdate);

    if (existingAttachment != null)
    {
        existingAttachment.Filename = updatedFile.FileName;
        existingAttachment.FileSize = updatedFile.Length.ToString();
        existingAttachment.FileType = updatedFile.ContentType;
        existingAttachment.Path = updatedImageData;

        // Update the 'model' object in the main repository
        _repoComp.Update(existingCompany);

        // Update the 'attchmodel' object in the attachment repository
        _repoFA.Update(existingAttachment);

        // Commit changes to both repositories
        _repoComp.Commit();
        Console.WriteLine("Data updated successfully.");
    }
    else
    {
        Console.WriteLine("Attachment not found for the specified company ID.");
    }
}
else
{
    Console.WriteLine("Company not found for the specified ID.");
}
---------------------add-----------------------------
_repoComp.BeginTransaction();
_repoA = new Repository<Amodel>(_repoComp.Transaction);

try
{
    // Ensure that 'CName' property is not null or empty
    if (!string.IsNullOrEmpty(model.CName))
    {
        model.CreatedBy = 1;

        byte[] imageData;
        using (MemoryStream ms = new MemoryStream())
        {
            file.CopyTo(ms);
            imageData = ms.ToArray();
        }

        // Add the 'model' object to the repository (_repoComp)
        if (_repoComp.Add(model))
        {
            // Create a new FAmodel object for handling attachments
            FAmodel attchmodel = new FAmodel()
            {
                AttachmentType = 1,
                ReferenceId = model.CompanyId,
                Filename = file.FileName,
                FileSize = file.Length.ToString(),
                FileType = file.ContentType,
                Path = imageData,/store the file content as a byte array
                CreatedBy = model.CreatedBy
            };

            // Check if the 'attchmodel' object is successfully added to the repository (_repoFA)
            if (_repoFA.Add(attchmodel))
            {
                // If successful, commit changes to both repositories
                _repoComp.Commit();
                Console.WriteLine("Data added successfully.");
            }
            else
            {
                // If unsuccessful, handle the failure (log, display error, etc.)
                Console.WriteLine("Failed to add data to the attachment repository.");
            }
        }
        else
        {
            // If unsuccessful, handle the failure (log, display error, etc.)
            Console.WriteLine("Failed to add data to the main repository.");
        }
    }
    else
    {
        Console.WriteLine("Custom condition for success not met. The 'CName' property is required.");
    }
}
catch (Exception ex)
{
    // If an exception occurs, roll back the transaction
    _repoComp.RollbackTransaction();

    // Handle the exception (log, display error, etc.)
    Console.WriteLine($"An error occurred: {ex.Message}");
}
finally
{
    // Ensure the transaction is properly disposed
    _repoComp.DisposeTransaction();
}
------------------delete-------------------
_repoComp.BeginTransaction();
_repoA = new Repository<Amodel>(_repoComp.Transaction);

try
{
    int companyIdToDelete = /* specify the CompanyId you want to delete */;
    
    // Check if the company exists before attempting to delete
    if (_repoComp.Exists(companyIdToDelete))
    {
        // Delete the company from _repoComp
        _repoComp.Delete(companyIdToDelete);

        // Delete the corresponding attachment from _repoFA
        FAmodel attachmentToDelete = _repoFA.GetByReferenceId(companyIdToDelete);
        if (attachmentToDelete != null)
        {
            _repoFA.Delete(attachmentToDelete.Id); // Assuming Id is the identifier of the attachment
        }

        // Commit the transaction
        _repoComp.CommitTransaction();

        Console.WriteLine("Data deleted successfully.");
    }
    else
    {
        Console.WriteLine($"Company with ID {companyIdToDelete} not found.");
    }
}
catch (Exception ex)
{
    // If an exception occurs, roll back the transaction
    _repoComp.RollbackTransaction();

    // Handle the exception (log, display error, etc.)
    Console.WriteLine($"An error occurred: {ex.Message}");
}
finally
{
    // Ensure the transaction is properly disposed
    _repoComp.DisposeTransaction();
}
-------------------getbyid---------------------
_repoComp.BeginTransaction();
_repoA = new Repository<Amodel>(_repoComp.Transaction);

try
{
    int companyIdToRetrieve = /* specify the CompanyId you want to retrieve */;

    // Use raw SQL query to retrieve company and attachment data
    string sqlQuery = $@"
        SELECT c.*, a.*
        FROM Companies c
        LEFT JOIN Attachments a ON c.CompanyId = a.ReferenceId
        WHERE c.CompanyId = {companyIdToRetrieve}";

    List<(CompanyModel, FAmodel)> result = _dbContext.Query<(CompanyModel, FAmodel)>().FromSqlRaw(sqlQuery).ToList();

    if (result.Any())
    {
        // Assuming that the first item in the result list corresponds to the retrieved data
        (CompanyModel retrievedCompany, FAmodel attachment) = result.First();

        // Do something with the retrieved company and attachment data...
        Console.WriteLine($"Company Name: {retrievedCompany.CName}");
        Console.WriteLine($"Attachment Filename: {attachment?.Filename}");
        // Other properties...

        Console.WriteLine("Data retrieved successfully.");
    }
    else
    {
        Console.WriteLine($"Company with ID {companyIdToRetrieve} not found.");
    }
}
catch (Exception ex)
{
    // Handle the exception (log, display error, etc.)
    Console.WriteLine($"An error occurred: {ex.Message}");
}
finally
{
    // Ensure the transaction is properly disposed
    _repoComp.DisposeTransaction();
}
--------------------update-----------------
[HttpPost]
public IActionResult UpdateCompanyWithImage(int companyId)
{
    _repoComp.BeginTransaction();
    _repoA = new Repository<Amodel>(_repoComp.Transaction);

    try
    {
        // Retrieve the company by its ID
        CompanyModel existingCompany = _repoComp.GetById(companyId);

        if (existingCompany != null)
        {
            // Assuming you have a method to get the corresponding attachment
            FAmodel existingAttachment = _repoFA.GetByReferenceId(companyId);

            if (existingAttachment != null)
            {
                // Assuming you are expecting a single file in the form submission
                IFormFile updatedFile = HttpContext.Request.Form.Files.FirstOrDefault();

                if (updatedFile != null && updatedFile.Length > 0)
                {
                    // Update properties of the existing attachment
                    existingAttachment.Filename = updatedFile.FileName;
                    existingAttachment.FileSize = updatedFile.Length.ToString();
                    existingAttachment.FileType = updatedFile.ContentType;

                    // Update image data
                    using (MemoryStream ms = new MemoryStream())
                    {
                        updatedFile.CopyTo(ms);
                        existingAttachment.Path = ms.ToArray();
                    }

                    // Save changes to the attachment repository (_repoFA)
                    _repoFA.Update(existingAttachment);

                    // Commit changes to both repositories
                    _repoComp.CommitTransaction();

                    Console.WriteLine("Data updated successfully.");
                }
                else
                {
                    Console.WriteLine("No file uploaded or file is empty.");
                }
            }
            else
            {
                Console.WriteLine("Attachment not found for the specified company ID.");
            }
        }
        else
        {
            Console.WriteLine("Company not found for the specified ID.");
        }
    }
    catch (Exception ex)
    {
        // If an exception occurs, roll back the transaction
        _repoComp.RollbackTransaction();

        // Handle the exception (log, display error, etc.)
        Console.WriteLine($"An error occurred: {ex.Message}");
    }
    finally
    {
        // Ensure the transaction is properly disposed
        _repoComp.DisposeTransaction();
    }

    // Return appropriate response or redirect
    return RedirectToAction("Index"); // Adjust based on your application flow
}
==============update===============
[HttpPost]
public IActionResult UpdateCompanyWithImage(int companyId)
{
    _repoComp.BeginTransaction();
    _repoA = new Repository<Amodel>(_repoComp.Transaction);

    try
    {
        // Assuming you are expecting a single file in the form submission
        IFormFile updatedFile = HttpContext.Request.Form.Files.FirstOrDefault();

        if (updatedFile != null && updatedFile.Length > 0)
        {
            // Update query to update the Attachment table
            string updateQuery = $@"
                UPDATE Attachments
                SET Filename = @Filename, FileSize = @FileSize, FileType = @FileType, Path = @Path
                WHERE ReferenceId = @ReferenceId";

            _dbContext.Database.ExecuteSqlRaw(updateQuery,
                new SqlParameter("@Filename", updatedFile.FileName),
                new SqlParameter("@FileSize", updatedFile.Length.ToString()),
                new SqlParameter("@FileType", updatedFile.ContentType),
                new SqlParameter("@Path", GetFileBytes(updatedFile)),
                new SqlParameter("@ReferenceId", companyId));

            // Commit changes to both repositories
            _repoComp.CommitTransaction();

            Console.WriteLine("Data updated successfully.");
        }
        else
        {
            Console.WriteLine("No file uploaded or file is empty.");
        }
    }
    catch (Exception ex)
    {
        // If an exception occurs, roll back the transaction
        _repoComp.RollbackTransaction();

        // Handle the exception (log, display error, etc.)
        Console.WriteLine($"An error occurred: {ex.Message}");
    }
    finally
    {
        // Ensure the transaction is properly disposed
        _repoComp.DisposeTransaction();
    }

    // Return appropriate response or redirect
    return RedirectToAction("Index"); // Adjust based on your application flow
}

private byte[] GetFileBytes(IFormFile file)
{
    using (MemoryStream ms = new MemoryStream())
    {
        file.CopyTo(ms);
        return ms.ToArray();
    }
}
28/11
using AI.Models;
using Azure;
using FluentMigrator.Runner.Generators;
using Microsoft.AspNetCore.Http;
using MongoDB.Bson.Serialization.Serializers;
using Prompt.Infrastructure;
using Serilog.Sinks.File;
using Swashbuckle.AspNetCore.Swagger;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography.Xml;
using System.Text;
using System.Threading.Tasks;
using Vega;
using static AI.Models.CompanyMasterrModel;
using static AI.Models.Enums;
using static MongoDB.Driver.WriteConcern;

namespace AI.Services.CompanyMasterr
{
    public class CompanyMasterr : CommonService, ICompanyMasterr
    {
        public Repository<CompanyMasterrModel> _repocompanymasterr { get; set; }
        //public Repository<UserMasterrModel> _repousermasterr { get; set; }
        public Repository<AttachmentMappingModel> _repoattachmentmapping { get; set; }
        public Repository<ACustomModel> _repoacustom { get; set; }
        public CompanyMasterr(IHttpContextAccessor httpContext, ICurrentUser currentUser) : base(httpContext, currentUser)
        {
        }

        public ApiResponse Add(CompanyMasterrModel companyMasterrModel, IFormFile file)
        {
            ApiResponse response = default(ApiResponse);
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repocompanymasterr = new Repository<CompanyMasterrModel>(connection);

                _repocompanymasterr.BeginTransaction();
                _repoattachmentmapping = new Repository<AttachmentMappingModel>(_repocompanymasterr.Transaction);
                //AttachmentMappingModel data = companyMasterrModel.GetMapped<AttachmentMappingModel, CompanyMasterrModel>();
                if (!string.IsNullOrEmpty(companyMasterrModel.CompanyName))
                {
                    companyMasterrModel.CreatedBy = 1;
                    byte[] imageData;
                    using (MemoryStream ms = new MemoryStream())
                    {
                        file.CopyTo(ms);
                        imageData = ms.ToArray();
                    }
                    _repocompanymasterr.Add(companyMasterrModel);
                    AttachmentMappingModel attachmentMappingModel = new AttachmentMappingModel();

                    attachmentMappingModel.Atype = 1;
                    attachmentMappingModel.ReferenceId = companyMasterrModel.Cid;
                    attachmentMappingModel.FileName = file.FileName;
                    attachmentMappingModel.Filesize = file.Length;
                    attachmentMappingModel.FileType = file.ContentType;
                    attachmentMappingModel.Filepath = imageData;
                    attachmentMappingModel.CreatedBy = 1;

                    //_repoattachmentmapping data = companyMasterr.GetMapped<AttachmentMappingModel, CompanyMasterrModel>();

                    _repoattachmentmapping.Add(attachmentMappingModel);
                    _repocompanymasterr.Commit();
                    response = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status200OK,
                        Message = "added"
                    };
                }

                else
                {
                    _repocompanymasterr.Rollback();
                    response = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status404NotFound,
                        Message = "error "
                    };

                }
                return response;
            }

        }


        public ApiResponse Delete(long id)
        {
            ApiResponse apiResponse = default(ApiResponse);
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repocompanymasterr = new Repository<CompanyMasterrModel>(connection);
                _repoattachmentmapping = new Repository<AttachmentMappingModel>(connection);
                CompanyMasterrModel companyMasterrModel = _repocompanymasterr.ReadOne(id);
                AttachmentMappingModel attachmentMappingModel1;

                if (companyMasterrModel != null)
                {
                    if (_repoattachmentmapping.Exists("ReferenceId= @id and IsActive=@act", new
                    {
                        id = companyMasterrModel.Cid,
                        act = RecordStatusEnum.Active
                    }))
                        apiResponse = new ApiResponse
                        {
                            StatusCode = StatusCodes.Status409Conflict,
                            Message = string.Format("first delete attachment then company ", companyMasterrModel.Cid),
                            Data = false
                        };
                    else
                    {
                        _repocompanymasterr.Delete(id, _currentUser?.Info?.Id);
                       // AttachmentMappingModel attachmentMappingModel = _repoattachmentmapping.ReadOne(id);

                        //_repoattachmentmapping.Delete(id, _currentUser?.Info?.Id);

                        apiResponse = new ApiResponse
                        {
                            StatusCode = StatusCodes.Status200OK,
                            Message = "deleted"
                        };

                    }
                }
                else
                {
                    apiResponse = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status204NoContent,
                        Message = "record Not Found",
                        Data = false
                    };
                }
            }
            return apiResponse;
        }


        public ApiResponse GetById(long id)
        {
            ApiResponse response = default(ApiResponse);
            ACustomModel aCustomModel = new ACustomModel();
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                //_repocompanymasterr = new Repository<CompanyMasterrModel>(connection); 
                _repoattachmentmapping = new Repository<AttachmentMappingModel>(connection);
                _repoacustom= new Repository<ACustomModel>(connection);
                string sqlQuery = $@"select c.Cid, c.CompanyName, c.Address, a.Filepath
                     from CompanyMasterr c 
                     left join AttachmentMapping a on c.Cid = a.ReferenceId 
                     where c.Cid = @cid";

                aCustomModel= _repoacustom.Query<ACustomModel,ACustomModel>(sqlQuery,new Parameter("act",System.Data.DbType.Boolean,(int)RecordStatusEnum.Active),
                    new Parameter("cid",System.Data.DbType.Int64,id)).FirstOrDefault();

                if (aCustomModel != null)
                {

                    //List<AttachmentMappingModel> attachmentMappingModels = _repoattachmentmapping.Query<AttachmentMappingModel, AttachmentMappingModel>(
                    //"select Filepath from AttachmentMapping where ReferenceId = @CompanyId",
                    //new Parameter("CompanyId", System.Data.DbType.Int64, id));
                    List<AttachmentMappingModel> attachmentMappingModels = _repoattachmentmapping.Query<AttachmentMappingModel,AttachmentMappingModel>(
                "select Filepath from AttachmentMapping where ReferenceId = @CompanyId",
                new Parameter("CompanyId", System.Data.DbType.Int64, id));

                    response = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status200OK,
                        Data = new { Company = aCustomModel, LogoPaths = attachmentMappingModels }
                    };

  
                }
                else
                {
                    response = new ApiResponse
                    {
                        StatusCode = StatusCodes.Status404NotFound,
                        Message = "No Record Found",
                        Data = false
                    };
                }
            }
            return response;
        }

        public ApiResponse Update(long id,CompanyMasterrModel companyMasterrModel, IFormFile file)
        {
            ApiResponse apiResponse = default(ApiResponse);
            using (var connection = Tenant.GetConnection(_httpContext))
            {
                _repocompanymasterr = new Repository<CompanyMasterrModel>(connection);
                _repoattachmentmapping = new Repository<AttachmentMappingModel>(connection);
                _repocompanymasterr.BeginTransaction();
                _repoattachmentmapping = new Repository<AttachmentMappingModel>(_repocompanymasterr.Transaction);
                try
                {
                    CompanyMasterrModel cmModel = _repocompanymasterr.ReadOne(id);
                    if (cmModel != null)
                    {
                        //if (!_repocompanymasterr.Exists(criteria: "CompanyName=@compname and Cid!=@id", parameters: new { compname = companyMasterrModel.CompanyName, id = companyMasterrModel.Cid }))
                        //{
                            companyMasterrModel.UpdatedBy = 1;
                            companyMasterrModel.CreatedBy = 1;
                            bool b=_repocompanymasterr.Update(companyMasterrModel);
                            if (b)
                            {
                            AttachmentMappingModel attachmentMappingModel = new AttachmentMappingModel();
                            attachmentMappingModel = _repoattachmentmapping.ReadOne("ReferenceId=@id", new
                            {
                                id=id
                            });
                            byte[] imageData;
                                using (MemoryStream ms = new MemoryStream())
                                {
                                    file.CopyTo(ms);
                                    imageData = ms.ToArray();
                                }
                             
                                attachmentMappingModel.Atype = 1;
                                attachmentMappingModel.ReferenceId = cmModel.Cid;
                                attachmentMappingModel.FileName = file.FileName;
                                attachmentMappingModel.Filesize = file.Length;
                                attachmentMappingModel.FileType = file.ContentType;
                                attachmentMappingModel.Filepath = imageData;
                              
                                _repoattachmentmapping.Update(attachmentMappingModel);
                                _repocompanymasterr.Commit();
                                apiResponse = new ApiResponse()
                                {
                                    Message = "updated successfully",
                                    StatusCode = StatusCodes.Status200OK
                                };
                            }
                        //}
                        //else
                        //{
                        //    apiResponse = new ApiResponse()
                        //    {
                        //        Message = $"company with name {companyMasterrModel.CompanyName} already exists",
                        //        StatusCode = StatusCodes.Status200OK
                        //    };

                        //}
                    }
                    else
                    {
                        apiResponse = new ApiResponse()
                        {
                            Message = $"company with name {companyMasterrModel.CompanyName} not found",
                            StatusCode = StatusCodes.Status400BadRequest
                        };
                    }
                }
                catch (Exception e)
                {
                    _repocompanymasterr.Rollback();
                    apiResponse = new ApiResponse() { Message = e.Message, StatusCode = StatusCodes.Status400BadRequest };
                }
            }
                return apiResponse;
            }
        }
    }






